.\" Japanese Version Copyright (c) 2003 Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated Mon Jun 23 22:53:33 JST 2003
.\"         by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD:	autoreply		自動返信
.\"WORD:	unseen sequences	未読番号
.\"WORD:	recipe			レシピ
.\"
.\"if n .pl +(135i-\n(.pu)
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.Id $Id: procmailex.5,v 1.1 2003/06/16 17:06:43 motoki Exp $
.TH PROCMAILEX 5 \*(Dt BuGless
.rn SH Sh
.de SH
.br
.ne 11
.Sh "\\$1"
..
.rn SS Ss
.de SS
.br
.ne 10
.Ss "\\$1"
..
.rn TP Tp
.de TP
.br
.ne 9
.Tp \\$1
..
.rn RS Rs
.de RS
.na
.nf
.Rs
..
.rn RE Re
.de RE
.Re
.fi
.ad
..
.de Sx
.PP
.ne \\$1
.RS
..
.de Ex
.RE
.PP
..
.na
.\"O .SH NAME
.SH 名前
.\"O procmailex \- procmail rcfile examples
procmailex \- procmail 設定ファイルの例
.\"O .SH SYNOPSIS
.SH 書式
.\"O .B $HOME/.procmailrc examples
.B $HOME/.procmailrc 設定例
.ad
.\"O .SH DESCRIPTION
.SH 説明
.\"O For a description of the rcfile format see
.\"O .BR procmailrc (5).
設定ファイル (rcfile) の書式の説明は
.BR procmailrc (5)
を参照のこと。
.PP
.\"O The weighted scoring technique is described in detail in the
.\"O .BR procmailsc (5)
.\"O man page.
重みつきスコアリング手法については
.BR procmailsc (5)
に詳しい説明がある。
.PP
.\"O This man page shows several example recipes.  For examples of complete rcfiles
.\"O you can check the NOTES section in
.\"O .BR procmail (1),
.\"O or look at the example rcfiles part of the procmail source distribution
.\"O (procmail*/examples/?procmailrc).
この manpage は、いろいろなレシピの例を示したものである。
rcfile 全体の例については、
.BR procmail (1)
の「注記」の章や、procmail のソース配布に含まれる rcfile のサンプル
(procmail*/examples/?procmailrc) を参照してほしい。
.\"O .SH EXAMPLES
.SH 例
.\"O Sort out all mail coming from the scuba-dive mailing list into the mailfolder
.\"O scubafile (uses the locallockfile scubafile.lock).
scuba-dive メーリングリストからのメールをすべて選び出して scubafile と
いうメールフォルダに入れる (ロックファイルとして scubafile.lock を使用する)。
.Sx 3
:0:
* ^TOscuba
scubafile
.Ex
.\"O Forward all mail from peter about compilers to william (and keep a copy
.\"O of it here in petcompil).
peter からのメールで、Subject に compilers が入っているものを
すべて william に転送する
(かつメールのコピーを petcompil に保存する)。
.Sx 10
:0
* ^From.*peter
* ^Subject:.*compilers
{
   :0 c
   ! william@somewhere.edu

   :0
   petcompil
}
.Ex
.\"O An equivalent solution that accomplishes the same:
上記と同じことを実現する別の方法:
.Sx 7
:0 c
* ^From.*peter
* ^Subject:.*compilers
! william@somewhere.edu

   :0 A
   petcompil
.Ex
.\"O An equivalent, but slightly slower solution that accomplishes the same:
同じことを実現できるが、上記の方法より少し動作が遅い方法:
.Sx 9
:0 c
* ^From.*peter
* ^Subject:.*compilers
! william@somewhere.edu

:0
* ^From.*peter
* ^Subject:.*compilers
petcompil
.Ex
.\"O If you are fairly new to procmail and plan to experiment a little bit
.\"O it often helps to have a
.\"O .I safety net
.\"O of some sort.  Inserting the following two recipes above all other recipes
.\"O will make sure that of all arriving mail always the last 32 messages will
.\"O be preserved.  In order for it to work as intended, you have to create
.\"O a directory named `backup' in $MAILDIR prior to inserting these two recipes.
procmail を使うのがほとんど初めてで、ちょっとだけ試してみたい場合は、
何らかの「安全網」を設けておくと助かることが多い。
以下の 2 つのレシピを、他のどのレシピより前に入れておくと、
到着したメールのうち常に最新の 32 通を保存することができる。
この機能を働かせるためには、これら 2 つのレシピを追加する前に $MAILDIR に
`backup' という名前のディレクトリを作っておかなければならない。
.Sx 5
:0 c
backup

:0 ic
| cd backup && rm \-f dummy `ls \-t msg.* | sed \-e 1,32d`
.Ex
.\"O If your system doesn't generate or generates incorrect leading `From '
.\"O lines on every mail, you can fix this by calling up procmail with
.\"O the \-f- option.  To fix the same problem by
.\"O different means, you could have inserted the following two
.\"O recipes above all other recipes in your rcfile.  They will filter the header
.\"O of any mail through formail which will strip any leading `From ', and
.\"O automatically regenerates it subsequently.
使っているメールシステムが、メールの先頭の `From ' 行を生成しなかったり、
間違った `From ' 行を生成したりする場合は、procmail を \-f- オプションをつけ
て呼び出すことでこの問題を修正する (正しい `From ' 行をつける) ことができる。
この問題を解決する別の方法としては、以下のレシピを rcfile の中で一番最初の
レシピとして入れる方法もある。こうすると、全てのメールのヘッダは formail に
よりフィルタリングされる。 formail は、メールの先頭にある `From ' 行を
取り除いた上で、さらに `From ' 行を自動生成する。
.Sx 2
:0 fhw
| formail \-I "From " \-a "From "
.Ex
.\"O Add the headers of all messages that didn't come from the postmaster
.\"O to your private header collection (for
.\"O statistics or mail debugging); and use the lockfile `headc.lock'.  In order
.\"O to make sure the lockfile is not removed until the pipe has finished,
.\"O you have to specify option `w'; otherwise the lockfile would be
.\"O removed as soon as the pipe has accepted the mail.
管理者 (postmaster) 以外から来た全てのメールのヘッダを、(統計をとったり、
メールのデバッグのために) 自分だけのヘッダコレクションに追加するには、次の
ように設定する。書きこみ時のロックファイルとして `headc.lock' を使用する。
パイプ処理が完了する前にロックファイルが削除されることがないように、
`w' オプションを指定しなければいけない。さもなければ、ロックファイルは
パイプが処理対象のメールを受け付けたと同時に削除されてしまう。
.Sx 3
:0 hwc:
* !^FROM_MAILER
| uncompress headc.Z; cat >>headc; compress headc
.Ex
.\"O Or, if you would use the more efficient gzip instead of compress:
上記のレシピで compress の代わりに、もっと圧縮率が良い gzip を使用するには
以下のようにすればよい。
.Sx 3
:0 hwc:
* !^FROM_MAILER
| gzip >>headc.gz
.Ex
.\"O Forward all mails shorter than 1000 bytes to my home address (no lockfile
.\"O needed on this recipe).
1000 バイト未満のメールをすべて自宅のアドレスに転送する
(このレシピの場合、ロックファイルは必要ない)。
.Sx 3
:0
* < 1000
! myname@home
.Ex
.\"O Split up incoming digests from the surfing mailing list into their individual
.\"O messages, and store them into surfing, using surfing.lock as the locallockfile.
surfing メーリングリストのまとめ送りのメールを個々のメッセージに分割して、
メールフォルダ surfing に格納する。ロックファイルとして surfing.lock を使用する。
.Sx 3
:0:
* ^Subject:.*surfing.*Digest
| formail +1 \-ds >>surfing
.Ex
.\"O Store everything coming from the postmaster or mailer-daemon (like bounced
.\"O mail) into the file postm, using postm.lock as the locallockfile.
postmaster や mailer-daemon から来た全てのメール(エラーで戻ってきたメールなど)
を postm ファイルに格納する。ロックファイルとして postm.lock を使用する。
.Sx 3
:0:
* ^FROM_MAILER
postm
.Ex
.\"O A simple autoreply recipe.  It makes sure that neither mail from any daemon
.\"O (like bouncing mail or mail from mailing-lists), nor autoreplies coming from
.\"O yourself will be autoreplied to.  If this precaution would not be taken,
.\"O disaster could result (`ringing' mail).  In order for this recipe to autoreply
.\"O to all the incoming mail, you should of course insert it before all other
.\"O recipes in your rcfile.  However, it is advisable to put it
.\"O .I after
.\"O any recipes that process the mails from subscribed mailinglists; it generally
.\"O is not a good idea to generate autoreplies to mailinglists (yes, the
.\"O !^FROM_DAEMON regexp should already catch those, but if the mailinglist
.\"O doesn't follow accepted conventions, this might
.\"O .I not
.\"O be
.\"O .IR enough ).
簡単な自動返信用のレシピ。このレシピは、デーモンからのメール (戻ってきた
メールやメーリングリストからのメールなど) や自分自身からの自動返信のメールには
自動返信しないことを保証している。もしこのような注意を怠ったならば、 (メール
ループなど) 大変なことが起こり得る。このレシピを用いて受信したすべてのメール
に対して自動応答を行うためには、言うまでもなく rcfile の他の全てのレシピより
前にこれを置かなければならない。ただし、講読しているメーリングリストからの
メールを処理するレシピの「後ろ」にこのレシピを置くことを推奨する。(確かに、
正規表現 !^FROM_DAEMON によってそのようなメールはすでに捕まえられているはず
だが、メーリングリストが一般的な慣習に従っていない場合は、これだけでは
「不十分」だからである。)
.Sx 6
:0 h c
* !^FROM_DAEMON
* !^X-Loop: your@own.mail.address
| (formail \-r \-I"Precedence: junk" \e
	 \-A"X-Loop: your@own.mail.address" ; \e
	echo "Mail received.") | $SENDMAIL \-t
.Ex
.\"O A more complicated autoreply recipe that implements the functional equivalent
.\"O of the well known
.\"O .BR vacation (1)
.\"O program.  This recipe is based on the same principles as the last one (prevent
.\"O `ringing' mail).  In addition to that however, it maintains a vacation database
.\"O by extracting the name of the sender and inserting it in the vacation.cache
.\"O file if the name was new (the vacation.cache file is maintained by formail
.\"O which will make sure that it always contains the most recent names, the size
.\"O of the file is limited to a maximum of approximately 8192 bytes).  If the name
.\"O was new, an autoreply will be sent.
以下はもっと複雑な自動返信のレシピの例で、有名な
.BR vacation (1)
プログラムと同じ機能を実現するものである。
このレシピは(メールループを防ぐなどの)直前のレシピと同じ方針で作られている。
さらに、このレシピでは送信者の名前を抽出して vacation データベースを作っており、
名前が新しいものだったときには vacation.cache ファイルにその名前が追加
される (vacation.cache ファイルは formail により管理されており、
常に最近の送信者名が格納され、ファイルのサイズの上限が約 8192 バイトに
なることが formail により保証される)。
新しい送信者名だった場合は、自動応答メッセージが送信される。
.PP
.\"O As you can see, the following recipe has comments
.\"O .B between
.\"O the conditions.
.\"O This is allowed.  Do
.\"O .B not
.\"O put comments on the same line as a condition though.
見て分かるように、以下のレシピでは条件の「間」にコメントが
入っている。このようなコメントの入れ方は認められている。
しかし、条件と同じ行にコメントを入れては「いけない」。
.Sx 18
SHELL=/bin/sh    # for other shells, this might need adjustment

:0 Whc: vacation.lock
 # Perform a quick check to see if the mail was addressed to us
* $^To:.*\e<$\eLOGNAME\e>
 # Don't reply to daemons and mailinglists
* !^FROM_DAEMON
 # Mail loops are evil
* !^X-Loop: your@own.mail.address
| formail \-rD 8192 vacation.cache

  :0 ehc         # if the name was not in the cache
  | (formail \-rI"Precedence: junk" \e
	    \-A"X-Loop: your@own.mail.address" ; \e
	  echo "I received your mail,"; \e
	  echo "but I won't be back until Monday."; \e
	  echo "-- "; cat $HOME/.signature \e
	 ) | $SENDMAIL \-oi \-t
.Ex
.\"O Store all messages concerning TeX in separate, unique filenames, in a directory
.\"O named texmail (this directory has to exist); there is no need to use lockfiles
.\"O in this case, so we won't.
TeX に関係する全メッセージを、texmail というディレクトリに、一通毎に別の、
他とは重複しない名前のファイルに保存する (ここで指定するディレクトリは
あらかじめ存在しなければならない)。
この場合、ロックファイルを使用する必要がないので、
レシピでもそうなっている。
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail
.Ex
.\"O The same as above, except now we store the mails in numbered files (MH mail
.\"O folder).
上と同じだが、メールを番号が振られたファイル (MH 形式のフォルダ)
に格納する点が異なる。
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail/.
.Ex
.\"O Or you could file the mail in several directory folders at the same time.
.\"O The following recipe will deliver the mail to two MH-folders and one
.\"O directory folder.  It is actually only one file with two extra hardlinks.
メールを同時に複数のディレクトリ・フォルダに振り分けることもできる。
以下のレシピは、メールを 2 つの MH 形式のフォルダと 1 つのディレクトリ・
フォルダに振り分ける。実際にはファイルは 1 つ作成されるだけで、追加で
ハードリンクが 2 つ作成される。
.Sx 3
:0
* (^TO|^Subject:.*)TeX[^t]
texmail/. wordprocessing dtp/.
.Ex
.\"O Store all the messages about meetings in a folder that is in a directory
.\"O that changes every month.  E.g. if it were January 1994, the folder
.\"O would have the name `94-01/meeting' and the locallockfile would be
.\"O `94-01/meeting.lock'.
会議 (meeting) に関する全メッセージを月毎に異なるディレクトリに
保存する。例えば、1994 年 1 月だったとすると、フォルダ名は `94-01/meeting'
という名前となり、ローカルロックファイルは `94-01/meeting.lock' になる。
.Sx 3
:0:
* meeting
`date +%y-%m`/meeting
.Ex
.\"O The same as above, but, if the `94-01' directory wouldn't have existed, it
.\"O is created automatically:
上と同じだが、`94-01' ディレクトリが存在しなかった場合、
自動的に作成される。
.Sx 9
MONTHFOLDER=`date +%y-%m`

:0 Wic
* ? test ! \-d $MONTHFOLDER
| mkdir $MONTHFOLDER

:0:
* meeting
${MONTHFOLDER}/meeting
.Ex
.\"O The same as above, but now by slightly different means:
上と同じだが、少しだけ違う方法:
.Sx 6
MONTHFOLDER=`date +%y-%m`
DUMMY=`test \-d $MONTHFOLDER || mkdir $MONTHFOLDER`

:0:
* meeting
${MONTHFOLDER}/meeting
.Ex
.\"O If you are subscribed to several mailinglists and people cross-post to
.\"O some of them, you usually receive several duplicate mails (one from every
.\"O list).  The following simple recipe eliminates duplicate mails.  It tells
.\"O formail to keep an 8KB cache file in which it will store the Message-IDs of
.\"O the most recent mails you received.  Since Message-IDs are guaranteed to
.\"O be unique for every new mail, they are ideally suited to weed out duplicate
.\"O mails.  Simply put the following recipe at the top of your rcfile, and
.\"O no duplicate mail will get past it.
複数のメーリングリストを講読していて、そのメーリングリストのいくつかに
クロスポストする人がいる場合、同じメッセージを何回か受け取ることがよくある
(各メーリングリストからは一通だが)。以下の簡単なレシピを使うと、重複した
メールを除去することができる。このレシピでは、 formail を通じて最近受信した
メールの Message-ID を格納する 8KB のキャッシュ・ファイルを作っている。
Message-ID は新着メール毎に一意であることが保証されているので、Message-ID
を使うのは重複するメールを除くのにまさにぴったりの方法である。このレシピを
rcfile の一番最初に置くだけで、重複するメールはこのレシピを通過できなくなる。
.Sx 2
:0 Wh: msgid.lock
| formail \-D 8192 msgid.cache
.Ex
.\"O .B Beware
.\"O if you have delivery problems in recipes below this one and procmail tries
.\"O to requeue the mail, then on the next queue run, this mail will be considered
.\"O a duplicate and will be thrown away.  For those not quite so confident in
.\"O their own scripting capabilities, you can use the following recipe instead.
.\"O It puts duplicates in a separate folder instead of throwing them away.
.\"O It is up to you to periodically empty the folder of course.
注意すべきこととして、これより後のレシピで配信に問題があると procmail は
そのメールをキューにもう一度入れようとする。そうすると、次回のキュー処理の
際にこのメールは重複しているとみなされ、どこかへ行ってしまう。
自分のスクリプト作成技術にあまり自信がない場合は、代わりに以下のレシピを
使うことができる。このレシピは、重複するメールをどこか捨ててしまうのではなく、
別のフォルダに入れる。もちろん、定期的にこのフォルダを空にするのは、
自分でやらないといけない。
.Sx 5
:0 Whc: msgid.lock
| formail \-D 8192 msgid.cache

:0 a:
duplicates
.Ex
.\"O Procmail can deliver to MH folders directly, but, it does not update
.\"O the unseen sequences the real MH manages.  If you want procmail to
.\"O update those as well, use a recipe like the following which will file
.\"O everything that contains the word spam in the body of the mail into an
.\"O MH folder called spamfold.  Note the local lockfile, which is needed
.\"O because MH programs do not lock the sequences file.  Asynchronous
.\"O invocations of MH programs that change the sequences file may therefore
.\"O corrupt it or silently lose changes.  Unfortunately, the lockfile
.\"O doesn't completely solve the problem as rcvstore could be invoked while
.\"O `show' or `mark' or some other MH program is running.  This problem is
.\"O expected to be fixed in some future version of MH, but until then,
.\"O you'll have to balance the risk of lost or corrupt sequences against
.\"O the benefits of the unseen sequence.
procmail は MH 形式のフォルダに直接メッセージを配信することができるが、
本物の MH が管理している未読番号 (unseen sequence) の更新は行わない。
procmail にも未読番号の更新を行わせたい場合は、以下のようなレシピを使うとよい。
この例では、本文に spam という言葉を含む全てのメールを spamfold という
MH フォルダに入れている。ローカルロックファイルが必要な点に注意すること。
なぜなら、MH のプログラム群は番号ファイル (sequences file) のロックを
行わないからである。したがって、番号ファイルを変更する MH のプログラムが
非同期で複数実行されると、内容がおかしくなったり、いつの間にか変更が失われる
可能性がある。残念ながら、ロックファイルを使ってもこの問題を完全に解決する
ことはできない。`show'、`mark' や他の MH プログラムの実行中に rcvstore
が起動されることがあり得るからである。この問題が MH の将来のバージョンで
修正されることを期待しているが、それまでは、番号が失なわれたりおかしく
なったりする危険と、未読番号を使う利点を、天秤にかけた上で使わなけらば
ならないだろう。
.Sx 3
:0 :spamfold/$LOCKEXT
* B ?? spam
| rcvstore +spamfold
.Ex
.\"O When delivering to emacs folders (i.e., mailfolders managed by any emacs
.\"O mail package, e.g., RMAIL or VM) directly, you should use emacs-compatible
.\"O lockfiles.  The emacs mailers are a bit braindamaged in that respect, they get
.\"O very upset if someone delivers to mailfolders which they already have in their
.\"O internal buffers.  The following recipe assumes that $HOME equals /home/john.
emacs のメールフォルダ (RMAIL や VM といった emacs 上で動作するメール・
パッケージで管理されているメールフォルダ) に直接配信する場合、 emacs と
同じロックファイルを使用すべきである。 emacs のメーラーはこの点で少し
おかしなところがあり、すでに emacs の内部バッファに読み込まれている
メールフォルダに第三者がメールを配信すると、非常に混乱してしまう。
以下のレシピは $HOME の値が /home/john の場合の例である。
.Sx 5
MAILDIR=Mail

:0:/usr/local/lib/emacs/lock/!home!john!Mail!mailbox
* ^Subject:.*whatever
mailbox
.Ex
.\"O Alternatively, you can have procmail deliver into its own set of mailboxes,
.\"O which you then periodically empty and copy over to your emacs files using
.\"O .BR movemail .
.\"O Movemail uses mailbox.lock local lockfiles per mailbox.  This actually is
.\"O the preferred mode of operation in conjunction with procmail.
別の方法としては、procmail 専用のメールボックスを設け、procmail はそこに
メールを配信するようにして、定期的に
.B movemail
を使ってこのファイルを空にし、内容を emacs メーラーのファイルにコピーする
こともできる。 movemail はメールボックス単位のローカルロックファイル
mailbox.lock を使用する。
実のところ、procmail と一緒に使う場合、この方法を使う方が望ましい。
.PP
.\"O To extract certain headers from a mail and put them into environment
.\"O variables you can use any of the following constructs:
メールから特定のヘッダを抽出して環境変数に設定するには、
以下のいずれかの方法も使用することができる。
.Sx 5
SUBJECT=`formail \-xSubject:`    # 通常のフィールド
FROM=`formail \-rt \-xTo:`        # 特殊な例

:0 h                            # 他の方法
KEYWORDS=| formail \-xKeywords:
.Ex
.\"O If you are using temporary files in a procmailrc file, and want to make
.\"O sure that they are removed just before procmail exits, you could use
.\"O something along the lines of:
procmailrc ファイル内で一時ファイルを使っていて、procmail 終了直前に
一時ファイルが確実に削除されるようにするには、以下のようにすればよい。
.Sx 2
TEMPORARY=$HOME/tmp/pmail.$$
TRAP="/bin/rm \-f $TEMPORARY"
.Ex
.\"O The TRAP keyword can also be used to change the exitcode of procmail.
.\"O I.e. if you want procmail to return an exitcode of `1' instead of its
.\"O regular exitcodes, you could use:
キーワード TRAP は procmail の終了コードを変更するために使うこともできる。
つまり、通常の終了コードの代わりに終了コード `1' を procmail が返すように
したい場合、以下のようにすればよい:
.Sx 3
EXITCODE=""
TRAP="exit 1;"  # exit は単独で動作するプログラム
		      # (standalone program) ではないので、
		      # 最後のセミコロンは忘れてはいけない。
.Ex
.\"O Or, if the exitcode does not need to depend on the programs run from
.\"O the TRAP, you can use a mere:
終了コードに TRAP から起動されたプログラムの結果を反映させる必要がない
場合は、以下のように書くだけでもよい。
.Sx 1
EXITCODE=1
.Ex
.\"O The following recipe prints every incoming mail that looks like a postscript
.\"O file.
以下のレシピは、受信したメールのうち postscript ファイルと思われるメールを
全部印刷する。
.Sx 3
:0 Bb
* ^^%!
| lpr
.Ex
.\"O The following recipe does the same, but is a bit more selective.  It only
.\"O prints the postscript file if it comes from the print-server.  The first
.\"O condition matches only if it is found in the header.  The second condition
.\"O only matches at the start of the body.
次のレシピは同じ動作をするが、もう少し選択条件が厳しくなっている。
print-server から来た postscript ファイルだけを印刷する。
最初の条件は、ヘッダ内に指定パタンが見つかった場合のみマッチする。
二番目の条件は、メール本文の先頭でのみマッチする。
.Sx 4
:0 b
* ^From[ :].*print-server
* B ?? ^^%!
| lpr
.Ex
.\"O The same as above, but now by slightly different means:
上記と同じだが、ちょっとだけ違った方法:
.Sx 7
:0
* ^From[ :].*print-server
{
  :0 B b
  * ^^%!
  | lpr
}
.Ex
.\"O Likewise:
これも同様:
.Sx 4
:0 HB b
* ^^(.+$)*From[ :].*print-server
* ^^(.+$)*^%!
| lpr
.Ex
.\"O Suppose you have two accounts, you use both accounts regularly, but they are
.\"O in very distinct places (i.e., you can only read mail that arrived at either one
.\"O of the accounts).  You would like to forward mail arriving at account one to
.\"O account two, and the other way around.  The first thing that comes to mind is
.\"O using .forward files at both sites; this won't work of course, since you will
.\"O be creating a mail loop.  This mail loop can be avoided by inserting the
.\"O following recipe in front of all other recipes in the $HOME/.procmailrc files on
.\"O both sites.  If you make sure that you add the same X-Loop: field at both
.\"O sites, mail can now safely be forwarded to the other account from either of
.\"O them.
メールアカウントを 2つ持っているとしよう。どちらも常時使用しているが、
とても離れた場所にあるとする (つまり、いずれか一方のアカウントに届いた
メールしか読むことができないとする)。アカウント 1 に届いたメールを
アカウント 2 に転送し、反対向きも行いたいという状況を考える。
まず思いつくのは、両方のサイトで .forward ファイルを使う方法だが、
もちろんうまく動かない。メールのループが起こってしまうからだ。
このメールのループは、両方のサイトの $HOME/.procmailrc ファイルの先頭に
以下のレシピを入れておくことで避けることができる。
両方のサイトで同じ X-Loop: フィールドを追加するようにしておけば、
メールはどちらのアカウントからでも安全に
もう一方のアカウントに転送することができるようになる。
.Sx 4
:0 c
* !^X-Loop: yourname@your.main.mail.address
| formail \-A "X-Loop: yourname@your.main.mail.address" | \e
	$SENDMAIL \-oi yourname@the.other.account
.Ex
.\"O If someone sends you a mail with the word `retrieve' in the subject, the
.\"O following will automatically send back the contents of info_file to the
.\"O sender.  Like in all recipes where we send mail, we watch out for mail
.\"O loops.
誰かが件名に `retrieve' というキーワードを入れたメールを送ってくると、
以下のレシピは自動的に info_file の内容を送信者に送り返す。
メールを送信するレシピではいつもそうであるが、メールのループが起こらない
ように気を付けること。
.Sx 6
:0
* !^From +YOUR_USERNAME
* !^Subject:.*Re:
* !^FROM_DAEMON
* ^Subject:.*retrieve
| (formail \-r ; cat info_file) | $SENDMAIL \-oi \-t
.Ex
.\"O Now follows an example for a very simple fileserver accessible by mail.
.\"O For more demanding applications, I suggest you take a look at
.\"O .B SmartList
.\"O (available from the same place as the procmail distribution).
.\"O As listed, this fileserver sends back at most one file per request, it
.\"O ignores the body of incoming mails, the Subject: line has to look
.\"O like "Subject: send file the_file_you_want" (the blanks are significant),
.\"O it does not return files that have names starting with a dot, nor does
.\"O it allow files to be retrieved that are outside the fileserver directory
.\"O tree (if you decide to munge this example, make sure you do not inadvertently
.\"O loosen this last restriction).
今度は、メールでアクセス可能な非常に簡単なファイルサーバの例である。
もっと高度な機能が必要な場合には、
.B SmartList
を調べてみることをお薦めする
(SmartList は procmail の配布場所と同じ場所で入手できる)。
以下のリストにあるように、このファイルサーバは一つのリクエストに対し
最大でも一つのファイルしか送り返さない。また、受信したメールの本文は無視され、
Subject: 行は「Subject: send file the_file_you_want」 (空白には意味がある)
という形式になっていなければならない。
ファイルネームがドット (.) で始まるファイルは送り返さないし、
ファイルサーバのディレクトリ・ツリーの外部にあるファイルを
取り出すこともできないようになっている
(この例に手を入れる場合は、この最後の制限項目を不注意で
緩めることがないように気をつけること)。
.Sx 18
:0
* ^Subject: send file [0-9a-z]
* !^X-Loop: yourname@your.main.mail.address
* !^Subject:.*Re:
* !^FROM_DAEMON
* !^Subject: send file .*[/.]\e.
{
  MAILDIR=$HOME/fileserver # ファイルサーバのディレクトリに移動

  :0 fhw                   # 返信用ヘッダ作成とファイル名抽出
  * ^Subject: send file \e/[^ ]*
  | formail \-rA "X-Loop: yourname@your.main.mail.address"

  FILE="$MATCH"            # 要求のあったファイル名

  :0 ah
  | cat \- ./$FILE 2>&1 | $SENDMAIL \-oi \-t
}
.Ex
.\"O The following example preconverts all plain-text mail arriving in certain
.\"O encoded MIME formats into a more compact 8-bit format which can be used
.\"O and displayed more easily by most programs.  The
.\"O .BR mimencode (1)
.\"O program is part of Nathaniel Borenstein's metamail package.
以下の例は、特定の MIME 形式でエンコードされて届いた plain-text
のメールを、よりコンパクトな 8 ビット形式に前もって変換する。
こうすることで、多くのプログラムで簡単に使用したり表示したり
できるようになる。
.BR mimencode (1)
プログラムは Nathaniel Borenstein の metamail パッケージに含まれている。
.Sx 17
:0
* ^Content-Type: *text/plain
{
  :0 fbw
  * ^Content-Transfer-Encoding: *quoted-printable
  | mimencode \-u \-q

	  :0 Afhw
	  | formail \-I "Content-Transfer-Encoding: 8bit"

  :0 fbw
  * ^Content-Transfer-Encoding: *base64
  | mimencode \-u \-b

	  :0 Afhw
	  | formail \-I "Content-Transfer-Encoding: 8bit"
}
.Ex
.\"O The following one is rather exotic, but it only serves to demonstrate a
.\"O feature.  Suppose you have a file in your HOME directory called ".urgent",
.\"O and the (one) person named in that file is the sender of an incoming mail,
.\"O you'd like that mail to be stored in $MAILDIR/urgent instead of in any of the
.\"O normal mailfolders it would have been sorted in.  Then this is what you could
.\"O do (beware, the filelength of $HOME/.urgent should be well below $LINEBUF,
.\"O increase LINEBUF if necessary):
以下の例はあまり見かけないものだが、このような機能もこともできるという
紹介である。HOME ディレクトリに ".urgent" という名前のファイルがあり、
そのファイルに (一人の) 人の名前が書かれていて、その人からメールが来た場合、
通常のメールフォルダに入れる代わりに $MAILDIR/urgent に格納したいとする。
このレシピでそれができる。
(気を付けるべき点として、$HOME/.urgent のファイルサイズは $LINEBUF より
小さくすべきである。必要なら LINEBUF の値を増やすこと。)
.Sx 5
URGMATCH=`cat $HOME/.urgent`

:0:
* $^From.*${URGMATCH}
urgent
.Ex
.\"O An entirely different application for procmail would be to conditionally
.\"O apply filters to a certain (outgoing) text or mail.  A typical example
.\"O would be a filter through which you pipe all outgoing mail, in order
.\"O to make sure that it will be MIME encoded only if it needs to be.
.\"O I.e. in this case you could start procmail in the middle of a pipe like:
procmail の全く別の使い方として、特定の (外に出ていく) テキストやメールに
条件に応じてフィルタを適用するといった方法がある。代表的な例としては、
外に出ていく全てのメールを通すフィルタで、
必要な場合のみ MIME エンコードされるようにするものがある。
この場合には、パイプの中段として procmail を起動することになる。
.Sx 1
cat newtext | procmail ./mimeconvert | mail chris@where.ever
.Ex
.\"O The
.\"O .B mimeconvert
.\"O rcfile could contain something like (the =0x80= and =0xff= should
.\"O be substituted with the real 8-bit characters):
.B mimeconvert
rcfile には、以下のようなルールが入ることだろう (=0x80= や =0xff= には
実際の 8 ビット文字を入れること):
.Sx 10
DEFAULT=|    # いつものようにメールを配信するのではなく
             # 標準出力にパイプする
:0 Bfbw
* [=0x80=-=0xff=]
| mimencode \-q

  :0 Afhw
  | formail \-I 'MIME-Version: 1.0' \e
     \-I 'Content-Type: text/plain; charset=ISO-8859-1' \e
     \-I 'Content-Transfer-Encoding: quoted-printable'
.Ex
.\"O .SH "SEE ALSO"
.SH 関連項目
.na
.nh
.BR procmail (1),
.BR procmailrc (5),
.BR procmailsc (5),
.BR sh (1),
.BR csh (1),
.BR mail (1),
.BR mailx (1),
.BR binmail (1),
.BR uucp (1),
.BR aliases (5),
.BR sendmail (8),
.BR egrep (1),
.BR grep (1),
.BR biff (1),
.BR comsat (8),
.BR mimencode (1),
.BR lockfile (1),
.BR formail (1)
.hy
.ad
.\"O .SH AUTHORS
.SH 作者
Stephen R. van den Berg
.RS
<srb@cuci.nl>
.RE
Philip A. Guenther
.RS
<guenther@sendmail.com>
.RE
.\".if n .pl -(\n(.tu-1i)
.rm SH
.rn Sh SH
.rm SS
.rn Ss SS
.rm TP
.rn Tp TP
.rm RS
.rn Rs RS
.rm RE
.rn Re RE
