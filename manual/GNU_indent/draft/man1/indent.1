.\" 
.\" Japanese Version
.\" Updated & Modified Mon May  3 07:00:19 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" 
.TH INDENT 1L 
.\"O .SH "NAME"
.SH 名前
.\"O indent \- changes the appearance of a C program by inserting or deleting whitespace.  
indent \- 空白の挿入や削除を行い、C 言語プログラムの見栄えを変える。
.\"O .SH "SYNOPSIS"
.SH 書式
.B "indent "
[options] [input\-files]
.sp
.B "indent "
[options] [single\-input\-file] [\-o output\-file]
.sp
.B "indent "
\-\-version
.\"O .SH "DESCRIPTION"
.SH 説明
.\"O This man page is generated from the file \fIindent.texinfo\fR.
.\"O This is Edition 2.2.9 of "The \fBindent\fR Manual",
.\"O for Indent Version 2.2.9, last updated 10 November 2002.
この man ページはファイル \fIindent.texinfo\fR から生成した。
これは indent バージョン 2.2.9 用の「The \fBindent\fR Manual」の
2.2.9 版 (2002 年 11 月 10 日版) である。

.\"O The \fBindent\fR program
.\"O can be used to make code easier to read.  It can also convert from one
.\"O style of writing C to another.  
\fBindent\fR プログラムを使うとコードを読みやすくすることができる。
また、C 言語のコード記述を、
あるスタイルから別のスタイルに変換することもできる。

.\"O .B indent\fR understands a substantial amount about the syntax of C,
.\"O but it also attempts to cope with incomplete and misformed syntax.
\fBindent\fR はたくさんある C 言語の文法を理解するが、
文法が不完全な部分や誤っている部分もできるだけ処理しようとする。

.\"O In version 1.2 and more recent versions, the GNU style of indenting is
.\"O the default.
バージョン 1.2 以降では、GNU スタイルのインデントがデフォルトである。
.\"O .SH "OPTIONS"
.SH オプション

.TP 4
.B -bad\fR, \fB--blank-lines-after-declarations\fR
.\"O Force blank lines after the declarations.
宣言の後に必ず空行を置く。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -bap\fR, \fB--blank-lines-after-procedures\fR
.\"O Force blank lines after procedure bodies.
手続き本体の後に必ず空行を置く。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -bbb\fR, \fB--blank-lines-before-block-comments\fR
.\"O Force blank lines before block comments.
ブロックコメントの前に必ず空行を置く。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -bbo\fR, \fB--break-before-boolean-operator\fR
.\"O Prefer to break long lines before boolean operators.
長い行をブーリアン演算子の前で折り返す。
.br
.\"O See \fB\ BREAKING\ LONG\ LINES\fR.
「\fB長い行の折り返し\fR」セクションを参照すること。
.TP
.B -bc\fR, \fB--blank-lines-after-commas\fR
.\"O Force newline after comma in declaration.
宣言中のコンマの後に必ず改行を置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -bl\fR, \fB--braces-after-if-line\fR
.\"O Put braces on line after \fBif\fR, etc.
ブレースは \fBif\fR 等の次の行に置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -bli\fIn\fB\fR, \fB--brace-indent\fIn\fB\fR
.\"O Indent braces \fIn\fR spaces.
ブレースを \fIn\fR 個のスペースでインデント付けする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -bls\fR, \fB--braces-after-struct-decl-line\fR
.\"O Put braces on the line after \fBstruct\fR declaration lines.
ブレースは \fBstruct\fR 宣言行の次の行に置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -br\fR, \fB--braces-on-if-line\fR
.\"O Put braces on line with \fBif\fR, etc.
ブレースは \fBif\fR 等がある行に置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -brs\fR, \fB--braces-on-struct-decl-line\fR
.\"O Put braces on \fBstruct\fR declaration line.
ブレースは \fBstruct\fR 宣言行がある行に置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -bs\fR, \fB--Bill-Shannon\fR, \fB--blank-before-sizeof\fR
.\"O Put a space between \fBsizeof\fR and its argument.
\fBsizeof\fR とその引き数の間に空白を置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -c\fIn\fB\fR, \fB--comment-indentation\fIn\fB\fR
.\"O Put comments to the right of code in column \fIn\fR.
コメントをコードの右のカラム \fIn\fR に置く。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -cbi\fIn\fB\fR, \fB--case-brace-indentation\fIn\fB\fR
.\"O Indent braces after a case label N spaces.
case ラベルの後に、ブレースを \fIn\fR 個の空白でインデント付けする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -cd\fIn\fB\fR, \fB--declaration-comment-column\fIn\fB\fR
.\"O Put comments to the right of the declarations in column \fIn\fR.
コメントを宣言の右のカラム \fIn\fR に置く。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -cdb\fR, \fB--comment-delimiters-on-blank-lines\fR
.\"O Put comment delimiters on blank lines.
空行にコメント区切り文字を置く。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -cdw\fR, \fB--cuddle-do-while\fR
.\"O Cuddle while of \fBdo {} while;\fR and preceeding \`}\'.
\fBdo {} while;\fR の while とその前の \`}\' を並べる。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -ce\fR, \fB--cuddle-else\fR
.\"O Cuddle else and preceeding \`}\'.
else とその前の \`}\' を並べる。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -ci\fIn\fB\fR, \fB--continuation-indentation\fIn\fB\fR
.\"O Continuation indent of \fIn\fR spaces.
前の行から継続している場合には、\fIn\fR 個の空白でインデントする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -cli\fIn\fB\fR, \fB--case-indentation\fIn\fB\fR
.\"O Case label indent of \fIn\fR spaces.
case ラベルを N 個の空白でインデントする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -cp\fIn\fB\fR, \fB--else-endif-column\fIn\fB\fR
.\"O Put comments to the right of \fB#else\fR.\"O  and \fB
.\"O #endif\fR statements in column \fIn\fR.
\fB#else\fR 文と \fB#endif\fR 文の右のカラム \fIn\fR にコメントを置く。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -cs\fR, \fB--space-after-cast\fR
.\"O Put a space after a cast operator.
キャスト演算子の後に空白を置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -d\fIn\fB\fR, \fB--line-comments-indentation\fIn\fB\fR
.\"O Set indentation of comments not to the right 
.\"O of code to \fIn\fR spaces.
コードの右でないコメントは空白 \fIn\fR 個でインデントするように設定する。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -bfda\fR, \fB--break-function-decl-args\fR
.\"O Break the line before all arguments in a declaration.
(関数) 宣言の全ての引き数の後で折り返す。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -bfde\fR, \fB--break-function-decl-args\fR
.\"O Break the line after the last argument in a declaration.
(関数) 宣言の全ての引き数の前で折り返す。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -di\fIn\fB\fR, \fB--declaration-indentation\fIn\fB\fR
.\"O Put variables in column \fIn\fR.
変数をカラム \fIn\fR に置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -fc1\fR, \fB--format-first-column-comments\fR
.\"O Format comments in the first column.
最初のカラムから始まるコメントを整形する。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -fca\fR, \fB--format-all-comments\fR
.\"O Do not disable all formatting of comments.
コメントの整形を全てを無効にしない。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -gnu\fR, \fB--gnu-style\fR
.\"O Use GNU coding style.  This is the default.
GNU コーディングスタイルを使用する。これはデフォルトの動作である。
.br
.\"O See \fB\ COMMON\ STYLES\fR.
「\fB一般的なスタイル\fR」セクションを参照すること。
.TP
.B -hnl\fR, \fB--honour-newlines\fR
.\"O Prefer to break long lines at the position of newlines in the input.
入力ファイルで改行が入っている位置で
長い行を折り返すようにする。
.br
.\"O See \fB\ BREAKING\ LONG\ LINES\fR.
「\fB長い行の折り返し\fR」セクションを参照すること。
.TP
.B -i\fIn\fB\fR, \fB--indent-level\fIn\fB\fR
.\"O Set indentation level to \fIn\fR spaces.
インデントのレベルを空白 \fIn\fR 個に設定する。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -ip\fIn\fB\fR, \fB--parameter-indentation\fIn\fB\fR
.\"O Indent parameter types in old-style function 
.\"O definitions by \fIn\fR spaces.
古い形式の関数定義のパラメータ型を空白 \fIn\fR 個でインデントする。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -kr\fR, \fB--k-and-r-style\fR
.\"O Use Kernighan & Ritchie coding style.
Kernighan & Ritchie コーディングスタイルを使用する。
.br
.\"O See \fB\ COMMON\ STYLES\fR.
「\fB一般的なスタイル\fR」セクションを参照すること。
.TP
.B -l\fIn\fB\fR, \fB--line-length\fIn\fB\fR
.\"O Set maximum line length for non-comment lines to \fIn\fR.
コメントでない行の最大の長さを \fIn\fR に設定する。
.br
.\"O See \fB\ BREAKING\ LONG\ LINES\fR.
「\fB長い行の折り返し\fR」セクションを参照すること。
.TP
.B -lc\fIn\fB\fR, \fB--comment-line-length\fIn\fB\fR
.\"O Set maximum line length for comment formatting to \fIn\fR.
コメントを整形する最大の長さを \fIn\fR に設定する。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -lp\fR, \fB--continue-at-parentheses\fR
.\"O Line up continued lines at parentheses.
前の行に続く行を括弧の位置に揃える。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -lps\fR, \fB--leave-preprocessor-space\fR
.\"O Leave space between \`#\' and preprocessor directive.
\`#\' とプリプロセッサディレクティブの間の空白を残す。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -nbad\fR, \fB--no-blank-lines-after-declarations\fR
.\"O Do not force blank lines after declarations.
宣言の後に空行を置かない。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -nbap\fR, \fB--no-blank-lines-after-procedures\fR
.\"O Do not force blank lines after procedure bodies.
手続き本体の後に空行を置かない。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -nbbo\fR, \fB--break-after-boolean-operator\fR
.\"O Do not prefer to break long lines before boolean operators.
ブーリアン演算子の前で長い行を折り返さない。
.br
.\"O See \fB\ BREAKING\ LONG\ LINES\fR.
「\fB長い行の折り返し\fR」セクションを参照すること。
.TP
.B -nbc\fR, \fB--no-blank-lines-after-commas\fR
.\"O Do not force newlines after commas in declarations.
宣言中のコンマの後に改行を置かない。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -nbfda\fR, \fB--dont-break-function-decl-args\fR
.\"O Don\'t put each argument in a function declaration on a seperate line.
関数宣言の各引き数を別々の行に置かない。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -ncdb\fR, \fB--no-comment-delimiters-on-blank-lines\fR
.\"O Do not put comment delimiters on blank lines.
空行にコメント区切り文字を置かない。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -ncdw\fR, \fB--dont-cuddle-do-while\fR
.\"O Do not cuddle \fB}\fR and the \fBwhile\fR of a \fBdo {} while;\fR.
\fBdo {} while;\fR の \fB}\fR と \fBwhile\fR を同じ行に並べない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nce\fR, \fB--dont-cuddle-else\fR
.\"O Do not cuddle \fB}\fR and \fBelse\fR.
\fB}\fR と \fBelse\fR を同じ行に並べない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -ncs\fR, \fB--no-space-after-casts\fR
.\"O Do not put a space after cast operators.
キャスト演算子の後に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nfc1\fR, \fB--dont-format-first-column-comments\fR
.\"O Do not format comments in the first column as normal.
最初のカラムから始まるコメントを通常のように整形しない。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -nfca\fR, \fB--dont-format-comments\fR
.\"O Do not format any comments.
どのようなコメントも整形しない。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -nhnl\fR, \fB--ignore-newlines\fR
.\"O Do not prefer to break long lines at the position of newlines in the input.
入力ファイルで改行が入っている位置で
長い行を折り返さないようにする。
.br
.\"O See \fB\ BREAKING\ LONG\ LINES\fR.
「\fB長い行の折り返し\fR」セクションを参照すること。
.TP
.B -nip\fR, \fB--no-parameter-indentation\fR
.\"O Zero width indentation for parameters.
パラメータのインデント幅を 0 にする。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -nlp\fR, \fB--dont-line-up-parentheses\fR
.\"O Do not line up parentheses.
括弧の位置を揃えない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -npcs\fR, \fB--no-space-after-function-call-names\fR
.\"O Do not put space after the function in function calls.
関数呼び出し内部の関数の後に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nprs\fR, \fB--no-space-after-parentheses\fR
.\"O Do not put a space after every \'(\' and before every \')\'.
\'(\' の後と \')\' の前に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -npsl\fR, \fB--dont-break-procedure-type\fR
.\"O Put the type of a procedure on the same line as its name.
手続きの型を名前と同じ行に置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -nsaf\fR, \fB--no-space-after-for\fR
.\"O Do not put a space after every \fBfor\fR.
\fBfor\fR の後に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nsai\fR, \fB--no-space-after-if\fR
.\"O Do not put a space after every \fBif\fR.
\fBif\fR の後に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nsaw\fR, \fB--no-space-after-while\fR
.\"O Do not put a space after every \fBwhile\fR.
\fBwhile\fR の後に空白を置かない。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nsc\fR, \fB--dont-star-comments\fR
.\"O Do not put the \`*\' character at the left of comments.
\`*\' 文字をコメントの左に置かない。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -nsob\fR, \fB--leave-optional-blank-lines\fR
.\"O Do not swallow optional blank lines.
余計な空行を削除しない。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -nss\fR, \fB--dont-space-special-semicolon\fR
.\"O Do not force a space before the semicolon after certain statements.
.\"O Disables \`-ss\'.
特定の文の後のセミコロンの前に空白を置かない。
\`-ss\' を無効にする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -nut\fR, \fB--no-tabs\fR
.\"O Use spaces instead of tabs.
タブではなく空白を使う。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -nv\fR, \fB--no-verbosity\fR
.\"O Disable verbose mode.
詳細表示モードを無効にする。
.br
.\"O See \fB\ MISCELLANEOUS\ OPTIONS\fR.
「\fBその他のオプション\fR」セクションを参照すること。
.TP
.B -orig\fR, \fB--original\fR
.\"O Use the original Berkeley coding style.
オリジナルの Berkeley コーディングスタイルを使用する。
.br
.\"O See \fB\ COMMON\ STYLES\fR.
「\fB一般的なスタイル\fR」セクションを参照すること。
.TP
.B -npro\fR, \fB--ignore-profile\fR
.\"O Do not read \`.indent.pro\' files.
\`.indent.pro\' ファイルを読み込まない。
.br
.\"O See \fB\ INVOKING\ INDENT\fR.
「\fBindent\ の起動\fR」セクションを参照すること。
.TP
.B -pcs\fR, \fB--space-after-procedure-calls\fR
.\"O Insert a space between the name of the 
.\"O procedure being called and the \`(\'.
呼び出される手続きの名前と `(' の間に空白を挿入する。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -pi\fIn\fB\fR, \fB--paren-indentation\fIn\fB\fR
.\"O Specify the extra indentation per open parentheses \'(\' when a
.\"O statement is broken.See \fB\ STATEMENTS\fR.
文が不完全な場合に使われる
開括弧 \'(\' ごとの追加のインデントを指定する。
.br
「\fB文\fR」セクションを参照すること。
.TP
.B -pmt\fR, \fB--preserve-mtime\fR
.\"O Preserve access and modification times on output files.See \fB\ MISCELLANEOUS\ OPTIONS\fR.
出力ファイルのアクセス時刻と修正時刻を保存する。
.br
「\fBその他のオプション\fR」セクションを参照すること。
.TP
.B -prs\fR, \fB--space-after-parentheses\fR
.\"O Put a space after every \'(\' and before every \')\'.
\'(\' の後と \')\' の前に空白を置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -psl\fR, \fB--procnames-start-lines\fR
.\"O Put the type of a procedure on the line before its name.
手続きの型を名前と同じ行に置く。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -saf\fR, \fB--space-after-for\fR
.\"O Put a space after each \fBfor\fR.
\fBfor\fR の後にスペースを置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -sai\fR, \fB--space-after-if\fR
.\"O Put a space after each \fBif\fR.
\fBif\fR の後にスペースを置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -saw\fR, \fB--space-after-while\fR
.\"O Put a space after each \fBwhile\fR.
\fBwhile\fR の後にスペースを置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -sbi\fIn\fB\fR, \fB--struct-brace-indentation\fIn\fB\fR
.\"O Indent braces of a struct, union or enum N spaces.
stract, union, enum のブレースを \fIn\fB 個の空白でインデントする。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -sc\fR, \fB--start-left-side-of-comments\fR
.\"O Put the \`*\' character at the left of comments.
\`*\' 文字をコメントの左に置く。
.br
.\"O See \fB\ COMMENTS\fR.
「\fBコメント\fR」セクションを参照すること。
.TP
.B -sob\fR, \fB--swallow-optional-blank-lines\fR
.\"O Swallow optional blank lines.
余計な空行を取り除く。
.br
.\"O See \fB\ BLANK\ LINES\fR.
「\fB空行\fR」セクションを参照すること。
.TP
.B -ss\fR, \fB--space-special-semicolon\fR
.\"O On one-line \fBfor\fR and \fBwhile\fR statments, 
.\"O force a blank before the semicolon.
1 行で記述した \fBfor\fR 文と \fBwhile\fR 文において、
セミコロンの前に空白を置く。
.br
.\"O See \fB\ STATEMENTS\fR.
「\fB文\fR」セクションを参照すること。
.TP
.B -st\fR, \fB--standard-output\fR
.\"O Write to standard output.
標準出力に書き出す。
.br
.\"O See \fB\ INVOKING\ INDENT\fR.
「\fBindent\ の起動\fR」セクションを参照すること。
.TP
.B -T\fR
.\"O Tell \fBindent\fR the name of typenames.
型名の名前を \fBindent\fR に指定する。
.br
.\"O See \fB\ DECLARATIONS\fR.
「\fB宣言\fR」セクションを参照すること。
.TP
.B -ts\fIn\fB\fR, \fB--tab-size\fIn\fB\fR
.\"O Set tab size to \fIn\fR spaces.
タブの幅を空白 \fIn\fR 個に設定する。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -ut\fR, \fB--use-tabs\fR
.\"O Use tabs. This is the default.
タブを使う。これがデフォルトである。
.br
.\"O See \fB\ INDENTATION\fR.
「\fBインデント付け\fR」セクションを参照すること。
.TP
.B -v\fR, \fB--verbose\fR
.\"O Enable verbose mode.
詳細表示モードを有効にする。
.br
.\"O See \fB\ MISCELLANEOUS\ OPTIONS\fR.
「\fBその他のオプション\fR」セクションを参照すること。
.TP
.B -version\fR
.\"O Output the version number of \fBindent\fR.
\fBindent\fR のバージョン番号を表示する。
.br
.\"O See \fB\ MISCELLANEOUS\ OPTIONS\fR.
「\fBその他のオプション\fR」セクションを参照すること。

.\"O .SH "INVOKING INDENT"
.SH "indent の起動"

.\"O As of version 1.3, the format of the \fBindent\fR command is:
バージョン 1.3 からは、\fBindent\fR コマンドの書式は
以下のようになっている:

.in +5
.nf
.na

indent [\fIoptions\fR] [\fIinput-files\fR]

indent [\fIoptions\fR] [\fIsingle-input-file\fR] [-o \fIoutput-file\fR]

.in -5
.ad
.fi

.\"O This format is different from earlier versions and other versions of
.\"O .B indent\fR.
この書式は古いバージョンや他バージョンの \fBindent\fR と異なる。

.\"O In the first form, one or more input files are specified.  \fBindent\fR
.\"O makes a backup copy of each file, and the original file is replaced with
.\"O its indented version.  See \fBBACKUP\ FILES\fR, for an explanation of how
.\"O backups are made.
最初の書式では 1 つ以上の入力ファイルを指定する。
\fBindent\fR は、各ファイルのバックアップコピーを作成してから、
オリジナルのファイルをインデント付けしたものに置き換える。
バックアップの作り方については、
「\fBバックアップファイル\fR」セクションを参照すること。

.\"O In the second form, only one input file is specified.  In this case, or
.\"O when the standard input is used, you may specify an output file after
.\"O the \`-o\' option.
2 番目の書式では入力ファイルを 1 つだけ指定する。
この場合、または標準入力を使う場合には、
\`-o\' オプションの後に出力ファイルを指定することができる。

.\"O To cause \fBindent\fR to write to standard output, use the \`-st\'
.\"O option.  This is only allowed when there is only one input file, or when
.\"O the standard input is used.
\fBindent\fR に標準出力へ出力させるには \`-st\' オプションを使う。
これが許されるのは、入力ファイルが 1 つだけの場合か、
標準入力を使う場合だけである。

.\"O If no input files are named, the standard input is read for input.
.\"O Also, if a filename named \`-\' is specified, then the standard input
.\"O is read.
入力ファイルを指定しなければ入力は標準入力から読み込まれる。
また、\`-\' というファイル名が指定された場合にも標準入力が読み込まれる。

.\"O As an example, each of the following commands will input the program
.\"O \`slithy_toves.c\' and write its indented text to
.\"O \`slithy_toves.out\':
使用例としては、以下のコマンドは
いずれもプログラム \`slithy_toves.c\' を読み込み、
インデント付けしたテキストを \`slithy_toves.out\' に書き込む:

.in +5
.nf
.na

indent slithy_toves.c -o slithy_toves.out

indent -st slithy_toves.c > slithy_toves.out

cat slithy_toves.c | indent -o slithy_toves.out

.in -5
.ad
.fi

.\"O Most other options to \fBindent\fR control how programs are formatted.
.\"O As of version 1.2, \fBindent\fR also recognizes a long name for each
.\"O option name.  Long options are prefixed by either \`--\' or
.\"O \`+\'.
.\"O [ \`+\' is being superseded by \`--\' to
.\"O maintain consistency with the POSIX standard.]
\fBindent\fR の他のオプションのほとんどは、
プログラムをどのように整形するかを制御するためのものである。
バージョン 1.2 からは、\fBindent\fR は
各オプション名として長い名前も認識する。
長いオプションの前には \`--\' か \`+\' が置かれる。
[POSIX 標準と一貫性を持たせるため、
現在は \`+\' を \`--\' に置き換えようとしているところである。]
.br
.\"O  In most of this document,
.\"O the traditional, short names are used for the sake of brevity.
本ドキュメントの大部分では、
簡潔に表現するために伝統的な短い名前を使っている。
.\"O See \fBOPTION\ SUMMARY\fR, for a list of options, including both long and
.\"O short names.
長いオプション名と短いオプション名のリストは、
「\fBオプションの概要\fR」を参照すること。

.\"O Here is another example:
別の使用例を挙げる:

.in +5
.nf
.na
indent -br test/metabolism.c -l85
.in -5
.ad
.fi

.\"O This will indent the program \`test/metabolism.c\' using the
.\"O \`-br\' and \`-l85\' options, write the output back to
.\"O \`test/metabolism.c\', and write the original contents of
.\"O \`test/metabolism.c\' to a backup file in the directory \`test\'.
これにより、プログラム \`test/metabolism.c\' が
\`-br\' オプションと \`-l85\' オプションを用いてインデント付けされ、
その出力が \`test/metabolism.c\' に重ね書きされ、
元の \`test/metabolism.c\' の内容は
\`test\' ディレクトリにバックアップファイルとして書き込まれる。

.\"O Equivalent invocations using long option names for this example would
.\"O be:
この例と同じ指定を長いオプション名を用いて行うと以下のようになる:

.in +5
.nf
.na

indent --braces-on-if-line --line-length185 test/metabolism.c

indent +braces-on-if-line +line-length185 test/metabolism.c

.in -5
.ad
.fi

.\"O If you find that you often use \fBindent\fR with the same options, you
.\"O may put those options into a file named \`.indent.pro\'.
\fBindent\fR を頻繁に同じオプションで使うならば、
これらを \`.indent.pro\' というファイルに書いておくとよい。
.\"O .B indent\fR will look for a profile file in three places. First it will check
.\"O the environment variable \fBINDENT_PROFILE\fR. If that exists its value 
.\"O is expected to name the file that is to be used. If the environment variable does 
.\"O not exist, indent looks for \`.indent.pro\' in the current directory
.\"O  and use that if found.  Finally \fBindent\fR will search
.\"O your home directory for \`.indent.pro\' and use that file if it is
.\"O found.  This behaviour is different from that of other versions of
.\"O .B indent\fR, which load both files if they both exist.
\fBindent\fR は 3 つの場所でプロファイルファイルを探す。
最初に環境変数 \fBINDENT_PROFILE\fR があるかをチェックする。
この環境変数がある場合、その値を使用するファイルの名前として解釈する。
この環境変数がない場合、\fBindent\fR はカレントディレクトリの
\`.indent.pro\' を探し、もし存在すればこれを使う。
\fBindent\fR は最後にホームディレクトリの \`.indent.pro\' を探し、
もし存在すればこれを使う。
この動作は従来のバージョンや別バージョンの \fBindent\fR と異なる。
これらは、両方のディレクトリに \`.indent.pro\' ファイルがあれば、
両方とも使用する。

.\"O The format of \`.indent.pro\' is simply a list of options, just as
.\"O they would appear on the command line, separated by white space (tabs,
.\"O spaces, and newlines).  Options in \`.indent.pro\' may be surrounded by C
.\"O or C++ comments, in which case they are ignored.
\`.indent.pro\' の書式は、コマンドラインに指定するのと同じく、
空白 (タブ、スペース、改行) で区切られた単なるオプションのリストである。
\`.indent.pro\' のオプションは、
C または C++ のコメントで囲むことができる。
コメントで囲んだオプションは無視される。

.\"O Command line switches are handled \fIafter\fR processing
.\"O \`.indent.pro\'.  Options specified later override arguments
.\"O specified earlier, with one exception: Explicitly specified options
.\"O always override background options (See \fBCOMMON\ STYLES\fR).  You can
.\"O prevent \fBindent\fR from reading an \`.indent.pro\' file by
.\"O specifying the \`-npro\' option.
コマンドラインオプションが処理されるのは、
\`.indent.pro\' を処理した\fI後\fRである。
後から指定したオプションは、前に指定した引き数を上書きする。
これには例外が 1 つある: 明示的に指定したオプションは
暗黙のオプションを必ず上書きする(「\fB一般的なスタイル\fR」を参照)。
\`-npro\' オプションを指定することにより、
\fBindent\fR が \`.indent.pro\' ファイルを読み込まないようにすることができる。

.\"O .SH "BACKUP FILES"
.SH バックアップファイル

.\"O As of version 1.3, GNU \fBindent\fR makes GNU-style backup files, the
.\"O same way GNU Emacs does.  This means that either \fIsimple\fR or
.\"O .I numbered\fR backup filenames may be made.
バージョン 1.3 からは、GNU \fBindent\fR は GNU 形式、
すなわち GNU Emacs と同様の方法でバックアップファイルを作成する。
つまり、\fI単純な\fRバックアップファイルと
\fI番号付きの\fRバックアップファイルをどちらも作成できる。

.\"O Simple backup file names are generated by appending a suffix to the
.\"O original file name.  The default for this suffix is the
.\"O one-character string \`~\' (tilde).  Thus, the backup file for
.\"O \`python.c\' would be \`python.c~\'.
単純なバックアップファイルの名前は、
元のファイル名にサフィックスを追加して生成される。
このサフィックスのデフォルト値は、
1 文字からなる文字列 \`~\' (チルダ)である。
したがって、\`python.c\' のバックアップファイルは \`python.c~\' となる。

.\"O Instead of the default, you may specify any string as a suffix by
.\"O setting the environment variable \fBSIMPLE_BACKUP_SUFFIX\fR to
.\"O your preferred suffix.
環境変数 \fBSIMPLE_BACKUP_SUFFIX\fR に好きな文字列を設定することにより、
デフォルト値以外の任意の文字列をサフィックスとして使用できる。

.\"O Numbered backup versions of a file \`momeraths.c\' look like
.\"O \`momeraths.c.~23~\', where 23 is the version of this particular
.\"O backup.  When making a numbered backup of the file \`src/momeraths.c\',
.\"O the backup file will be named \`src/momeraths.c.~\fIV\fR~\', where
.\"O .I V\fR is one greater than the highest version currently existing in
.\"O the directory \`src\'.  The environment variable \fBVERSION_WIDTH\fR
.\"O controls the number of digits, using left zero padding when necessary.
ファイル \`momeraths.c\' の番号付きバックアップは、
\`momeraths.c.~23~\' のようになる。
ここで、23 はこのファイルのバックアップのバージョンである。
ファイル \`src/momeraths.c\' のバックアップを作成するとき、
バックアップファイルの名前は \`src/momeraths.c.~\fIV\fR~\' のようになる。
ここで、\fIV\fR はディレクトリ \`src\' に現在ある
最も大きいバージョンより 1 大きい数字である。
環境変数 \fBVERSION_WIDTH\fR は、
必要に応じて左側に 0 を追加することにより、数字の桁数を制御する。
.\"O For instance, setting this variable to "2" will lead to the backup
.\"O file being named \`momeraths.c.~04~\'.
例えばこの変数を "2" に設定すると、
バックアップファイルの名前は \`momeraths.c.~04~\' のようになる。

.\"O The type of backup file made is controlled by the value of the
.\"O environment variable \fBVERSION_CONTROL\fR.  If it is the string
.\"O \`simple\', then only simple backups will be made.  If its value is
.\"O the string \`numbered\', then numbered backups will be made.  If its
.\"O value is \`numbered-existing\', then numbered backups will be made if
.\"O there \fIalready exist\fR numbered backups for the file being indented;
.\"O otherwise, a simple backup is made.  If \fBVERSION_CONTROL\fR is not
.\"O set, then \fBindent\fR assumes the behaviour of
.\"O \`numbered-existing\'.
どちらの方法でバックアップファイルを作るかは、
環境変数 \fBVERSION_CONTROL\fR で制御する。
この文字列が \`simple\' ならば、単純なバックアップだけが作成される。
この値が \`numbered\' ならば、番号付きバックアップが作成される。
この値が \`numbered-existing\' ならば、
インデント付けするファイルの番号付きのバックアップが\fI既にある\fR場合に、
番号付きバックアップが作成される。
それ以外の場合には、単純なバックアップが作成される。
\fBVERSION_CONTROL\fR が設定されていなければ、
\fBindent\fR は \`numbered-existing\' が指定されているものとして動作する。

.\"O Other versions of \fBindent\fR use the suffix \`.BAK\' in naming
.\"O backup files.  This behaviour can be emulated by setting
.\"O .B SIMPLE_BACKUP_SUFFIX\fR to \`.BAK\'.
別バージョンの \fBindent\fR は、
サフィックス \`.BAK\' を使ってバックアップファイルの名前を生成する。
この動作は、\fBSIMPLE_BACKUP_SUFFIX\fR に \`.BAK\' を
設定することによりエミュレートすることができる。

.\"O Note also that other versions of \fBindent\fR make backups in the
.\"O current directory, rather than in the directory of the source file as
.\"O GNU \fBindent\fR now does.
別バージョンの \fBindent\fR は、現在の GNU \fBindent\fR が行うように
ソースファイルがあるディレクトリにバックアップを作成するのではなく、
カレントディレクトリにバックアップを作成する点にも注意すること。

.\"O .SH "COMMON STYLES"
.SH 一般的なスタイル

.\"O There are several common styles of C code, including the GNU style, the
.\"O Kernighan & Ritchie style, and the original Berkeley style.  A style may
.\"O be selected with a single \fIbackground\fR option, which specifies a set
.\"O of values for all other options.  However, explicitly specified options
.\"O always override options implied by a background option.
C 言語には一般的なスタイルがいくつかある。
例えば、GNU スタイル、Kernighan & Ritchie スタイル、
オリジナルの Berkeley スタイル等である。
スタイルは\fIバックグラウンド\fRオプション 1 つを使って選択することができる。
このオプションは、他のオプション全ての値を指定する。
ただし、明示的に指定したオプションは、
暗黙的に指定されたオプションよりも必ず優先される。

.\"O As of version 1.2, the default style of GNU \fBindent\fR is the GNU
.\"O style.  Thus, it is no longer necessary to specify the option
.\"O \`-gnu\' to obtain this format, although doing so will not cause an
.\"O error.  Option settings which correspond to the GNU style are:
バージョン 1.2 からは、GNU \fBindent\fR のデフォルトのスタイルは
GNU スタイルである。
したがって、このフォーマットで出力するために
\`-gnu\' オプションを指定する必要はなくなった。
ただし、このオプションを指定してもエラーにはならない。
GNU スタイルに対応するオプション設定は以下である:

.in +5
.nf
.na
-nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
-ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -nprs -psl -saf -sai
-saw -nsc -nsob
.in -5
.ad
.fi

.\"O The GNU coding style is that preferred by the GNU project.  It is the
.\"O style that the GNU Emacs C mode encourages and which is used in the C
.\"O portions of GNU Emacs.  (People interested in writing programs for
.\"O Project GNU should get a copy of "The GNU Coding Standards", which
.\"O also covers semantic and portability issues such as memory usage, the
.\"O size of integers, etc.)
GNU コーディングスタイルは GNU プロジェクトで推奨されている。
これは GNU Emacs の C モードが適用しようとするスタイルであり、
GNU Emacs の C で記述された部分で使われているスタイルである。
(GNU プロジェクトのためにプログラムを書くことに興味がある方は、
「GNU コーディング規約 (The GNU Coding Standards)」を入手されたい。
この文書では、メモリの使い方や整数のサイズ等、
セマンティックや移植性についても説明されている。)

.\"O The Kernighan & Ritchie style is used throughout their well-known book
.\"O "The C Programming Language".  It is enabled with the \`-kr\'
.\"O option.  The Kernighan & Ritchie style corresponds to the following set
.\"O of options:
Kernighan & Ritchie スタイルは有名な書籍
「プログラミング言語 C (The C Programming Language)」で使われている。
これは \`-kr\' オプションで有効となる。
Kernighan & Ritchie スタイルは、以下のオプションの組合せと同等である:

.in +5
.nf
.na
-nbad -bap -bbo -nbc -br -brs -c33 -cd33 -ncdb -ce -ci4 -cli0
-cp33 -cs -d0 -di1 -nfc1 -nfca -hnl -i4 -ip0 -l75 -lp -npcs
-nprs -npsl -saf -sai -saw -nsc -nsob -nss
.in -5
.ad
.fi

.\"O Kernighan & Ritchie style does not put comments to the right of code in
.\"O the same column at all times (nor does it use only one space to the
.\"O right of the code), so for this style \fBindent\fR has arbitrarily
.\"O chosen column 33.
Kernighan & Ritchie スタイルでは、コードがある行の右の部分にコメントが
入れられることはない (コードの右に空白を 1 つだけ入れることもない)。
したがって、このスタイルのカラム数 33 というのは
\fBindent\fR が勝手に決めたものである:

.\"O The style of the original Berkeley \fBindent\fR may be obtained by
.\"O specifying \`-orig\' (or by specifying \`--original\', using the
.\"O long option name).  This style is equivalent to the following settings:
オリジナルの Berkeley 版 \fBindent\fR のスタイルは、
\`-orig\' (または長いオプション名 \`--original\')を指定すれば得られる。
このスタイルは、以下の設定と同じ意味である:

.in +5
.nf
.na
-nbad -nbap -bbo -bc -br -brs -c33 -cd33 -cdb -ce -ci4 -cli0
-cp33 -di16 -fc1 -fca -hnl -i4 -ip4 -l75 -lp -npcs -nprs -psl
-saf -sai -saw -sc -nsob -nss -ts8
.in -5
.ad
.fi

.\"O .SH "BLANK LINES"
.SH 空行

.\"O Various programming styles use blank lines in different places.
.\"O .B indent\fR has a number of options to insert or delete blank lines in
.\"O specific places.
各種プログラミングスタイルごとに、空白は異なる場所に置かれる。
\fBindent\fRには、特定の場所に空白行を挿入・削除するための
オプションがたくさんある。

.\"O The \`-bad\' option causes \fBindent\fR to force a blank line after
.\"O every block of declarations.  The \`-nbad\' option causes
.\"O .B indent\fR not to force such blank lines.
\`-bad\' オプションを指定すると、
\fBindent\fR は宣言ブロック全ての後に必ず空行を置く。
\`-nbad\' オプションを指定すると、このような空白行は置かれない。

.\"O The \`-bap\' option forces a blank line after every procedure body.
.\"O The \`-nbap\' option forces no such blank line.
\`-bap\' オプションを指定すると、手続き本体全ての後に必ず空行が置かれる。
\`-nbap\' オプションを指定すると、このような空行は置かれない。

.\"O The \`-bbb\' option forces a blank line before every boxed comment
.\"O (See \fBCOMMENTS\fR.)
.\"O The \`-nbbb\' option does not force such blank lines.
\`-bbb\' オプションを指定すると、
箱形コメント全ての前に必ず空行が置かれる
(箱形コメントについては「\fBコメント\fR」セクションを参照すること)。
\`-nbbb\' オプションを指定すると、このような空行は置かれない。

.\"O The \`-sob\' option causes \fBindent\fR to swallow optional blank
.\"O lines (that is, any optional blank lines present in the input will be
.\"O removed from the output).  If the \`-nsob\' is specified, any blank
.\"O lines present in the input file will be copied to the output file.
\`-sob\' を指定すると、\fBindent\fR は省略できる空行を飲み込んでしまう
(つまり、入力行に含まれる省略できる空行が出力から全て削除される)。
\`-nsob\' を指定すると、
入力行に含まれる空行は出力ファイルにも全てコピーされる。


.SH "--blank-lines-after-declarations"

.\"O The \`-bad\' option forces a blank line after every block of
.\"O declarations.  The \`-nbad\' option does not add any such blank
.\"O lines.
\`-bad\' オプションを指定すると、宣言ブロックの後に必ず空行が置かれる。
\`-nbad\' オプションを指定すると、このような空行は追加されない。

.\"O For example, given the input
例えば、以下の入力を与えると
.in +5
.nf
.na
char *foo;
char *bar;
.\"O /* This separates blocks of declarations.  */
/* このコメントは宣言のブロックを分けている */
int baz;
.in -5
.ad
.fi

.\"O .B indent -bad\fR produces
\fBindent -bad\fR の出力は以下のようになる。

.in +5
.nf
.na
char *foo;
char *bar;

.\"O /* This separates blocks of declarations.  */
/* このコメントは宣言のブロックを分けている */
int baz;
.in -5
.ad
.fi

.\"O and \fBindent -nbad\fR produces
また、\fBindent -nbad\fR の出力は以下のようになる。

.in +5
.nf
.na
char *foo;
char *bar;
.\"O /* This separates blocks of declarations.  */
/* このコメントは宣言のブロックを分けている */
int baz;
.in -5
.ad
.fi

.SH "--blank-lines-after-procedures"

.\"O The \`-bap\' option forces a blank line after every procedure body.
\`-bap\' オプションを指定すると、それぞれの宣言本体の後に必ず空行が置かれる。

.\"O For example, given the input
例えば、以下の入力を与えると

.in +5
.nf
.na
int
foo ()
{
  puts("Hi");
}
.\"O /* The procedure bar is even less interesting.  */
/* この手続き bar には意味はない  */
char *
bar ()
{
  puts("Hello");
}
.in -5
.ad
.fi

.\"O .B indent -bap\fR produces
\fBindent -bap\fR の出力は以下となる。

.in +5
.nf
.na
int
foo ()
{
  puts ("Hi");
}

.\"O /* The procedure bar is even less interesting.  */
/* この手続き bar には意味はない  */
char *
bar ()
{
  puts ("Hello");
}
.in -5
.ad
.fi

.\"O and \fBindent -nbap\fR produces
また、\fBindent -nbap\fR の出力は以下となる。

.in +5
.nf
.na
int
foo ()
{
  puts ("Hi");
}
.\"O /* The procedure bar is even less interesting.  */
/* この手続き bar には意味はない  */
char *
bar ()
{
  puts ("Hello");
}
.in -5
.ad
.fi

.\"O No blank line will be added after the procedure \fBfoo\fR.
手続き \fBfoo\fR の後には空行は追加されない。

.\"O .SH "COMMENTS"
.SH コメント

.\"O .B indent\fR formats both C and C++ comments. C comments are begun with
.\"O \`/*\', terminated with \`*/\' and may contain newline characters.
.\"O C++ comments begin with the delimiter \`//\' and end at the newline.
\fBindent\fR は C と C++ のコメントを整形する。
C のコメントは \`/*\' で始まって \`*/\' で終り、
改行文字を含んでもよい。
C++ のコメントは区切り文字 \`//\' で始まり改行で終る。

.\"O .B indent\fR handles comments differently depending upon their context.
.\"O .B indent\fR attempts to distinguish between comments which follow
.\"O statements, comments which follow declarations, comments following
.\"O preprocessor directives, and comments which are not preceded by code of
.\"O any sort, i.e., they begin the text of the line (although not
.\"O neccessarily in column 1).
\fBindent\fR はコメントの文脈によって別々の扱い方をする。
\fBindent\fR は文・宣言・
プリプロセッサディレクティブが後に続くコメントと
どのコードの前にも置かれていないコメントを区別する。
どのコードの前にも置かれていないコメントとは、
行が開始されるコメントのことである
(カラム 1 から始まっている必要はない)。

.\"O .B indent\fR further distinguishes between comments found outside of
.\"O procedures and aggregates, and those found within them.  In particular,
.\"O comments beginning a line found within a procedure will be indented to
.\"O the column at which code is currently indented.  The exception to this a
.\"O comment beginning in the leftmost column;  such a comment is output
.\"O at that column.
さらに \fBindent\fR は手続きや集合体の外側にあるコメントと
内側にあるコメントを区別する。
特に手続きの内側で行の最初にあるコメントは、
コードが現在インデントされているカラムにインデントされる。
最も左側のカラムから始まるコメントは例外であり、
コメントはそのカラムから出力される。

.\"O .B indent\fR attempts to leave \fIboxed comments\fR unmodified.  The
.\"O general idea of such a comment is that it is enclosed in a rectangle or
.\"O \`\`box\'\' of stars or dashes to visually set it apart.  More precisely,
.\"O boxed comments are defined as those in which the initial \`/*\' is
.\"O followed immediately by the character \`*\', \`=\', \`_\', or
.\"O \`-\', or those in which the beginning comment delimiter (\`/*\')
.\"O is on a line by itself, and the following line begins with a \`*\' in
.\"O the same column as the star of the opening delimiter.
\fBindent\fR は\fI箱形\fRコメントを変更しない。
\`*\' や \`-\' で四角形や「箱形」に囲んだコメントは、
他から視覚的に区別したいという一般的な意図があるためである。
もっと正確に言うと、箱形コメントは次のように定義される。
最初の \`/*\' の直後に文字 \`*\', \`=\', \`_\', \`-\' が続いているか、
コメント開始区切り文字 (\`/*\') だけの行があり、
以降の行はコメント開始区切り文字の \`*\' と同じカラムから
\`*\' で行が開始される。

.\"O Examples of boxed comments are:
箱形コメントの例を示す:

.in +5
.nf
.na
.\"O /**********************
.\"O  * Comment in a box!! *
.\"O  **********************/
/**********************
 * 箱の中のコメント!! *
 **********************/

.\"O        /*
.\"O         * A different kind of scent,
.\"O         * for a different kind of comment.
.\"O         */
       /*
        * 別な種類のコメントには、
        * 別な形式を使う。
        */
.in -5
.ad
.fi

.\"O .B indent\fR attempts to leave boxed comments exactly as they are found
.\"O in the source file.  Thus the indentation of the comment is unchanged,
.\"O and its length is not checked in any way.  The only alteration made is
.\"O that an embedded tab character may be converted into the appropriate
.\"O number of spaces.
\fBindent\fR は箱形のコメントを
ソースファイルの中に見つかった場所に残しておく。
よってコメントのインデント付けは変わらず、
その長さもどちらにしても変わらない。
別なモードでは、埋め込まれたタブ文字が適切な数の空白に変換されるだけである。

.\"O If the \`-bbb\' option is specified, all such boxed comments will be
.\"O preceded by a blank line, unless such a comment is preceded by code.
\`-bbb\' オプションが指定された場合、
箱形コメントがコードの前に置かれていないときは、
箱形コメントの後に空行を置く。

.\"O Comments which are not boxed comments may be formatted, which means that
.\"O the line is broken to fit within a right margin and left-filled with
.\"O whitespace.  Single newlines are equivalent to a space, but blank lines
.\"O (two or more newlines in a row) are taken to mean a paragraph break.
箱形でないコメントは整形される。
これは、行が右端に合うように折り返され、
左側は空白で埋められるという意味である。
1 つの改行文字は空白と同じであるが、
(1 行に 2 つ以上の改行文字がある) 空行は
パラグラフの切れ目として解釈される。
.\"O Formatting of comments which begin after the first column is enabled
.\"O with the \`-fca\' option.  To format those beginning in column one,
.\"O specify \`-fc1\'.  Such formatting is disabled by default.
最初のカラムの後から始まるコメントの整形は、
\`-fca\' オプションで有効になる。
カラム 1 から始まるコメントを整形するには、\`-fc1\' を指定する。
このような整形は、デフォルトでは無効にされている。

.\"O The right margin for formatting defaults to 78, but may be changed with
.\"O the \`-lc\' option.  If the margin specified does not allow the
.\"O comment to be printed, the margin will be automatically extended for the
.\"O duration of that comment.  The margin is not respected if the comment is
.\"O not being formatted.
整形する際の右端は、デフォルトでは 78 であるが、
\`-lc\' オプションで変更できる。
指定された右端まででコメントが表示できない場合、
コメントの終りまで右端が自動的に拡張される。
コメントが整形されない場合、右端の位置は守られない。

.\"O If the comment begins a line (i.e., there is no program text to its
.\"O left), it will be indented to the column it was found in unless the
.\"O comment is within a block of code.  
コメントで行が開始される場合
(つまり、コメントの左側にプログラムの文字列がない場合)、
コメントがコードのブロック中になければ、
そのコメントがあったカラムにインデントされる。
.\"O In that case, such a comment will be
.\"O aligned with the indented code of that block (unless the comment began
.\"O in the first column).  
この場合、(最初のカラムからコメントが開始されていなければ)
そのブロックのインデントされたコードにコメントの左端を揃える。
.\"O This alignment may be affected by the \`-d\'
.\"O option, which specifies an amount by which such comments are moved to
.\"O the \fIleft\fR, or unindented.  
揃える位置は \`-d\' オプションで変更可能で、
何カラム\fI左\fRへ移動するかを指定する。
指定されない場合は、インデントされない。
.\"O For example, \`-d2\' places comments
.\"O two spaces to the left of code.  By default, comments are aligned with
.\"O code, unless they begin in the first column, in which case they are left
.\"O there by default --- to get them aligned with the code, specify \`-fc1\'.
例えば、\`-d2\' ではコードから左へ空白 2 個の位置にコメントを置く。
デフォルトではコードにコメントの左端を揃える。
ただし、コメントが最初のカラムから開始されている場合、
デフォルトではインデントされない。
最初のカラムから始まるコメントをコードに左揃えしたい場合は、
\`-fc1\' を指定すること。

.\"O Comments to the right of code will appear by default in column 33.
.\"O This may be changed with one of three options.  \`-c\' will specify
.\"O the column for comments following code, \`-cd\' specifies the
.\"O column for comments following declarations, and \`-cp\' specifies
.\"O the column for comments following preprocessor directives \fB#else\fR
.\"O and \fB#endif\fR.
コードの右側にあるコメントは、デフォルトではカラム 33 にインデントされる。
これは次の 3 つのオプションのいずれかで変更できる。
\`-c\' はコードの後のコメントのカラムを指定する。
\`-cd\' は宣言の後のコメントのカラムを指定する。
\`-cp\' はプリプロセッサディレクティブ
\fB#else\fR と \fB#endif\fR の後のコメントのカラムを指定する。

.\"O If the code to the left of the comment exceeds the beginning column,
.\"O the comment column will be extended to the next tabstop column past
.\"O the end of the code, or in the case of preprocessor directives, to one
.\"O space past the end of the directive.  This extension lasts only for
.\"O the output of that particular comment.
コメントの左側にあるコードが最初のカラムから開始されていない場合、
コードの終りの次のタブストップの位置からコメントカラムが開始される。
プリプロセッサディレクティブが最初のカラムから開始されていない場合、
ディレクティブの終りの 1 カラム後からコメントカラムが開始される。
この拡張はこのような特定のカラムの出力に対してのみ適応される。

.\"O The \`-cdb\' option places the comment delimiters on blank lines.
.\"O Thus, a single line comment like \fB/* Loving hug */\fR can be
.\"O transformed into:
\`-cdb\' オプションを指定すると、コメント区切り文字を空行に置く。
よって \fB/* Loving hug */\fR のような 1 行のコメントは、
以下のように変換される。

.in +5
.nf
.na
/*
   Loving hug
 */
.in -5
.ad
.fi

.\"O Stars can be placed at the beginning of multi-line comments with the
.\"O \`-sc\' option.  Thus, the single-line comment above can be
.\"O transformed (with \`-cdb -sc\') into:
\`-sc\' オプションを指定すると、
複数行コメントの始めに \`*\' を置くことができる。
上記の 1 行のコメントは (\`-cdb -sc\' により) 
以下のように変換される。

.in +5
.nf
.na
/*
 * Loving hug
 */
.in -5
.ad
.fi

.\"O .SH "STATEMENTS"
.SH 文

.\"O The \`-br\' or \`-bl\' option specifies how to format braces.
\`-br\' または \`-bl\' オプションは、ブレースをどのように整形するかを指定する。

.\"O The \`-br\' option formats statement braces like this:
\`-br\' オプションを指定するとブレースは以下のように整形される:

.in +5
.nf
.na
if (x > 0) {
  x--;
}
.in -5
.ad
.fi

.\"O The \`-bl\' option formats them like this:
\`-bl\' オプションを指定するとブレースは以下のように整形される:

.in +5
.nf
.na
if (x > 0)
  {
    x--;
  }
.in -5
.ad
.fi

.\"O If you use the \`-bl\' option, you may also want to specify the
.\"O \`-bli\' option.  This option specifies the number of spaces by
.\"O which braces are indented.  \`-bli2\', the default, gives the
.\"O result shown above.  \`-bli0\' results in the following:
\`-bl\' オプションを使う場合には \`-bli\' オプションも使うとよい。
このオプションはブレースのインデント付けに使う空白の数を指定する。
\`-bli2\' (デフォルト値)を指定すると、先に示した結果となる。
\`-bli0\' を指定した場合の結果は以下である:

.in +5
.nf
.na
if (x > 0)
{
  x--;
}
.in -5
.ad
.fi

.\"O If you are using the \`-br\' option, you probably want to also use
.\"O the \`-ce\' option.  This causes the \fBelse\fR in an if-then-else
.\"O construct to cuddle up to the immediately preceding \`}\'.  For
.\"O example, with \`-br -ce\' you get the following:
\`-br\' オプションを使う場合には、多分 \`-ce\' も使いたくなるだろう。
このオプションは if-then-else 構文の \fBelse\fR を直前の \`}\' に隣に置く。
例えば \`-br -ce\' を指定すると、出力は以下のようになる:

.in +5
.nf
.na
if (x > 0) {
  x--;
} else {
  fprintf (stderr, "...something wrong?\\n");
}
.in -5
.ad
.fi

.\"O With \`-br -nce\' that code would appear as
同じコードで \`-br -nce\' を指定すると以下のようになる:

.in +5
.nf
.na
if (x > 0) {
  x--;
}
else {
  fprintf (stderr, "...something wrong?\\n");
}
.in -5
.ad
.fi

.\"O This causes the \fBwhile\fR in a do-while
.\"O loop to cuddle up to the immediately preceding \`}\'.  For
.\"O example, with \`-cdw\' you get the following:
.\"Osato:
.\"Osato: this がどこを指すかが不明。
.\"Osato:
これにより do-while ループの \fBwhile\fR は直前の \`}\' と同じ行に置かれる。
例えば \`-cdw\' により以下のような出力が得られる。

.in +5
.nf
.na
do {
  x--;
} while (x);
.in -5
.ad
.fi

.\"O With \`-ncdw\' that code would appear as
同じコードで \`-ncdw\' を指定すると以下のようになる:

.in +5
.nf
.na
do {
  x--;
}
while (x);
.in -5
.ad
.fi

.\"O The \`-cli\' option specifies the number of spaces that case labels
.\"O should be indented to the right of the containing \fBswitch\fR
.\"O statement.
\`-cli\' オプションは、case 構文のラベルを \fBswitch\fR 文から
右にインデントする際に空白をいくつ入れるかを指定する。

.\"O The default gives code like:
デフォルトでは以下のようなコードが得られる。

.in +5
.nf
.na
switch (i)
  {
  case 0:
    break;
  case 1:
    {
      ++i;
    }
  default:
    break;
  }
.in -5
.ad
.fi

.\"O Using the \`-cli2\' that would become:
\`-cli2\' を使うと以下のようになる。

.in +5
.nf
.na
switch (i)
  {
    case 0:
      break;
    case 1:
      {
        ++i;
      }
    default:
      break;
  }
.in -5
.ad
.fi

.\"O The indentation of the braces below a case statement can be
.\"O controlled with the \`-cbi\fIn\fR\' option.  For example,
.\"O using \`-cli2 -cbi0\' results in:
case 文の後のブレースのインデントは、
\`-cbi\fIn\fR\' オプションで制御できる。
例えば \`-cli2 -cbi0\' を使うと次のような結果になる。

.in +5
.nf
.na
switch (i)
  {
    case 0:
      break;
    case 1:
    {
      ++i;
    }
    default:
      break;
  }
.in -5
.ad
.fi

.\"O If a semicolon is on the same line as a \fBfor\fR or \fBwhile\fR
.\"O statement, the \`-ss\' option will cause a space to be placed before
.\"O the semicolon.  This emphasizes the semicolon, making it clear that the
.\"O body of the \fBfor\fR or \fBwhile\fR statement is an empty statement.
.\"O \`-nss\' disables this feature.
セミコロンが \fBfor\fR または \fBwhile\fR 文と同じ行にある場合に
\`-ss\' を指定すると、空白がセミコロンの前に置かれる。
これによりセミコロンが強調され、
\fBfor\fR や \fBwhile\fR 文の本体が空の文であることがはっきりする。
\`-nss\' を指定すると、この機能は無効になる。

.\"O The \`-pcs\' option causes a space to be placed between the name of
.\"O the procedure being called and the \`(\' (for example, \fBputs\ ("Hi");\fR.  The \`-npcs\' option would give \fBputs("Hi");\fR).
\`-pcs\' オプションを指定すると、呼び出される手続きの名前と
\`(\' の間に空白が置かれる (例えば、\fBputs\ ("Hi");\fR となる。
また、\`-npcs\' オプションを指定している場合には \fBputs("Hi");\fR) となる。)


.\"O If the \`-cs\' option is specified, \fBindent\fR puts a space after
.\"O a cast operator.
\`-cs\' オプションを指定すると、
\fBindent\fR はキャスト演算子の後に空白を置く。

.\"O The \`-bs\' option ensures that there is a space between the
.\"O keyword \fBsizeof\fR and its argument.  In some versions, this is
.\"O known as the \`Bill_Shannon\' option.
\`-bs\' オプションを指定すると、
キーワード \fBsizeof\fR とその引き数の間に必ず空白が置かれる。
バージョンによっては、
この機能は \`Bill_Shannon\' オプションとして知られている。

.\"O The \`-saf\' option forces a space between an \fBfor\fR
.\"O and the following parenthesis.  This is the default.
\`-saf\' オプションは \fBfor\fR とその後の括弧の間に空白を入れる。
これがデフォルトである。

.\"O The \`-sai\' option forces a space between an \fBif\fR
.\"O and the following parenthesis.  This is the default.
\`-sai\' オプションは \fBif\fR とその後の括弧の間に空白を入れる。
これがデフォルトである。

.\"O The \`-saw\' option forces a space between an \fBwhile\fR
.\"O and the following parenthesis.  This is the default.
\`-saw\' オプションは \fBwhile\fR とその後の括弧の間に空白を入れる。
これがデフォルトである。

.\"O The \`-prs\' option causes all parentheses to be seperated with
.\"O a space from the what is between them.  For example, using \`-prs\'
.\"O results in code like:
\`-prs\' オプションは全ての括弧とその間にあるものの間に空白を置く。
例えば \`-prs\' を使うと以下のようなコードになる。

.in +5
.nf
.na
  while ( ( e_code - s_code ) < ( dec_ind - 1 ) )
    {
      set_buf_break ( bb_dec_ind );
      *e_code++ = \' \';
    }
.in -5
.ad
.fi

.\"O .SH "DECLARATIONS"
.SH 宣言

.\"O By default \fBindent\fR will line up identifiers, in the column
.\"O specified by the \`-di\' option.  For example, \`-di16\' makes
.\"O things look like:
デフォルトでは、\fBindent\fR は \`-di\' オプションで指定した
カラムで識別子を揃える。
例えば、\`-di16\' を指定すると以下のようになる:

.in +5
.nf
.na
int             foo;
char           *bar;
.in -5
.ad
.fi

.\"O Using a small value (such as one or two) for the \`-di\' option can
.\"O be used to cause the identifiers to be placed in the first available
.\"O position; for example:
\`-di\' オプションに小さい値 (1 や 2 など) を使うと、
置くことが可能な最初の場所に識別子を置くことができる。
例を以下に示す:

.in +5
.nf
.na
int foo;
char *bar;
.in -5
.ad
.fi

.\"O The value given to the \`-di\' option will still affect variables
.\"O which are put on separate lines from their types, for example
.\"O \`-di2\' will lead to:
この場合でも、\`-di\' オプションに指定した値は
型指定と異なる行に置いた変数には影響を与える。
例えば、\`-di2\' を指定すると以下のようになる:

.in +5
.nf
.na
int
  foo;
.in -5
.ad
.fi

.\"O If the \`-bc\' option is specified, a newline is forced after each
.\"O comma in a declaration.  For example,
\`-bc\' オプションを指定すると、宣言中のコンマの後に改行が置かれる。
例を以下に示す:

.in +5
.nf
.na
int a,
  b,
  c;
.in -5
.ad
.fi

.\"O With the \`-nbc\' option this would look like
同じコードで \`-nbc\' オプションを指定した場合は以下のようになる:

.in +5
.nf
.na
int a, b, c;
.in -5
.ad
.fi

.\"O The \`-bfda\' option causes a newline to be forced after the comma
.\"O separating the arguments of a function declaration.  The arguments will
.\"O appear at one indention level deeper than the function declaration.  This 
.\"O is particularly helpful for functions with long argument lists. 
\`-bfda\' オプションを指定すると、
関数宣言の引き数のコンマの後で改行を入れる。
引き数は関数宣言より 1 段深くインデントされる。
これは引き数のリストが長い場合に特に役立つ。
.\"O The option \`-bfde\' causes a newline to be forced before the closing 
.\"O bracket of the function declaration. For both options the \'n\' setting is the default:
.\"O -nbdfa and -nbdfe.
\`-bfde\' オプションを指定すると、
関数宣言の閉括弧の前に改行を入れる。
2 つのオプションとも \'n\' を設定した -nbdfa と -nbdfe がデフォルトになる。

.\"O For 
.\"O example,
例えば、

.in +5
.nf
.na
void foo (int arg1, char arg2, int *arg3, long arg4, char arg5);
.in -5
.ad
.fi

.\"O With the \`-bfda\' option this would look like
は、\`-bfda\' オプションを指定すると次のようになり、

.in +5
.nf
.na
void foo (
    int arg1,
    char arg2,
    int *arg3,
    long arg4,
    char arg5);
.in -5
.ad
.fi

.\"O With, in addition, the \`-bfde\' option this would look like
更に \`-bfde\' オプションを指定すると次のようになる。

.in +5
.nf
.na
void foo (
    int arg1,
    char arg2,
    int *arg3,
    long arg4,
    char arg5
    );
.in -5
.ad
.fi

.\"O The \`-psl\' option causes the type of a procedure being defined to
.\"O be placed on the line before the name of the procedure.  This style is
.\"O required for the \fBetags\fR program to work correctly, as well as some
.\"O of the \fBc-mode\fR functions of Emacs.
\`-psl\' オプションを指定すると、
定義される手続きの型は手続きの名前の前の行に置かれる。
このスタイルは、\fBetags\fR プログラムや Emacs の \fBc-mode\fR の
一部の機能を正しく動作させるために必要である。

.\"O You must use the \`-T\'
.\"O option to tell \fBindent\fR the name of all the typenames in your
.\"O program that are defined by \fBtypedef\fR.  \`-T\' can be specified
.\"O more than once, and all names specified are used.  For example, if your
.\"O program contains
プログラム中で \fBtypedef\fR で定義された型の名前を全て、
\`-T\' オプションを使って \fBindent\fR に教えなければならない。
\`-T\' は複数個指定することができ、指定された全ての名前を使うことができる。
例えば、プログラムに

.in +5
.nf
.na
typedef unsigned long CODE_ADDR;
typedef enum {red, blue, green} COLOR;
.in -5
.ad
.fi

.\"O you would use the options \`-T CODE_ADDR -T COLOR\'.
という記述がある場合には、
オプション \`-T CODE_ADDR -T COLOR\' を使うことになるだろう。

.\"O The \`-brs\' or \`-bls\' option specifies how to format braces
.\"O in struct declarations.  The \`-brs\' option formats braces like
.\"O this:
\`-brs\' や \`-bls\' オプションは struct 宣言の
ブレースをどのように整形するかを指定する。
\`-brs\' オプションはブレースを次のように整形する。

.in +5
.nf
.na
struct foo {
  int x;
};
.in -5
.ad
.fi

.\"O The \`-bls\' option formats them like this:
\`-bls\' オプションはブレースを次のように整形する。

.in +5
.nf
.na
struct foo
{
  int x;
};
.in -5
.ad
.fi

.\"O .SH "INDENTATION"
.SH インデント付け

.\"O One issue in the formatting of code is how far each line should be
.\"O indented from the left margin.  When the beginning of a statement such
.\"O as \fBif\fR or \fBfor\fR is encountered, the indentation level is
.\"O increased by the value specified by the \`-i\' option.  For example,
.\"O use \`-i8\' to specify an eight character indentation for each
.\"O level.  When a statement is broken across two lines, the second line is
.\"O indented by a number of additional spaces specified by the \`-ci\'
.\"O option.  \`-ci\' defaults to 0.  However, if the \`-lp\' option is
.\"O specified, and a line has a left parenthesis which is not closed on that
.\"O line, then continuation lines will be lined up to start at the character
.\"O position just after the left parenthesis.  This processing also applies
.\"O to \`[\' and applies to \`{\' when it occurs in initialization
.\"O lists.  For example, a piece of continued code might look like this with
.\"O \`-nlp -ci3\' in effect:
コードを整形する時の問題の 1 つは、
各行をどれだけ左端からインデントさせるかである。
\fBif\fR や \fBfor\fR 等の文の先頭部分があると、
インデントの深さは \`-i\' オプションで指定した値だけ増える。
例えば、レベルごとに 8 文字分のインデントさせるには \`-i8\' を使う。
文が 2 行に折り返されている場合、
2 行目は \`-ci\' オプションで指定した追加のスペース分だけインデントされる。
\`-ci\' のデフォルト値は 0 である。
しかし、\`-lp\' オプションが指定されており、かつ同じ行で閉じられていない
左括弧がある場合、その続きの行が始まる文字は左括弧の直後の位置に揃えられる。
この処理は \`[\' および初期化リストに現われる \`{\' にも適用される。
例えば、\`-nlp -ci3\' が有効になっていると、
行をまたがるコードは以下のようになる:

.in +5
.nf
.na
  p1 = first_procedure (second_procedure (p2, p3),
     third_procedure (p4, p5));
.in -5
.ad
.fi

.\"O With \`-lp\' in effect the code looks somewhat clearer:
\`-lp\' を有効にすると、コードはいくらか見やすくなる:

.in +5
.nf
.na
  p1 = first_procedure (second_procedure (p2, p3),
                        third_procedure (p4, p5));
.in -5
.ad
.fi

.\"O When a statement is broken in between two or more paren pairs (...),
.\"O each extra pair causes the indentation level extra indentation:
.\"Osato:
.\"Osato: extra がうまく訳せない。
.\"Osato:
文が 2 つ以上の括弧の組 (...) にわかれている場合、
追加された括弧の組ごとに 1 段深くインデントされる。

.in +5
.nf
.na
if ((((i < 2 &&
        k > 0) || p == 0) &&
    q == 1) ||
  n = 0)
.in -5
.ad
.fi

.\"O The option \`-ip\fIN\fR\' can be used to set the extra offset per paren.
.\"O For instance, \`-ip0\' would format the above as:
オプション \`-ip\fIN\fR\' は、括弧ごとの追加オフセットを設定するのに使う。
例えば \`-ip0\' は上記のコードを次のように整形する。

.in +5
.nf
.na
if ((((i < 2 &&
  k > 0) || p == 0) &&
  q == 1) ||
  n = 0)
.in -5
.ad
.fi

.\"O .B indent\fR assumes that tabs are placed at regular intervals of both
.\"O input and output character streams.  These intervals are by default 8
.\"O columns wide, but (as of version 1.2) may be changed by the \`-ts\'
.\"O option.  Tabs are treated as the equivalent number of spaces.
\fBindent\fR はタブが入力と出力のストリームの両方で
一定の間隔で置かれることを想定している。
この間隔はデフォルトでは 8 カラム幅であるが、
(バージョン 1.2 からは) \`-ts\' オプションで変更することができる。
タブは複数個の空白と同じ意味である。

.\"O The indentation of type declarations in old-style function definitions
.\"O is controlled by the \`-ip\' parameter.  This is a numeric parameter
.\"O specifying how many spaces to indent type declarations.  For example,
.\"O the default \`-ip5\' makes definitions look like this:
古い形式の関数定義における型宣言のインデント付けは、
\`-ip\' パラメータで制御することができる。
これは、型宣言では空白何個分のインデントを行うかを
指定する数値パラメータである。
例えばデフォルトの \`-ip5\' では、定義は以下のように整形される:

.in +5
.nf
.na
char *
create_world (x, y, scale)
     int x;
     int y;
     float scale;
{
  . . .
}
.in -5
.ad
.fi

.\"O For compatibility with other versions of indent, the option \`-nip\'
.\"O is provided, which is equivalent to \`-ip0\'.
他のバージョンの indent との互換性のために
オプション \`-nip\' が用意されている。
これは \`-ip0\' と同じである。

.\"O ANSI C allows white space to be placed on preprocessor command lines
.\"O between the character \`#\' and the command name.  By default,
.\"O .B indent\fR removes this space, but specifying the \`-lps\' option
.\"O directs \fBindent\fR to leave this space unmodified. The option \`-ppi\' 
.\"O overrides  \`-nlps\' and  \`-lps\'.
ANSI C ではプリプロセッサコマンドラインの文字 \`#\' とコマンド名の間に
空白を入れることが許可されている。
デフォルトでは \fBindent\fR はこの空白を削除するが、
\`-lps\' オプションを指定することで
\fBindent\fR にこの空白を変更しないように指示できる。
オプション \`-ppi\' は  \`-nlps\' と  \`-lps\' を上書きする。

.\"O This option can be used to request that preprocessor conditional statements can
.\"O be indented by to given number of spaces, for example with the option \`-ppi 3\'
このオプションにより、
プリプロセッサ条件文を指定された空白数でインデントできる。
例えばオプション \`-ppi 3\' は

.in +5
.nf
.na
#if X
#if Y
#define Z 1
#else
#define Z 0
#endif
#endif
.in -5
.ad
.fi
.\"O becomes
を次のように整形する。
.in +5
.nf
.na
#if X
#   if Y
#      define Z 1
#   else
#      define Z 0
#   endif
#endif
.in -5
.ad
.fi

.\"O .SH "BREAKING LONG LINES"
.SH 長い行の折り返し

.\"O With the option \`-l\fIn\fR\', or \`--line-length\fIn\fR\', it is
.\"O possible to specify the maximum length of a line of C code, not including
.\"O possible comments that follow it.
オプション \`-l\fIn\fR\' または \`--line-length\fIn\fR\' により、
C 言語コードの行の最大長を指定することができる。
ただしコードの後のコメントは含まない。

.\"O When lines become longer then the specified line length, GNU \fBindent\fR
.\"O tries to break the line at a logical place.  This is new as of version 2.1
.\"O however and not very intelligent or flexible yet.
指定された行の長さより長い場合、
GNU \fBindent\fR は行を論理的な位置で折り返す。
これはバージョン 2.1 の新機能であるが、
まだそれほど賢くはなく柔軟でもない。

.\"O Currently there are two options that allows one to interfere with the
.\"O algorithm that determines where to break a line.
どこで行を折り返すかを決定するアルゴリズムに干渉するためのオプションが、
現在のところ 2 つある。

.\"O The \`-bbo\' option causes GNU \fBindent\fR to prefer to break
.\"O long lines before the boolean operators \fB&&\fR and \fB||\fR.  The
.\"O \`-nbbo\' option causes GNU \fBindent\fR not have that
.\"O preference.  For example, the default option \`-bbo\' (together
.\"O with \`--line-length60\' and \`--ignore-newlines\') makes code
.\"O look like this:
\`-bbo\' オプションを指定すると、GNU \fBindent\fR は
長い行をブーリアン演算子 \fB&&\fR と \fB||\fR の前で折り返す。
\`-nbbo\' オプションを指定すると、GNU \fBindent\fR は
長い行をブーリアン演算子の前で折り返さない。
例えば、(\`--line-length60\' と \`--ignore-newlines\'と一緒に)
デフォルトのオプション \`-bbo\' を指定することにより、
コードは以下のようになる。

.in +5
.nf
.na
  if (mask
      && ((mask[0] == \'\\0\')
          || (mask[1] == \'\\0\'
              && ((mask[0] == \'0\') || (mask[0] == \'*\')))))
.in -5
.ad
.fi

.\"O Using the option \`-nbbo\' will make it look like this:
オプション \`-nbbo\' を使うと、次のようになる。

.in +5
.nf
.na
  if (mask &&
      ((mask[0] == \'\\0\') ||
       (mask[1] == \'\\0\' &&
        ((mask[0] == \'0\') || (mask[0] == \'*\')))))
.in -5
.ad
.fi

.\"O The default \`-hnl\', however, honours newlines in the input file by
.\"O giving them the highest possible priority to break lines at.  For example,
.\"O when the input file looks like this:
しかしデフォルトの \`-hnl\' では、
入力ファイルにおける改行を重視して、
そこで改行するように可能な限りの優先度を与える。
例えば入力ファイルが以下のような場合、

.in +5
.nf
.na
  if (mask
      && ((mask[0] == \'\\0\')
      || (mask[1] == \'\\0\' && ((mask[0] == \'0\') || (mask[0] == \'*\')))))
.in -5
.ad
.fi

.\"O then using the option \`-hnl\', or \`--honour-newlines\',
.\"O together with the previously mentioned \`-nbbo\' and
.\"O \`--line-length60\', will cause the output not to be what is given
.\"O in the last example but instead will prefer to break at the positions
.\"O where the code was broken in the input file:
オプション \`-hnl\' または \`--honour-newlines\' を
上述の \`-nbbo\' と \`--line-length60\' と一緒に使うと、
前の例で示したような出力ではなく、
入力ファイルのコードで改行されている位置でなるべく折り返される。

.in +5
.nf
.na
  if (mask
      && ((mask[0] == \'\\0\')
          || (mask[1] == \'\\0\' &&
              ((mask[0] == \'0\') || (mask[0] == \'*\')))))
.in -5
.ad
.fi

.\"O The idea behind this option is that lines which are too long, but are already
.\"O broken up, will not be touched by GNU \fBindent\fR.  Really messy code
.\"O should be run through \fBindent\fR at least once using the
.\"O \`--ignore-newlines\' option though.
このオプションの背景となる考え方は、
既に折り返されている長すぎる行は
GNU \fBindent\fR で変更しないというものである。
しかし本当に汚いコードは、
少なくとも 1 回は \`--ignore-newlines\' オプションを付けて
\fBindent\fR に通しておくべきである。

.\"O .SH "DISABLING FORMATTING"
.SH 整形の無効化

.\"O Formatting of C code may be disabled for portions of a program by
.\"O embedding special \fIcontrol comments\fR in the program.  To turn off
.\"O formatting for a section of a program, place the disabling control
.\"O comment \fB/* *INDENT-OFF* */\fR on a line by itself just before that
.\"O section.  Program text scanned after this control comment is output
.\"O precisely as input with no modifications until the corresponding
.\"O enabling comment is scanned on a line by itself.  The disabling control
.\"O comment is \fB/* *INDENT-ON* */\fR, and any text following the comment
.\"O on the line is also output unformatted.  Formatting begins again with
.\"O the input line following the enabling control comment.
.\"Osato: 
.\"Osato: 最後から 4 行目の disabling は enabling の間違いか？
.\"Osato: 
特別な\fI制御用コメント\fRをプログラムに埋め込むことにより、
C 言語コードを部分的に整形しないようにすることができる。
プログラムのあるセクションを整形しないようにするためには、
無効化制御用コメント \fB/* *INDENT-OFF* */\fR だけの行を
セクションの直前に置けばよい。
この制御用コメントの後でスキャンされたプログラムテキストは、
有効化コメントだけの行がスキャンされるまで、
入力の通りに変更されず出力される。
有効化制御コメントは \fB/* *INDENT-ON* */\fR であり、
このコメントと同じ行で後に続くテキストも整形されずに出力される。
有効化制御コメントの後に続く行から整形が再開される。

.\"O More precisely, \fBindent\fR does not attempt to verify the closing
.\"O delimiter (\fB*/\fR) for these C comments, and any whitespace on the
.\"O line is totally transparent.
もっと正確に言うと、\fBindent\fR は C 言語コメントの
終了区切り文字 (\fB*/\fR) を検証せず、
その行の空白は存在が意識されない。

.\"O These control comments also function in their C++ formats, namely
.\"O .B // *INDENT-OFF*\fR and \fB// *INDENT-ON*\fR.
これらの制御コメントは、 C++ の書式、
つまり \fB // *INDENT-OFF*\fR と \fB// *INDENT-ON*\fR でも機能する。

.\"O It should be noted that the internal state of \fBindent\fR remains
.\"O unchanged over the course of the unformatted section.  Thus, for
.\"O example, turning off formatting in the middle of a function and
.\"O continuing it after the end of the function may lead to bizarre
.\"O results.  It is therefore wise to be somewhat modular in selecting code
.\"O to be left unformatted.
\fBindent\fR の内部状態は整形しないセクションでも変更されない、
という点に注意すべきである。
よって、例えば関数の途中で整形を無効にして
関数の終りまで無効にし続けた場合、変な結果になる。
したがって、コードを整形しないことを選択する場合は、
モジュールにしておくのがよい。

.\"O As a historical note, some earlier versions of \fBindent\fR produced
.\"O error messages beginning with \fB*INDENT**\fR.  These versions of
.\"O .B indent\fR were written to ignore any input text lines which began
.\"O with such error messages.  I have removed this incestuous feature from
.\"O GNU \fBindent\fR.
歴史的な注意点: 以前のバージョンの \fBindent\fR では
\fB*INDENT**\fR で始まるエラーメッセージを生成するものがあった。
これらのバージョンの \fBindent\fR は、
このようなエラーメッセージで始まる入力テキスト行を
無視するように書かれていた。
私はこの閉鎖的な機能を GNU \fBindent\fR から削除した。

.\"O .SH "MISCELLANEOUS OPTIONS"
.SH その他のオプション

.\"O To find out what version of \fBindent\fR you have, use the command
.\"O .B indent -version\fR.  This will report the version number of
.\"O .B indent\fR, without doing any of the normal processing.
使っている \fBindent\fR のバージョンを知るには、
コマンド \fBindent -version\fR を用いること。
これを用いると、通常の処理は全く行われず、
\fBindent\fR のバージョン番号が表示される。

.\"O The \`-v\' option can be used to turn on verbose mode.  When in
.\"O verbose mode, \fBindent\fR reports when it splits one line of input
.\"O into two more more lines of output, and gives some size statistics at
.\"O completion. 
\`-v\' オプションを用いると、詳細表示モードを有効にすることができる。
詳細表示モードでは、\fBindent\fR は 1 つの行を出力で複数行にする時には報告を
行い、実行終了時にサイズに関する情報を出力する。

.\"O The \`-pmt\' option causes \fBindent\fR to preserve the access
.\"O and modification times on the output files.  Using this option
.\"O has the advantage that running indent on all source and header
.\"O files in a project won\'t cause \fBmake\fR to rebuild all targets.
\`-pmt\' オプションを指定すると、\fBindent\fR は
出力ファイルのアクセス時刻と修正時刻を保存する。
このオプションを使うと、全てのソースファイルとヘッダファイルに
\fBindent\fR を実行しても、\fBmake\fR はターゲットを再構築しない。
.\"O This option is only available on Operating Systems that have the
.\"O POSIX \fButime(2)\fR function.
このオプションは POSIX \fButime(2)\fR 関数がある
オペレーティングシステムでのみ利用可能である。

.\"O .SH "BUGS"
.SH バグ

.\"O Please report any bugs to bug-indent@gnu.org.
バグは bug-indent@gnu.org に報告してほしい。

.\"O When \fBindent\fR is run twice on a file, with the same profile,
.\"O it should \fInever\fR change that file the second time.  With the
.\"O current design of \fBindent\fR, this can not be guaranteed,
.\"O and it has not been extensively tested.
同じプロファイルで 1 つのファイルに \fBindent\fR を 2 回実行した場合、
2 回目はファイルを\fI全く\fR変更しないべきである。
\fBindent\fR の現在の設計では、それは保証できず、
詳細にはテストされていない。

.\"O .B indent\fR does not understand C.  In some cases this leads to
.\"O the inability to join lines.  The result is that running a file
.\"O through \fBindent\fR is \fIirreversible\fR, even if the used input
.\"O file was the result of running \fBindent\fR with a given profile
.\"O (\`.indent.pro\').
\fBindent\fR が C を理解しない。
このため、行を結合できない場合もある。
指定されたプロファイル (\`.indent.pro\') で
\fBindent\fR を実行した結果のファイルを入力として使った場合でも、
\fBindent\fR を通したファイルが\fI非可逆\fRになる。

.\"O While an attempt was made to get \fBindent\fR working for C++, it
.\"O will not do a good job on any C++ source except the very simplest.
C++ に対して \fBindent\fR を動作させることを試みたが、
とても簡単なものでない限り、
C++ のソースに対しては良い結果が得られない。

.\"O .B indent\fR does not look at the given \`--line-length\' option
.\"O when writing comments to the output file.  This results often in comments
.\"O being put far to the right.  In order to prohibit \fBindent\fR from
.\"O joining a broken line that has a comment at the end, make sure that the
.\"O comments start on the first line of the break.
出力ファイルにコメントを書き出している場合、
\fBindent\fR は指定された \`--line-length\' オプションを参照しない。
そのため、たびたびコメントがかなり右に置かれる。
コメントが末尾にある折り返された行を
\fBindent\fR が結合しないようにするため、
コメントが折り返しの最初の行から始まっていることを確認すること。

.\"O .B indent\fR does not count lines and comments (see the \`-v\'
.\"O option) when \fBindent\fR is turned off with 
.\"O .B /* *INDENT-OFF* */\fR.
\fB/* *INDENT-OFF* */\fR によって
\fBindent\fR が無効にされている場合、
\fBindent\fR は行数やコメント数を数えない
(\`-v\' オプションを参照)。

.\"O Comments of the form \fB/*UPPERCASE*/\fR are not treated as comment but as an
.\"O identifier, causing them to be joined with the next line. This renders
.\"O comments of this type useless, unless they are embedded in the code to
.\"O begin with.
\fB/*UPPERCASE*/\fR という形式のコメントは、
コメントとして扱われないが、次の行と結合する識別子として扱われる。
この動作によって、コードの最初に埋め込まれない限り、
このタイプのコメントを無用なものにしてしまう。

.\"O .SH "COPYRIGHT"
.SH 著作権表示

.\"O The following copyright notice applies to the \fBindent\fR program.
.\"O The copyright and copying permissions for this manual appear near the
.\"O beginning of \`indent.texinfo\' and \`indent.info\', and near the
.\"O end of \`indent.1\'.
以下の著作権表示は \fBindent\fR プログラムに適用される。
このマニュアルに関する著作権と複製許可については、
\`indent.texinfo\' と \`indent.info\' の先頭近くと
\`indent.1\' の末尾近くに記述されている。

.nf
.na
Copyright (c) 2001 David Ingamells.
Copyright (c) 1999 Carlo Wood.
Copyright (c) 1995, 1996 Joseph Arceneaux.
Copyright (c) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation
Copyright (c) 1985 Sun Microsystems, Inc.
Copyright (c) 1980 The Regents of the University of California.
Copyright (c) 1976 Board of Trustees of the University of Illinois.
All rights reserved.

Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are
duplicated in all such forms and that any documentation,
advertising materials, and other materials related to such
distribution and use acknowledge that the software was developed
by the University of California, Berkeley, the University of Illinois,
Urbana, and Sun Microsystems, Inc.  The name of either University
or Sun Microsystems may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED \`\`AS IS\'\' AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
PURPOSE.
.ad
.fi

.\"O .SH "Options\' Cross Key"
.SH オプションの相互参照キー

.\"O Here is a list of options alphabetized by long option, to help you find
.\"O the corresponding short option.
長い名前についてアルファベット順に並べたオプションのリストを示す。
これを使えば対応する短いオプション名が簡単に分かる。

.in +5
.nf
.na
--blank-lines-after-commas                      -bc             
--blank-lines-after-declarations                -bad            
--blank-lines-after-procedures                  -bap            
--blank-lines-before-block-comments             -bbb            
--braces-after-if-line                          -bl             
--brace-indent                                  -bli
--braces-after-struct-decl-line                 -bls
--braces-on-if-line                             -br             
--braces-on-struct-decl-line                    -brs
--break-after-boolean-operator                  -nbbo
--break-before-boolean-operator                 -bbo
--break-function-decl-args                      -bfda
--break-function-decl-args-end                  -bfde
--case-indentation                              -cli\fIn\fR     
--case-brace-indentation                        -cbi\fIn\fR
--comment-delimiters-on-blank-lines             -cdb            
--comment-indentation                           -c\fIn\fR       
--continuation-indentation                      -ci\fIn\fR      
--continue-at-parentheses                       -lp             
--cuddle-do-while                               -cdw
--cuddle-else                                   -ce             
--declaration-comment-column                    -cd\fIn\fR      
--declaration-indentation                       -di\fIn\fR      
--dont-break-function-decl-args                 -nbfda
--dont-break-function-decl-args-end             -nbfde
--dont-break-procedure-type                     -npsl           
--dont-cuddle-do-while                          -ncdw
--dont-cuddle-else                              -nce            
--dont-format-comments                          -nfca           
--dont-format-first-column-comments             -nfc1           
--dont-line-up-parentheses                      -nlp            
--dont-space-special-semicolon                  -nss
--dont-star-comments                            -nsc            
--else-endif-column                             -cp\fIn\fR
--format-all-comments                           -fca            
--format-first-column-comments                  -fc1            
--gnu-style                                     -gnu            
--honour-newlines                               -hnl
--ignore-newlines                               -nhnl
--ignore-profile                                -npro           
--indent-level                                  -i\fIn\fR       
--k-and-r-style                                 -kr             
--leave-optional-blank-lines                    -nsob           
--leave-preprocessor-space                      -lps
--line-comments-indentation                     -d\fIn\fR       
--line-length                                   -l\fIn\fR       
--no-blank-lines-after-commas                   -nbc            
--no-blank-lines-after-declarations             -nbad           
--no-blank-lines-after-procedures               -nbap           
--no-blank-lines-before-block-comments          -nbbb           
--no-comment-delimiters-on-blank-lines          -ncdb           
--no-space-after-casts                          -ncs            
--no-parameter-indentation                      -nip            
.\"O --no-space-after-for				-nsaf
--no-space-after-for                            -nsaf
--no-space-after-function-call-names            -npcs           
.\"O --no-space-after-if				-nsai
--no-space-after-if                             -nsai
--no-space-after-parentheses                    -nprs
.\"O --no-space-after-while				-nsaw
--no-space-after-while                          -nsaw
--no-tabs                                       -nut
--no-verbosity                                  -nv             
--original                                      -orig
--parameter-indentation                         -ip\fIn\fR      
--paren-indentation                             -pi\fIn\fR
.\"O --preserve-mtime				-pmt
--preserve-mtime                                -pmt
--procnames-start-lines                         -psl            
--space-after-cast                              -cs             
.\"O --space-after-for				-saf
--space-after-for                               -saf
.\"O --space-after-if				-sai
--space-after-if                                -sai
--space-after-parentheses                       -prs
--space-after-procedure-calls                   -pcs            
.\"O --space-after-while				-saw
--space-after-while                             -saw
--space-special-semicolon                       -ss             
--standard-output                               -st             
--start-left-side-of-comments                   -sc             
--struct-brace-indentation                      -sbi\fIn\fR
--swallow-optional-blank-lines                  -sob            
--tab-size                                      -ts\fIn\fR      
--use-tabs                                      -ut
--verbose                                       -v              
.in -5
.ad
.fi

.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O Unknown
不明。
.\"O .SH FILES
.SH ファイル
.br
.nf
.\" set tabstop to longest possible filename, plus a wee bit
.ta \w'$HOME/.indent.pro   'u
.\"O \fI$HOME/.indent.pro\fR	holds default options for indent.
\fI$HOME/.indent.pro\fR	indent のデフォルトのオプションを設定する
.\"O .SH "AUTHORS"
.SH 著者
.br
Carlo Wood
.br
Joseph Arceneaux
.br
Jim Kingdon
.br
David Ingamells
.\"O .SH "HISTORY"
.SH 履歴
.\"O Derived from the UCB program "indent".
UCB の "indent" プログラムが起源である。
.\"O .SH "COPYING"
.SH 著作権
Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.
Copyright (C) 1995, 1996 Joseph Arceneaux.
Copyright (C) 1999 Carlo Wood.
Copyright (C) 2001 David Ingamells.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
