.\"   Copyright (C) 1996-1999 Free Software Foundation, Inc.
.\"
.\"   Permission is granted to make and distribute verbatim copies of
.\" this manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\"   Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\"   Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that this permission notice may be stated in a
.\" translation approved by the Foundation.
.\"
.\" Copyright (C) 1996 Xavier Leroy.
.\" 
.\" Japanese Version Copyright (C) 2000 WAKABAYASHI, Takeyasu
.\"         all rights reserved.
.\" Translated on Fri Jan 14 16:50:24 JST 2000
.\"         by WAKABAYASHI, Takeyasu <twakaba@eco.toyama-u.ac.jp>
.\" Updated and modified Sun Feb  2 15:15:47 JST 2003
.\"         by Suzuki Takashi.
.\"
.\"WORD:    mutual exclusion    排他制御
.\"WORD:    critical section    クリティカルセクション
.\"
.TH PTHREAD_MUTEX 3 LinuxThreads


.\"O .SH NAME
.\"O pthread_mutex_init, pthread_mutex_lock, pthread_mutex_trylock, 
.\"O pthread_mutex_unlock, pthread_mutex_destroy \- operations on mutexes
.SH "名前"
pthread_mutex_init, pthread_mutex_lock, pthread_mutex_trylock, 
pthread_mutex_unlock, pthread_mutex_destroy \- mutex の操作

.\"O .SH SYNOPSIS
.SH 書式
.B #include <pthread.h>

.BI "pthread_mutex_t " fastmutex " = PTHREAD_MUTEX_INITIALIZER;"

.BI "pthread_mutex_t " recmutex " = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;"

.BI "pthread_mutex_t " errchkmutex " = PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP;"

.BI "int pthread_mutex_init(pthread_mutex_t *" mutex ", const pthread_mutexattr_t *" mutexattr ");"

.BI "int pthread_mutex_lock(pthread_mutex_t *" mutex "));"

.BI "int pthread_mutex_trylock(pthread_mutex_t *" mutex ");"

.BI "int pthread_mutex_unlock(pthread_mutex_t *" mutex ");"

.BI "int pthread_mutex_destroy(pthread_mutex_t *" mutex ");"

.\"O .SH DESCRIPTION
.\"O A mutex is a MUTual EXclusion device, and is useful for protecting
.\"O shared data structures from concurrent modifications, and implementing
.\"O critical sections and monitors.
.SH "説明"
mutex は、排他制御 (MUTual EXclusion) の仕組みであり、共有データの同時更新
からの保護、クリティカルセクション (critical section) や
モニタの実装などに使われる。

.\"O A mutex has two possible states: unlocked (not owned by any thread),
.\"O and locked (owned by one thread). A mutex can never be owned by two
.\"O different threads simultaneously. A thread attempting to lock a mutex
.\"O that is already locked by another thread is suspended until the owning
.\"O thread unlocks the mutex first.
mutex は二つの状態を取りうる。それは、アンロック状態(どのスレッドにも
保有されていない)とロック状態(一つのスレッドに保有されている)である。
二つの異なるスレッドが同時に一つの mutex を保有することはない。既に他の
スレッドによってロックされた mutex をロックしようとするスレッドは、保有
側のスレッドが先にその mutex をアンロックするまで実行を停止させられる。

.\"O .B "pthread_mutex_init"
.\"O initializes the mutex object pointed to by
.\"O .I "mutex"
.\"O according to the mutex attributes specified in 
.\"O .IR "mutexattr" .
.\"O If 
.\"O .I "mutexattr"
.\"O is 
.\"O .BR "NULL" ,
.\"O default attributes are used instead.
.B "pthread_mutex_init"
は
.I "mutex"
が指す mutex オブジェクトを、
.IR "mutexattr"
で指定された mutex 属性オブジェクトに従って初期化する。
.I "mutexattr"
が
.BR "NULL" ,
ならば、デフォルトの属性がこのかわりに使われる。

.\"O The LinuxThreads implementation supports only one mutex attributes,
.\"O the 
.\"O .IR "mutex kind" ,
.\"O which is either ``fast'', ``recursive'', or
.\"O ``error checking''. The kind of a mutex determines whether
.\"O it can be locked again by a thread that already owns it.
.\"O The default kind is ``fast''. See 
.\"O .BR "pthread_mutexattr_init" (3)
.\"O for more
.\"O information on mutex attributes.
LinuxThreads の実装はただ一つの属性
.IR "mutex kind"
だけに対応している。この属性は、「速い」(``fast'')、
「再帰的な」(``recursive'')、または
「エラー検査を行なう」(``error checking'')のいずれかを
指定するものである。
mutex の種別(kind)は、その mutex を既に保有しているスレッドが、
それを再びロックできるかどうかを決定する。
デフォルトの種別は「速い」である。mutex 属性のより詳しい情報は、
.BR "pthread_mutexattr_init" (3)
を見よ。

.\"O Variables of type 
.\"O .B "pthread_mutex_t"
.\"O can also be initialized
.\"O statically, using the constants 
.\"O .B "PTHREAD_MUTEX_INITIALIZER"
.\"O (for fast
.\"O mutexes), 
.\"O .B "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP"
.\"O (for recursive
.\"O mutexes), and 
.\"O .B "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP"
.\"O (for error checking
.\"O mutexes).
.B "pthread_mutex_t"
型の変数は、(速い mutex に対する)定数
.B "PTHREAD_MUTEX_INITIALIZER"
と、(再帰的 mutex に対する)
.B "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP"
および、(エラー検査を行なう mutex に対する)
.B "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP"
で、静的に初期化することもできる。

.\"O .B "pthread_mutex_lock"
.\"O locks the given mutex. If the mutex is currently
.\"O unlocked, it becomes locked and owned by the calling thread, and
.\"O .B "pthread_mutex_lock"
.\"O returns immediately. If the mutex is already
.\"O locked by another thread, 
.\"O .B "pthread_mutex_lock"
.\"O suspends the calling
.\"O thread until the mutex is unlocked.
.B "pthread_mutex_lock"
は、与えられた mutex をロックする。mutex が現在ロックされていなければ、
それはロックされ、呼び出しスレッドによって所有される。この場合
.B "pthread_mutex_lock"
は直ちに返る。mutex が他のスレッドによって既にロックされていたのならば、
.B "pthread_mutex_lock"
は mutex がアンロックされるまで呼び出しスレッドの実行を停止させる。

.\"O If the mutex is already locked by the calling thread, the behavior of
.\"O .B "pthread_mutex_lock"
.\"O depends on the kind of the mutex. If the mutex is
.\"O of the ``fast'' kind, the calling thread is suspended until the mutex
.\"O is unlocked, thus effectively causing the calling thread to
.\"O deadlock. If the mutex is of the ``error checking'' kind,
.\"O .B "pthread_mutex_lock"
.\"O returns immediately with the error code 
.\"O .BR "EDEADLK" .
.\"O If the mutex is of the ``recursive'' kind, 
.\"O .B "pthread_mutex_lock"
.\"O succeeds and returns immediately, recording the number of times the
.\"O calling thread has locked the mutex. An equal number of
.\"O .B "pthread_mutex_unlock"
.\"O operations must be performed before the mutex
.\"O returns to the unlocked state.
mutex が呼び出し側のスレッドにより既にロックされている場合には、
.B "pthread_mutex_lock"
の振舞いは、mutex の種別に依存する。mutex の種別が「速い」であれば、
呼び出しスレッドは mutex がアンロックされるまで実行を停止する。
従って事実上呼び出しスレッドのデッドロックを引き起こす。
mutex の種別が「エラーをチェックする」であれば、
.B "pthread_mutex_lock"
はエラーコード
.BR "EDEADLK"
とともに直ちに戻る。mutex の種別が「再帰的」ならば、
.B "pthread_mutex_lock"
は成功し直ちに戻る。この際、呼び出しスレッドが、その mutex を
ロックした回数を記録する。この mutex がアンロック状態に戻るには、
同数の
.B "pthread_mutex_unlock"
操作が実行されねばならない。

.\"O .B "pthread_mutex_trylock"
.\"O behaves identically to 
.\"O .BR "pthread_mutex_lock" ,
.\"O except that it does not block the calling thread if the mutex is
.\"O already locked by another thread (or by the calling thread in the case
.\"O of a ``fast'' mutex). Instead, 
.\"O .B "pthread_mutex_trylock"
.\"O returns
.\"O immediately with the error code 
.\"O .BR "EBUSY" .
.B "pthread_mutex_trylock"
は
.BR "pthread_mutex_lock"
と同様に振舞うが、mutex が既に他のスレッドによって
(あるいは、「速い」 mutex の場合、呼び出しスレッドによって)
ロックされている場合、呼び出しスレッドをブロックしない。
かわりに、
.B "pthread_mutex_trylock"
はエラーコード
.BR "EBUSY"
で直ちに戻る。

.\"O .B "pthread_mutex_unlock"
.\"O unlocks the given mutex. The mutex is assumed
.\"O to be locked and owned by the calling thread on entrance to
.\"O .BR "pthread_mutex_unlock" .
.\"O If the mutex is of the ``fast'' kind,
.\"O .B "pthread_mutex_unlock"
.\"O always returns it to the unlocked state. If it
.\"O is of the ``recursive'' kind, it decrements the locking count of the
.\"O mutex (number of 
.\"O .B "pthread_mutex_lock"
.\"O operations performed on it by
.\"O the calling thread), and only when this count reaches zero is the
.\"O mutex actually unlocked.
.B "pthread_mutex_unlock"
は、与えられた mutex をアンロックする。
.BR "pthread_mutex_unlock"
の開始時点で、この mutex は呼び出しスレッドによりロックされ
所有されているものと仮定される。
 mutex が「速い」種別のものならば、
.B "pthread_mutex_unlock"
は常にそれをアンロック状態に戻す。それが「再帰的な」種別ならば、
 mutex のロック計数(この mutex に対して
.B "pthread_mutex_lock"
操作が呼び出しスレッドで実行された回数)
を一つ減らし、この計数がゼロになった時に、初めて mutex が
実際にアンロックされる。

.\"O On ``error checking'' mutexes, 
.\"O .B "pthread_mutex_unlock"
.\"O actually checks
.\"O at run-time that the mutex is locked on entrance, and that it was
.\"O locked by the same thread that is now calling 
.\"O .BR "pthread_mutex_unlock" .
.\"O If these conditions are not met, an error code is returned and the
.\"O mutex remains unchanged.  ``Fast'' and ``recursive'' mutexes perform
.\"O no such checks, thus allowing a locked mutex to be unlocked by a
.\"O thread other than its owner. This is non-portable behavior and must
.\"O not be relied upon.
「エラーを検査する」mutex に対しては、
.B "pthread_mutex_unlock"
は実行時に実際に、mutex が開始時点でロックされているか、
また、それは現在
.BR "pthread_mutex_unlock"
を呼んでいるのと同じスレッドによってロックされたかどうか、を検査する。
これらの条件が満たされない場合には、エラーコードが返され、mutex は
不変のままにされる。「速い」mutex と「再帰的な」mutex はこのような
チェックを行なわなず、よって、ロックされた mutex を所有者以外の
スレッドによってアンロックすることを可能にしている。これは、移植性の
ない振舞いであり、これに依存するようなことはすべきでない。

.\"O .B "pthread_mutex_destroy"
.\"O destroys a mutex object, freeing the resources
.\"O it might hold. The mutex must be unlocked on entrance. In the
.\"O LinuxThreads implementation, no resources are associated with mutex
.\"O objects, thus 
.\"O .B "pthread_mutex_destroy"
.\"O actually does nothing except
.\"O checking that the mutex is unlocked.
.B "pthread_mutex_destroy"
は、mutex オブジェクトを破壊し、それが保持している可能性のある
資源を開放する。mutex は関数の開始時点でアンロックされていなければ
ならない。LinuxThreads の実装では、いかなる資源も mutex オブジェクトに
付随していない。故に
.B "pthread_mutex_destroy"
は実際のところ、mutex がアンロックされているかどうかを検査する
以外のことは何もしない。

.\"O .SH CANCELLATION
.SH "取り消し"

.\"O None of the mutex functions is a cancellation point, not even
.\"O .BR "pthread_mutex_lock" ,
.\"O in spite of the fact that it can suspend a
.\"O thread for arbitrary durations. This way, the status of mutexes at
.\"O cancellation points is predictable, allowing cancellation handlers to
.\"O unlock precisely those mutexes that need to be unlocked before the
.\"O thread stops executing. Consequently, threads using deferred
.\"O cancellation should never hold a mutex for extended periods of time.
いかなる mutex 関数も取り消しポイントではない。
.BR "pthread_mutex_lock"
でさえも、それが任意の時間スレッドの実行を停止させうるという
事実にも関わらず、取り消しポイントではない。これにより、取り消し
ポイントにおける mutex の状態は予測可能となり、取り消しハンドラが、
スレッドの実行停止以前にアンロックされる必要のある mutex まさにそれ
のみを、正確にアンロックすることを可能にしている。この結果、遅延
取り消しを用いるスレッドは、決して余計な時間 mutex を所有することはない。

.\"O .SH "ASYNC-SIGNAL SAFETY"
.SH "非同期シグナルに対する安全性"

.\"O The mutex functions are not async-signal safe. What this means is that
.\"O they should not be called from a signal handler. In particular,
.\"O calling 
.\"O .B "pthread_mutex_lock"
.\"O or 
.\"O .B "pthread_mutex_unlock"
.\"O from a signal
.\"O handler may deadlock the calling thread.
mutex 関数は非同期シグナルに対して安全ではない。これの
意味するところは、それらはシグナルハンドラから呼ぶべきではない、
ということである。特に
.B "pthread_mutex_lock"
または
.B "pthread_mutex_unlock"
のシグナルハンドラからの呼び出しは、呼び出しスレッドをデッド
ロックさせる恐れがある。

.\"O .SH "RETURN VALUE"
.SH "返り値"

.\"O .B "pthread_mutex_init"
.\"O always returns 0. The other mutex functions
.\"O return 0 on success and a non-zero error code on error.
.B "pthread_mutex_init"
は、常に 0 を返す。他の mutex 関数は、成功すれば 0 を返し、
エラーでは非ゼロのエラーコードを返す。

.\"O .SH ERRORS
.SH "エラー"

.\"O The 
.\"O .B "pthread_mutex_lock"
.\"O function returns the following error code
.\"O on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the mutex has not been properly initialized.
.B "pthread_mutex_lock"
はエラーの際、次のエラーコードを返す:
.RS
.TP
.B "EINVAL"
mutex が適切に初期化されていない。

.\"O .TP
.\"O .B "EDEADLK"
.\"O the mutex is already locked by the calling thread
.\"O (``error checking'' mutexes only).
.\"O .RE
.TP
.B "EDEADLK"
mutex は既に呼び出しスレッドによりロックされている。
(「エラー検査を行なう」 mutexes のみ)
.RE

.\"O The 
.\"O .B "pthread_mutex_trylock"
.\"O function returns the following error codes
.\"O on error:
.\"O .RS
.\"O .TP
.\"O .B "EBUSY"
.\"O the mutex could not be acquired because it was currently locked.
.B "pthread_mutex_trylock"
はエラーの際、次のエラーコードを返す:
.RS
.TP
.B "EBUSY"
現在ロックされているので mutex を取得できない。

.\"O .TP
.\"O .B "EINVAL"
.\"O the mutex has not been properly initialized.
.\"O .RE
.TP
.B "EINVAL"
mutex が適切に初期化されていない。
.RE

.\"O The 
.\"O .B "pthread_mutex_unlock"
.\"O function returns the following error code
.\"O on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the mutex has not been properly initialized.
.B O"pthread_mutex_unlock"
はエラーの際、次のエラーコードを返す:
.RS
.TP
.B "EINVAL"
mutex が適切に初期化されていない。

.\"O .TP
.\"O .B "EPERM"
.\"O the calling thread does not own the mutex (``error checking'' mutexes only).
.\"O .RE
.TP
.B "EPERM"
呼び出しスレッドは mutex を所有していない。(「エラーを検査する」 mutex のみ)
.RE

.\"O The 
.\"O .B "pthread_mutex_destroy"
.\"O function returns the following error code
.\"O on error:
.\"O .RS
.\"O .TP
.\"O .B "EBUSY"
.\"O the mutex is currently locked.
.\"O .RE
.B "pthread_mutex_destroy"
はエラーの際、次のエラーコードを返す:
.RS
.TP
.B "EBUSY"
mutex は現在ロックされている。
.RE

.\"O .SH AUTHOR
.SH "著者"
Xavier Leroy <Xavier.Leroy@inria.fr>

.\"O .SH "SEE ALSO"
.SH "関連項目"
.BR "pthread_mutexattr_init" (3),
.BR "pthread_mutexattr_setkind_np" (3),
.BR "pthread_cancel" (3).

.\"O .SH EXAMPLE
.SH "例"

.\"O A shared global variable 
.\"O .I "x"
.\"O can be protected by a mutex as follows:
共有される大域変数
.I "x"
は mutex により次のように保護される:

.RS
.ft 3
.nf
.sp
int x;
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;
.ft
.LP
.RE
.fi

.\"O All accesses and modifications to 
.\"O .I "x"
.\"O should be bracketed by calls to
.\"O .B "pthread_mutex_lock"
.\"O and 
.\"O .B "pthread_mutex_unlock"
.\"O as follows:
全ての
.I "x"
へのアクセスとその変更は
.B "pthread_mutex_lock"
と
.B "pthread_mutex_unlock"
によって、次のように囲まれていなければならない:

.RS
.ft 3
.nf
.sp
pthread_mutex_lock(&mut);
.\"O /* operate on x */
/* x の操作 */
pthread_mutex_unlock(&mut);
.ft
.LP
.RE
.fi

[訳注] glibc-linuxthreads の最新のドキュメントは Texinfo 形式で提供されている。
上の記述は glibc-linuxthreads-2.2 以降では正しくない。
以下は glibc-linuxthreads-2.3.1 の Texinfo ファイルからの引用である。
種別 (kind) が型 (type) に変更されている。

.\"O The LinuxThreads implementation supports only one mutex attribute,
.\"O the @var{mutex type}, which is either ``fast'', ``recursive'', or
.\"O ``error checking''. The type of a mutex determines whether
.\"O it can be locked again by a thread that already owns it.
.\"O The default type is ``fast''.
LinuxThreads 実装はただ 1 つの mutex 属性に対応している。
それは mutex 型 (mutex type) で、
「速い (fast) 」、「再帰的な (recursive) 」、
「時刻情報つき (timed) 」、「エラー検査を行なう (error checking) 」の
いずれかである。
mutex 型は、
あるスレッドが自分自身ですでに保持している mutex をロックできるかどうかを
決定する。
デフォルトの mutex 型は「時刻情報つき (timed) 」である。

.\"O Variables of type @code{pthread_mutex_t} can also be initialized
.\"O statically, using the constants @code{PTHREAD_MUTEX_INITIALIZER} (for
.\"O timed mutexes), @code{PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP} (for
.\"O recursive mutexes), @code{PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP}
.\"O (for fast mutexes(, and @code{PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP}
.\"O (for error checking mutexes).
.B pthread_mutex_t
型の変数は、定数
.B "PTHREAD_MUTEX_INITIALIZER"
( 時刻情報つき (timed) mutex 用 ) 、
.B "PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP"
( 再帰的な (recursive) mutex 用 ) 、
.B "PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP"
( 速い (fast) mutex 用 ) 、
.B "PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP"
( エラー検査を行なう (error checking) mutex 用 ) を用いて
静的に初期化することもできる。
