.\"   Copyright (C) 1996-1999 Free Software Foundation, Inc.
.\"
.\"   Permission is granted to make and distribute verbatim copies of
.\" this manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\"   Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\"   Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that this permission notice may be stated in a
.\" translation approved by the Foundation.
.\"
.\" Copyright (C) 1996 Xavier Leroy.
.\"
.\" Japanese Version Copyright (C) 2002-2003 Suzuki Takashi
.\"         all rights reserved.
.\" Translated Wed Jan  1 20:52:15 JST 2003
.\"         by Suzuki Takashi.
.\"
.\"WORD:    thread attribute    スレッド属性
.\"WORD:    thread attribute object スレッド属性オブジェクト
.\"WORD:    joinable            合流可能
.\"WORD:    detached            デタッチ
.\"
.\"
.TH PTHREAD_ATTR_INIT 3 LinuxThreads


.\"O .SH NAME
.\"O pthread_attr_init, pthread_attr_destroy, pthread_attr_setdetachstate, pthread_attr_getdetachstate, 
.\"O pthread_attr_setschedparam, pthread_attr_getschedparam, pthread_attr_setschedpolicy, pthread_attr_getschedpolicy, 
.\"O pthread_attr_setinheritsched, pthread_attr_getinheritsched, pthread_attr_setscope, pthread_attr_getscope 
.\"O \- thread creation attributes
.SH "名前"
pthread_attr_init, pthread_attr_destroy, pthread_attr_setdetachstate, pthread_attr_getdetachstate, 
pthread_attr_setschedparam, pthread_attr_getschedparam, pthread_attr_setschedpolicy, pthread_attr_getschedpolicy, 
pthread_attr_setinheritsched, pthread_attr_getinheritsched, pthread_attr_setscope, pthread_attr_getscope 
\- スレッド生成時の属性

.\"O .SH SYNOPSIS
.SH "書式"
.B #include <pthread.h>

.BI "int pthread_attr_init(pthread_attr_t *" attr ");"

.BI "int pthread_attr_destroy(pthread_attr_t *" attr ");"

.BI "int pthread_attr_setdetachstate(pthread_attr_t *" attr ", int " detachstate ");"

.BI "int pthread_attr_getdetachstate(const pthread_attr_t *" attr ", int *" detachstate ");"

.BI "int pthread_attr_setschedpolicy(pthread_attr_t *" attr ", int " policy ");"

.BI "int pthread_attr_getschedpolicy(const pthread_attr_t *" attr ", int *" policy ");"

.BI "int pthread_attr_setschedparam(pthread_attr_t *" attr ", const struct sched_param *" param ");"

.BI "int pthread_attr_getschedparam(const pthread_attr_t *" attr ", struct sched_param *" param ");"

.BI "int pthread_attr_setinheritsched(pthread_attr_t *" attr ", int " inherit ");"

.BI "int pthread_attr_getinheritsched(const pthread_attr_t *" attr ", int *" inherit ");"

.BI "int pthread_attr_setscope(pthread_attr_t *" attr ", int " scope ");"

.BI "int pthread_attr_getscope(const pthread_attr_t *" attr ", int *" scope ");"

.\"O .SH DESCRIPTION
.SH "説明"

.\"O Setting attributes for threads is achieved by filling a
.\"O thread attribute object 
.\"O .I "attr"
.\"O of type 
.\"O .BR "pthread_attr_t" ,
.\"O then passing it as
.\"O second argument to 
.\"O .BR "pthread_create" (3).
.\"O Passing 
.\"O .B "NULL"
.\"O is equivalent to
.\"O passing a thread attribute object with all attributes set to their
.\"O default values.
スレッドの属性を設定するには、
.B "pthread_attr_t"
型のスレッド属性オブジェクト
.I "attr"
に値を格納し、
.BR "pthread_create" (3)
の第 2 引数として渡せばよい。
.B "NULL"
を渡すことは、
すべての属性がデフォルトに設定されたスレッド属性オブジェクトを
渡すのと同等である。

.\"O .B "pthread_attr_init"
.\"O initializes the thread attribute object 
.\"O .I "attr"
.\"O and
.\"O fills it with default values for the attributes. (The default values
.\"O are listed below for each attribute.)
.B "pthread_attr_init"
はスレッド属性オブジェクト
.I "attr"
を初期化して、各属性のデフォルトの値を格納する。
( 各属性のデフォルト値は下を参照のこと。 )

.\"O Each attribute 
.\"O .I "attrname"
.\"O (see below for a list of all attributes) can
.\"O be individually set using the function 
.\"O .BI "pthread_attr_set" "attrname"
.\"O and retrieved using the function 
.\"O .BI "pthread_attr_get" "attrname."
それぞれの属性
.I "attrname"
( 全属性のリストは下を参照のこと ) は、
関数
.BI "pthread_attr_set" "attrname"
で個別に設定したり、
.BI "pthread_attr_get" "attrname"
で個別に取得したりすることが可能である。

.\"O .B "pthread_attr_destroy"
.\"O destroys a thread attribute object, which
.\"O must not be reused until it is reinitialized. 
.\"O .B "pthread_attr_destroy"
.\"O does nothing in the LinuxThreads implementation. 
.B "pthread_attr_destroy"
はスレッド属性オブジェクトを破壊する。
破壊したオブジェクトは、再初期化するまでは
再び使用してはならない。
.B "pthread_attr_destroy"
は LinuxThreads の実装では何もしない。

.\"O Attribute objects are consulted only when creating a new thread. The
.\"O same attribute object can be used for creating several
.\"O threads. Modifying an attribute object after a call to
.\"O .B "pthread_create"
.\"O does not change the attributes of the thread
.\"O previously created.
属性オブジェクトは新しいスレッドを生成するときにだけ参照される。
複数のスレッドの生成に同じ属性オブジェクトを使用することもできる。
.B "pthread_create"
の呼び出しの後に属性オブジェクトを変更しても、
すでに生成されたスレッドの属性は変化しない。

.\"O The following thread attributes are supported:
次のようなスレッド属性に対応している:

.\"O .SS detachstate
.SS detachstate (デタッチ状態)

.\"O Control whether the thread is created in the joinable state (value
.\"O .BR "PTHREAD_CREATE_JOINABLE" )
.\"O or in the detached state
.\"O (
.\"O .BR "PTHREAD_CREATE_DETACHED" ).
スレッドが合流可能な状態で生成される (
.BR "PTHREAD_CREATE_JOINABLE" )
か、デタッチ状態で生成される (
.BR "PTHREAD_CREATE_DETACHED" )
かを制御する。

.\"O Default value: 
.\"O .BR "PTHREAD_CREATE_JOINABLE" .
デフォルト値: 
.B "PTHREAD_CREATE_JOINABLE"
。

.\"O In the joinable state, another thread can synchronize on the thread
.\"O termination and recover its termination code using 
.\"O .BR "pthread_join" (3),
.\"O but some of the thread resources are kept allocated after the thread
.\"O terminates, and reclaimed only when another thread performs
.\"O .BR "pthread_join" (3)
.\"O on that thread.
合流可能な状態の場合、
別のスレッドが
.BR "pthread_join" (3)
を呼び出すことによって、そのスレッドの終了に同期して
終了コードを取得することができる。
しかし、スレッドの資源の一部はスレッドが終了した後も
確保されたまま残り、
別のスレッドがそのスレッドに対して
.BR "pthread_join" (3)
を呼び出したときに限って解放される。

.\"O In the detached state, the thread resources are immediately freed when
.\"O it terminates, but 
.\"O .BR "pthread_join" (3)
.\"O cannot be used to synchronize on
.\"O the thread termination.
デタッチ状態の場合、スレッドの資源は終了した時に直ちに解放される。
しかし、
.BR "pthread_join" (3)
を使用してスレッドの終了に同期することはできない。

.\"O A thread created in the joinable state can later be put in the
.\"O detached thread using 
.\"O .BR "pthread_detach" (3).
合流可能な状態で生成されたスレッドは、
.BR "pthread_detach" (3)
を呼び出してデタッチスレッドに変更することができる。

.\"O .SS schedpolicy
.SS schedpolicy (スケジューリングポリシー)

.\"O Select the scheduling policy for the thread: one of
.\"O .B "SCHED_OTHER"
.\"O (regular, non-realtime scheduling),
.\"O .B "SCHED_RR"
.\"O (realtime, round-robin) or
.\"O .B "SCHED_FIFO"
.\"O (realtime, first-in first-out). See
.\"O .BR "sched_setpolicy" (2)
.\"O for more information on scheduling policies.
スレッドのスケジューリングポリシーを選択する。
とりうる値は
.B "SCHED_OTHER"
(通常の、リアルタイムでないスケジューリング) 、
.B "SCHED_RR"
(ラウンドロビン方式のリアルタイムスケジューリング) 、
.B "SCHED_FIFO"
(先入れ先出し (FIFO) 方式のリアルタイムスケジューリング) のいずれかである。
スケジューリングポリシーに関するさらなる情報については
.BR "sched_setpolicy" (2)
を参照のこと。

.\"O Default value: 
.\"O .BR "SCHED_OTHER" .
デフォルト値:
.B "SCHED_OTHER"
。

.\"O The realtime scheduling policies 
.\"O .B "SCHED_RR"
.\"O and 
.\"O .B "SCHED_FIFO"
.\"O are
.\"O available only to processes with superuser privileges.
リアルタイムスケジューリングポリシーである
.B "SCHED_RR"
と
.B "SCHED_FIFO"
は、スーパーユーザ権限のプロセスに限って使用できる。

.\"O The scheduling policy of a thread can be changed after creation with
.\"O .BR "pthread_setschedparam" (3).
スレッドのスケジューリングポリシーは、
生成後に
.BR "pthread_setschedparam" (3)
を用いて変更することができる。

.\"O .SS schedparam
.SS schedparam (スケジューリングパラメータ)

.\"O Contain the scheduling parameters (essentially, the scheduling
.\"O priority) for the thread. See 
.\"O .BR "sched_setparam" (2)
.\"O for more information
.\"O on scheduling parameters. 
スレッドのスケジューリングパラメータ (特に、スケジューリング優先度) を
指定する。
スケジューリングパラメータに関するさらなる情報については
.BR "sched_setparam" (2)
を参照のこと。

.\"O Default value: priority is 0.
デフォルト値: 優先度は 0 。

.\"O This attribute is not significant if the scheduling policy is 
.\"O .BR "SCHED_OTHER" ;
.\"O it only matters for the realtime policies 
.\"O .B "SCHED_RR"
.\"O and 
.\"O .BR "SCHED_FIFO" .
この属性はスケジューリングポリシーが
.BR "SCHED_OTHER"
の時には意味を持たず、
リアルタイムポリシー
.B "SCHED_RR"
と
.B "SCHED_FIFO"
に対してのみ有効である。

.\"O The scheduling priority of a thread can be changed after creation with
.\"O .BR "pthread_setschedparam" (3).
スレッドのスケジューリング優先度は、
生成後に
.BR "pthread_setschedparam" (3)
を用いて変更することができる。

.\"O .SS inheritsched
.SS inheritsched (スケジューリングの継承)

.\"O Indicate whether the scheduling policy and scheduling parameters for
.\"O the newly created thread are determined by the values of the
.\"O .I "schedpolicy"
.\"O and 
.\"O .I "schedparam"
.\"O attributes (value
.\"O .BR "PTHREAD_EXPLICIT_SCHED" )
.\"O or are inherited from the parent thread
.\"O (value 
.\"O .BR "PTHREAD_INHERIT_SCHED" ).
新しく生成されるスレッドの
スケジューリングポリシーとスケジューリングパラメータが
属性
.I "schedpolicy"
および
.I "schedparam"
の値で決定される (
.BR "PTHREAD_EXPLICIT_SCHED" )
か、親スレッドから継承される (
.BR "PTHREAD_INHERIT_SCHED" )
かを指定する。

.\"O Default value: 
.\"O .BR "PTHREAD_EXPLICIT_SCHED" .
デフォルト値: 
.B "PTHREAD_EXPLICIT_SCHED"
。

.\"O .SS scope
.SS scope (スコープ)

.\"O Define the scheduling contention scope for the created thread.  The
.\"O only value supported in the LinuxThreads implementation is
.\"O .BR "PTHREAD_SCOPE_SYSTEM" ,
.\"O meaning that the threads contend for CPU time
.\"O with all processes running on the machine. In particular, thread
.\"O priorities are interpreted relative to the priorities of all other
.\"O processes on the machine. The other value specified by the standard,
.\"O .BR "PTHREAD_SCOPE_PROCESS" ,
.\"O means that scheduling contention occurs only
.\"O between the threads of the running process: thread priorities are
.\"O interpreted relative to the priorities of the other threads of the
.\"O process, regardless of the priorities of other processes.
.\"O .B "PTHREAD_SCOPE_PROCESS"
.\"O is not supported in LinuxThreads.
生成されるスレッドのスケジューリング競争スコープを定義する。
LinuxThreads の実装で唯一対応している値は
.B "PTHREAD_SCOPE_SYSTEM"
で、
スレッドは同じ計算機で実行中のすべてのプロセスと CPU 時間を取り合う。
詳しくいえば、スレッドの優先度は計算機上の他のすべてのプロセスの優先度と
同列のものと解釈される。
POSIX 標準で規定されるもう 1 つの値
.B "PTHREAD_SCOPE_PROCESS"
は、
スケジューリングの競争は実行中のプロセス中のスレッド間だけで
起こることを意味する。
すなわち、スレッドの優先度はプロセス中の他のスレッドの優先度と
同列のものと解釈され、他のプロセスの優先度とは関わりがない。
LinuxThreads は
.B "PTHREAD_SCOPE_PROCESS"
に対応していない。

.\"O Default value: 
.\"O .BR "PTHREAD_SCOPE_SYSTEM" .
デフォルト値: 
.B "PTHREAD_SCOPE_SYSTEM"
。

.\"O .SH "RETURN VALUE"
.SH "返り値"

.\"O All functions return 0 on success and a non-zero error code on error.
.\"O On success, the 
.\"O .BI "pthread_attr_get" "attrname"
.\"O functions also store the
.\"O current value of the attribute 
.\"O .I "attrname"
.\"O in the location pointed to
.\"O by their second argument.
すべての関数は成功すると 0 を返し、
エラーならば非 0 のエラーコードを返す。
成功の場合、
関数群
.BI "pthread_attr_get" "attrname"
は属性
.I "attrname"
の現在の値を第 2 引数で指し示される領域に格納する。

.\"O .SH ERRORS
.SH "エラー"

.\"O The 
.\"O .B "pthread_attr_setdetachstate"
.\"O function returns the following error
.\"O codes on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the specified 
.\"O .I "detachstate"
.\"O is not one of 
.\"O .B "PTHREAD_CREATE_JOINABLE"
.\"O or
.\"O .BR "PTHREAD_CREATE_DETACHED" .
.\"O .RE
関数
.B "pthread_attr_setdetachstate"
はエラーの場合、次のようなエラーコードを返す:
.RS
.TP
.B "EINVAL"
指定された
.I "detachstate"
が
.B "PTHREAD_CREATE_JOINABLE"
および
.BR "PTHREAD_CREATE_DETACHED"
のいずれでもない。
.RE

.\"O The 
.\"O .B "pthread_attr_setschedparam"
.\"O function returns the following error
.\"O codes on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the priority specified in 
.\"O .I "param"
.\"O is outside the range of allowed
.\"O priorities for the scheduling policy currently in 
.\"O .I "attr"
.\"O (1 to 99 for 
.\"O .B "SCHED_FIFO"
.\"O and 
.\"O .BR "SCHED_RR" ;
.\"O 0 for 
.\"O .BR "SCHED_OTHER" ).
.\"O .RE
関数
.B "pthread_attr_setschedparam"
はエラーの場合、次のようなエラーコードを返す:
.RS
.TP
.B "EINVAL"
.I "param"
で指定された優先度が
現在の
.I "attr"
のスケジューリングポリシーに対する許容範囲 (
.B "SCHED_FIFO"
および
.B "SCHED_RR"
の場合は 1 から 99 まで、
.B "SCHED_OTHER"
の場合は 0 のみ )
を超えている。
.RE

.\"O The 
.\"O .B "pthread_attr_setschedpolicy"
.\"O function returns the following error
.\"O codes on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the specified 
.\"O .I "policy"
.\"O is not one of 
.\"O .BR "SCHED_OTHER" ,
.\"O .BR "SCHED_FIFO" ,
.\"O or
.\"O .BR "SCHED_RR" .
関数
.B "pthread_attr_setschedpolicy"
はエラーの場合次のようなエラーコードを返す:
.RS
.TP
.B "EINVAL"
指定された
.I "policy"
が
.B "SCHED_OTHER"
および
.B "SCHED_FIFO"
、
.B "SCHED_RR"
のいずれでもない

.\"O .TP
.\"O .B "ENOTSUP"
.\"O .I "policy"
.\"O is 
.\"O .B "SCHED_FIFO"
.\"O or 
.\"O .BR "SCHED_RR" ,
.\"O and the effective user of the
.\"O calling process is not super-user.
.\"O .RE
.TP
.B "ENOTSUP"
.I "policy"
が
.B "SCHED_FIFO"
または
.B "SCHED_RR"
であって、呼び出しプロセスの実効ユーザがスーパーユーザではない。
.RE

.\"O The 
.\"O .B "pthread_attr_setinheritsched"
.\"O function returns the following error
.\"O codes on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the specified 
.\"O .I "inherit"
.\"O is not one of 
.\"O .B "PTHREAD_INHERIT_SCHED"
.\"O or
.\"O .BR "PTHREAD_EXPLICIT_SCHED" .
.\"O .RE
関数
.B "pthread_attr_setinheritsched"
はエラーの場合次のようなエラーコードを返す:
.RS
.TP
.B "EINVAL"
指定された
.I "inherit"
が
.B "PTHREAD_INHERIT_SCHED"
および
.B "PTHREAD_EXPLICIT_SCHED"
のいずれでもない。
.RE

.\"O The 
.\"O .B "pthread_attr_setscope"
.\"O function returns the following error
.\"O codes on error:
.\"O .RS
.\"O .TP
.\"O .B "EINVAL"
.\"O the specified 
.\"O .I "scope"
.\"O is not one of 
.\"O .B "PTHREAD_SCOPE_SYSTEM"
.\"O or
.\"O .BR "PTHREAD_SCOPE_PROCESS" .
関数
.B "pthread_attr_setscope"
はエラーの場合次のようなエラーコードを返す:
.RS
.TP
.B "EINVAL"
指定された
.I "scope"
が
.B "PTHREAD_SCOPE_SYSTEM"
および
.B "PTHREAD_SCOPE_PROCESS"
のいずれでもない。

.\"O .TP
.\"O .B "ENOTSUP"
.\"O the specified 
.\"O .I "scope"
.\"O is 
.\"O .B "PTHREAD_SCOPE_PROCESS"
.\"O (not supported).
.\"O .RE
.TP
.B "ENOTSUP"
指定された
.I "scope"
が
.B "PTHREAD_SCOPE_PROCESS"
(未対応) である。
.RE

.\"O .SH AUTHOR
.SH "著者"
Xavier Leroy <Xavier.Leroy@inria.fr>

.\"O .SH "SEE ALSO"
.SH "関連項目"
.BR "pthread_create" (3),
.BR "pthread_join" (3),
.BR "pthread_detach" (3),
.BR "pthread_setschedparam" (3).

[訳注] glibc-linuxthreads の最新のドキュメントは Texinfo形式で提供されている。
以下は glibc-linuxthreads-2.3.1 の Texinfo ファイルからの引用で、
「説明」に追記されている。
glibc-linuxthreads-2.1 以降 guardsize および stackaddr 、 stacksize が、
glibc-linuxthreads-2.2 以降 stack が追加された。

.BI "int pthread_attr_setstackaddr(pthread_attr_t *" attr ", void *" stackaddr ");"

.BI "int pthread_attr_getstackaddr(const pthread_attr_t *" attr ", void **" stackaddr ");"

.\"O @item stackaddr
.SS stackaddr (スタックアドレス)
.\"O Provide an address for an application managed stack.  The size of the
.\"O stack must be at least @code{PTHREAD_STACK_MIN}.
アプリケーション管理スタックのアドレスを指定する。
スタックのサイズは
.B "PTHREAD_STACK_MIN"
以上でなければならない。

.BI "int pthread_attr_setstacksize(pthread_attr_t *" attr ", size_t " stacksize");"

.BI "int pthread_attr_getstacksize(const pthread_attr_t *" attr ", size_t *" stacksize ");"

.\"O @item stacksize
.SS stacksize (スタックサイズ)
.\"O Change the size of the stack created for the thread.  The value defines
.\"O the minimum stack size, in bytes.
スレッドに対して確保されるスタックのサイズを変更する。
最小スタックサイズが指定した値に設定される。単位はバイトである。

.\"O If the value exceeds the system's maximum stack size, or is smaller
.\"O than @code{PTHREAD_STACK_MIN}, @code{pthread_attr_setstacksize} will
.\"O fail and return @code{EINVAL}.
指定した値がシステムの最大スタックサイズを超える場合、
または
.B "PTHREAD_STACK_MIN"
よりも小さい場合、
.B "pthread_attr_setstacksize"
は失敗し、
.B "EINVAL"
を返す。

.BI "int pthread_attr_setstack(pthread_attr_t *" attr ", void *" stackaddr ", size_t " stacksize ");"

.BI "int pthread_attr_getstack(const pthread_attr_t *" attr ", void **" stackaddr ", size_t *" stacksize ");"

.\"O @item stack
.SS stack (スタック)
.\"O Provide both the address and size of an application managed stack to
.\"O use for the new thread.  The base of the memory area is @var{stackaddr}
.\"O with the size of the memory area, @var{stacksize}, measured in bytes.
生成されるスレッドに用いられるアプリケーション管理スタックの
アドレスとサイズの両方を指定する。
メモリ領域のベースを
.I "stackaddr"
に、メモリ領域のサイズをバイト単位で
.I "stacksize"
に指定する。

.\"O If the value of @var{stacksize} is less than @code{PTHREAD_STACK_MIN},
.\"O or greater than the system's maximum stack size, or if the value of
.\"O @var{stackaddr} lacks the proper alignment, @code{pthread_attr_setstack}
.\"O will fail and return @code{EINVAL}.
.I "stacksize"
の値が
.B "PTHREAD_STACK_MIN"
よりも小さいか、
システムの最大スタックサイズを超える場合、
または
.I "stackaddr"
の値が適切なアライメントでない場合、
.B "pthread_attr_setstack"
は失敗し、
.B "EINVAL"
を返す。

.BI "int pthread_attr_setguardsize(pthread_attr_t *" attr ", size_t " guardsize ");"

.BI "int pthread_attr_getguardsize(const pthread_attr_t *" attr ", size_t *" guardsize ");"

.\"O @item guardsize
.SS guardsize (保護サイズ)
.\"O Change the minimum size in bytes of the guard area for the thread's
.\"O stack.  The default size is a single page.  If this value is set, it
.\"O will be rounded up to the nearest page size.  If the value is set to 0,
.\"O a guard area will not be created for this thread.  The space allocated
.\"O for the guard area is used to catch stack overflow.  Therefore, when
.\"O allocating large structures on the stack, a larger guard area may be
.\"O required to catch a stack overflow.
スレッドのスタックの保護領域の最小のサイズをバイト単位で変更する。
デフォルトのサイズは 1 ページである。
この値が設定された場合、指定した値以上の最も近いページサイズに丸められる。
この値が 0 に設定された場合、このスレッドには保護領域は作成されない。
保護領域として確保された領域は、スタックオーバーフローを検出するのに
用いられる。したがって、大きな構造体の領域をスタック内に確保する場合、
スタックオーバーフローを検出するためにはそれよりも
大きい保護領域を指定する必要がある。

.\"O If the caller is managing their own stacks (if the @code{stackaddr}
.\"O attribute has been set), then the @code{guardsize} attribute is ignored.
スレッドが独自のスタックを使用している場合(
.I "stackaddr"
属性が設定されている場合) 、
.I "guardsize"
属性は無視される。

.\"O If the value exceeds the @code{stacksize}, @code{pthread_atrr_setguardsize}
.\"O will fail and return @code{EINVAL}.
指定した値が
.I "stacksize"
を超える場合、
.B "pthread_attr_setguardsize"
は失敗し、
.B "EINVAL"
を返す。
