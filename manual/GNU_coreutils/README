== coreutils の翻訳の流れ ==

help2man.ja 以下の *.x を訳す。
原文は roff の場合と同じく .\"O で始めるものとする。

* トップディレクトリで make all を実行すると help2man が実行され、
  help2man.ja/ 以下に *.1 が生成される。
  * 最初は coreutils-*.tar.xz を取得して、プログラムの生成も行うので、時間がかかる。
  * make clean で help2man.ja/*.1 を削除できる。
* トップディレクトリで make install を実行すると、
  help2man.ja/*.1 が draft/man1 にコピーされる。

翻訳校正時 (暫定ルール)
  *.x を投稿する。
  original の翻訳者が manpage も投稿してもよい。

  JM git repo に登録時に manpage を committer が生成する。
  mandiff.py などで HTML を生成して、original と翻訳の比較ができるようにする。
  Makefile のルールを追加しておきたい。

== original の更新 ==

(1) ファイルのコピー
rm -f original/man1/*
cp SOURCE/man/*.1 original/man1/
rm -f help2man.orig/*
cp SOURCE/man/*.x help2man.orig/

(2) translation_list の更新
git で add/remove を行う。
git status | ../../admin/git2upd > upd.txt

(edit upd.txt)

../../admin/upd_tl.perl translation_list upd.txt VERSION

(3) help2man.ja の更新
help2man.orig 側でのファイルの add/update/remove を反映する。


original/man1/*.1 が更新されるのは、以下の二つのケースがある。
* *.x が更新された場合
  → JM のステータスで「更新あり」として扱う
* help message が更新された場合
  → JM のステータスとしては「更新なし」として扱う
  → SOURCE/po/ja.po を修正して Translation Project へ。
