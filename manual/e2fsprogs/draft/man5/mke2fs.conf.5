.\" -*- nroff -*-
.\" Copyright 2006 by Theodore Ts'o.  All Rights Reserved.
.\" This file may be copied under the terms of the GNU Public License.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.TH mke2fs.conf 5 "February 2012" "E2fsprogs version 1.42.1" 
.SH 名前
mke2fs.conf \- Configuration file for mke2fs
.SH 説明
\fImke2fs.conf\fP is the configuration file for \fBmke2fs\fP(8).  It controls the
default parameters used by \fBmke2fs\fP(8)  when it is creating ext2 or ext3
filesystems.
.PP
.\" Tags can be assigned multiple values
The \fImke2fs.conf\fP file uses an INI\-style format.  Stanzas, or top\-level
sections, are delimited by square braces: [ ].  Within each section, each
line defines a relation, which assigns tags to values, or to a subsection,
which contains further relations or subsections.  An example of the
INI\-style format used by this configuration file follows below:
.P
  [section1]
.br
  tag1 = value_a
.br
  tag1 = value_b
.br
  tag2 = value_c
.P
  [section 2]
.br
  tag3 = {
.br
  subtag1 = subtag_value_a
.br
  subtag1 = subtag_value_b
.br
  subtag2 = subtag_value_c
.br
  }
.br
  tag1 = value_d
.br
  tag2 = value_e
.br
  }
.P
コメントは、先頭のセミコロン (';') または ハッシュ ('#') 文字で区切られ、行末文字で終わる。
.P
タグと値にスペースが含まれる場合は、ダブルクォートで括らなければならない。
ダブルクォートで括った文字列内では、標準的なバックスラッシュの解釈が適用される:
"\en" (改行文字), "\et" (タブ文字), "\eb" (バックスペース文字),
"\e\e" (バックスラッシュ文字)。
.P
Some relations expect a boolean value.  The parser is quite liberal on
recognizing \*(lqyes\*(rq, '`y\*(rq, \*(lqtrue\*(rq, \*(lqt\*(rq, \*(lq1\*(rq, \*(lqon\*(rq, etc. as a
boolean true value, and \*(lqno\*(rq, \*(lqn\*(rq, \*(lqfalse\*(rq, \*(lqnil\*(rq, \*(lq0\*(rq, \*(lqoff\*(rq as
a boolean false value.
.P
The following stanzas are used in the \fImke2fs.conf\fP file.  They will be
described in more detail in future sections of this document.
.TP  
\fI[defaults]\fP
Contains relations which define the default parameters used by
\fBmke2fs\fP(8).  In general, these defaults may be overridden by a definition
in the \fBfs_types\fP stanza, or by an command\-line option provided by the
user.
.TP  
\fI[fs_types]\fP
Contains relations which define defaults that should be used for specific
filesystem types.  The filesystem type can be specified explicitly using the
\fB\-T\fP option to \fBmke2fs\fP(8).
.SH "[defaults] 節"
The following relations are defined in the \fI[defaults]\fP stanza.
.TP 
\fIbase_features\fP
This relation specifies the filesystems features which are enabled in newly
created filesystems.  It may be overridden by the \fIbase_features\fP relation
found in the filesystem or usage type subsection of the \fI[fs_types]\fP
stanza.
.TP 
\fIdefault_features\fP
This relation specifies a set of features that should be added or removed to
the features listed in the \fIbase_features\fP relation.  It may be overridden
by the filesystem\-specific \fIdefault_features\fP in the filesystem or usage
type subsection of \fI[fs_types]\fP, and by the \fB\-O\fP command\-line option to
\fBmke2fs\fP(8).
.TP 
\fIenable_periodic_fsck\fP
This boolean relation specifies whether periodic filesystem checks should be
enforced at boot time.  If set to true, checks will be forced every 180
days, or after a random number of mounts.  These values may be changed later
via the \fB\-i\fP and \fB\-c\fP command\-line options to \fBtune2fs\fP(8).
.TP 
\fIforce_undo\fP
This boolean relation, if set to a value of true, forces \fBmke2fs\fP to always
try to create an undo file, even if the undo file might be huge and it might
extend the time to create the filesystem image because the inode table isn't
being initialized lazily.
.TP 
\fIfs_type\fP
This relation specifies the default filesystem type if the user does not
specify it via the \fB\-t\fP option, or if \fBmke2fs\fP is not started using a
program name of the form \fBmkfs.\fP\fIfs\-type\fP.  If both the user and the
\fBmke2fs.conf\fP file does not specify a default filesystem type, mke2fs will
use a default filesystem type of \fIext3\fP if a journal was requested via a
command\-line option, or \fIext2\fP if not.
.TP 
\fIblocksize\fP
This relation specifies the default blocksize if the user does not specify a
blocksize on the command line, and the filesystem\-type specific section of
the configuration file does not specify a blocksize.
.TP 
\fIhash_alg\fP
This relation specifies the default hash algorithm used for the new
filesystems with hashed b\-tree directories.  Valid algorithms accepted are:
\fIlegacy\fP, \fIhalf_md4\fP, and \fItea\fP.
.TP 
\fIinode_ratio\fP
This relation specifies the default inode ratio if the user does not specify
one on the command line, and the filesystem\-type specific section of the
configuration file does not specify a default inode ratio.
.TP 
\fIinode_size\fP
This relation specifies the default inode size if the user does not specify
one on the command line, and the filesystem\-type specific section of the
configuration file does not specify a default inode size.
.TP 
\fIreserved_ratio\fP
This relation specifies the default percentage of filesystem blocks reserved
for the super\-user, if the user does not specify one on the command line,
and the filesystem\-type specific section of the configuration file does not
specify a default reserved ratio. This value can be a floating point number.
.TP 
\fIundo_dir\fP
This relation specifies the directory where the undo file should be stored.
It can be overridden via the \fBE2FSPROGS_UNDO_DIR\fP environment variable.  If
the directory location is set to the value \fInone\fP, \fBmke2fs\fP will not
create an undo file.
.SH "[fs_types] 節"
Each tag in the \fI[fs_types]\fP stanza names a filesystem type or usage type
which can be specified via the \fB\-t\fP or \fB\-T\fP options to \fBmke2fs\fP(8),
respectively.
.P
The \fBmke2fs\fP program constructs a list of fs_types by concatenating the
filesystem type (i.e., ext2, ext3, etc.) with the usage type list.  For most
configuration options, \fBmke2fs\fP will look for a subsection in the
\fI[fs_types]\fP stanza corresponding with each entry in the constructed list,
with later entries overriding earlier filesystem or usage types.  For
example, consider the following \fBmke2fs.conf\fP fragment:
.P
[defaults]
.br
  base_features = sparse_super,filetype,resize_inode,dir_index
.br
  blocksize = 4096
.br
  inode_size = 256
.br
  inode_ratio = 16384
.br

.br
[fs_types]
.br
  ext3 = {
.br
  features = has_journal
.br
  }
.br
  ext4 = {
.br
  features = extents,flex_bg
.br
  inode_size = 256
.br
  }
.br
  small = {
.br
  blocksize = 1024
.br
  inode_ratio = 4096
.br
  }
.br
  floppy = {
.br
  features = ^resize_inode
.br
  blocksize = 1024
.br
  inode_size = 128
.br
  }
.P
If mke2fs started with a program name of \fBmke2fs.ext4\fP, then the filesystem
type of ext4 will be used.  If the filesystem is smaller than 3 megabytes,
and no usage type is specified, then \fBmke2fs\fP will use a default usage type
of \fIfloppy\fP.  This results in an fs_types list of "ext4, floppy".  Both the
ext4 subsection and the floppy subsection define an \fIinode_size\fP relation,
but since the later entries in the fs_types list supersede earlier ones, the
configuration parameter for fs_types.floppy.inode_size will be used, so the
filesystem will have an inode size of 128.
.P
The exception to this resolution is the \fIfeatures\fP tag, which is specifies
a set of changes to the features used by the filesystem, and which is
cumulative.  So in the above example, first the configuration relation
defaults.base_features would enable an initial feature set with the
sparse_super, filetype, resize_inode, and dir_index features enabled.  Then
configuration relation fs_types.ext4.features would enable the extents and
flex_bg features, and finally the configuration relation
fs_types.floppy.features would remove the resize_inode feature, resulting in
a filesystem feature set consisting of the sparse_super, filetype,
resize_inode, dir_index, extents_and flex_bg features.
.P
For each filesystem type, the following tags may be used in that fs_type's
subsection:
.TP 
\fIbase_features\fP
This relation specifies the features which are initially enabled for this
filesystem type.  Only one \fIbase_features\fP will be used, so if there are
multiple entries in the fs_types list whose subsections define the
\fIbase_features\fP relation, only the last will be used by \fBmke2fs\fP(8).
.TP 
\fIfeatures\fP
This relation specifies a comma\-separated list of features edit requests
which modify the feature set used by the newly constructed filesystem.  The
syntax is the same as the \fB\-O\fP command\-line option to \fBmke2fs\fP(8); that
is, a feature can be prefixed by a caret ('^') symbol to disable a named
feature.  Each \fIfeature\fP relation specified in the fs_types list will be
applied in the order found in the fs_types list.
.TP 
\fIdefault_features\fP
This relation specifies set of features which should be enabled or disabled
after applying the features listed in the \fIbase_features\fP and \fIfeatures\fP
relations.  It may be overridden by the \fB\-O\fP command\-line option to
\fBmke2fs\fP(8).
.TP 
\fIauto_64\-bit_support\fP
This relation is a boolean which specifies whether \fBmke2fs\fP(8)  should
automatically add the 64bit feature if the number of blocks for the file
system requires this feature to be enabled.  The resize_inode feature is
also automatically disabled since it doesn't support 64\-bit block numbers.
.TP 
\fIdefault_mntopts\fP
This relation specifies the set of mount options which should be enabled by
default.  These may be changed at a later time with the \fB\-o\fP command\-line
option to \fBtune2fs\fP(8).
.TP 
\fIblocksize\fP
This relation specifies the default blocksize if the user does not specify a
blocksize on the command line.
.TP 
\fIlazy_itable_init\fP
This boolean relation specifies whether the inode table should be lazily
initialized.  It only has meaning if the uninit_bg feature is enabled.  If
lazy_itable_init is true and the uninit_bg feature is enabled, the inode
table will not fully initialized by \fBmke2fs\fP(8).  This speeds up filesystem
initialization noticeably, but it requires the kernel to finish initializing
the filesystem in the background when the filesystem is first mounted.
.TP 
\fIinode_ratio\fP
This relation specifies the default inode ratio if the user does not specify
one on the command line.
.TP 
\fIinode_size\fP
This relation specifies the default inode size if the user does not specify
one on the command line.
.TP 
\fIreserved_ratio\fP
This relation specifies the default percentage of filesystem blocks reserved
for the super\-user, if the user does not specify one on the command line.
.TP 
\fIhash_alg\fP
This relation specifies the default hash algorithm used for the new
filesystems with hashed b\-tree directories.  Valid algorithms accepted are:
\fIlegacy\fP, \fIhalf_md4\fP, and \fItea\fP.
.TP 
\fIflex_bg_size\fP
This relation specifies the number of block groups that will be packed
together to create one large virtual block group on an ext4 filesystem.
This improves meta\-data locality and performance on meta\-data heavy
workloads.  The number of groups must be a power of 2 and may only be
specified if the flex_bg filesystem feature is enabled.  \fIoptions\fP This
relation specifies additional extended options which should be treated by
\fBmke2fs\fP(8)  as if they were prepended to the argument of the \fB\-E\fP
option.  This can be used to configure the default extended options used by
\fBmke2fs\fP(8)  on a per\-filesystem type basis.
.TP 
\fIdiscard\fP
This boolean relation specifies whether the \fBmke2fs\fP(8)  should attempt to
discard device prior to filesystem creation.
.TP 
\fIcluster_size\fP
This relation specifies the default cluster size if the bigalloc file system
feature is enabled.  It can be overridden via the \fB\-C\fP command line option
to \fBmke2fs\fP(8)
.SH "[devices] 節"
Each tag in the \fI[devices]\fP stanza names device name so that per\-device
defaults can be specified.
.TP 
\fIfs_type\fP
This relation specifies the default parameter for the \fB\-t\fP option, if this
option isn't specified on the command line.
.TP 
\fIusage_types\fP
This relation specifies the default parameter for the \fB\-T\fP option, if this
option isn't specified on the command line.
.SH ファイル
.TP 
\fI/etc/mke2fs.conf\fP
The configuration file for \fBmke2fs\fP(8).
.SH 関連項目
\fBmke2fs\fP(8)
