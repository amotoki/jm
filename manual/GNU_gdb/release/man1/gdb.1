.\" Copyright (c) 1991 Free Software Foundation
.\" See section COPYING for conditions for redistribution
.\" $Id: gdb.1,v 1.1.1.1 1999/07/19 01:49:11 cvs Exp $
.TH gdb 1 "4nov1991" "GNU Tools" "GNU Tools"
.SH 名称
gdb \- The GNU Debugger
.SH 書式
.na
.TP
.B gdb
.RB "[\|" \-help "\|]"
.RB "[\|" \-nx "\|]"
.RB "[\|" \-q "\|]"
.RB "[\|" \-batch "\|]"
.RB "[\|" \-cd=\c
.I dir\c
\|]
.RB "[\|" \-f "\|]"
.RB "[\|" "\-b\ "\c
.IR bps "\|]"
.RB "[\|" "\-tty="\c
.IR dev "\|]"
.RB "[\|" "\-s "\c
.I symfile\c
\&\|]
.RB "[\|" "\-e "\c
.I prog\c
\&\|]  
.RB "[\|" "\-se "\c
.I prog\c
\&\|]
.RB "[\|" "\-c "\c
.I core\c
\&\|]
.RB "[\|" "\-x "\c
.I cmds\c
\&\|]
.RB "[\|" "\-d "\c
.I dir\c
\&\|]
.RB "[\|" \c
.I prog\c
.RB "[\|" \c
.IR core \||\| procID\c
\&\|]\&\|]
.ad b
.SH 解説
GDB のようなデバッガの目的は、プログラムが実行中もしくはクラッシュした時にその
プログラムの ``内部'' で何が行われているかを見ることができるようにする
ことです。

GDB は、実行中にバグを見つけることを手助けするために、
主に 4 種類の仕事 (加えて、これらをサポートするもの) を行うことが出来ます。

.TP
\ \ \ \(bu
プログラムの動作を詳細に指定してプログラムを実行させる。

.TP
\ \ \ \(bu
詳細な条件でプログラムを停止させる。

.TP
\ \ \ \(bu
プログラムが止まった時に、何が起こったか調べる。

.TP
\ \ \ \(bu
プログラムの状態を変更し、ひとつのバグの影響を修正して別の部分を調べる。
.PP

GDB は C, C++, Modula-2 などで書かれたプログラムのデバッグが行えます。
Fortran は、GNU Fortran が出来たときにサポートします。

GDB はシェルコマンド\c
.B gdb\c
\&で起動されます。いったんスタートすると、GDB コマンド\c
.B quit\c
\&を実行して終了するまで、端末からコマンドを読み続けます。
.B gdb\c
\&自身のオンラインヘルプは\c
.B help\c
\&コマンドで得られます。

.B gdb\c
\& は引数やオプション無しで起動できますが、
たいてい、起動時には 1 つか2 つの引数をとります。実行プログラムを
引数としてとる場合は以下のようになります:
.sp
.br
gdb\ program
.br
.sp

実行プログラムと core ファイルの両方を指定することも出来ます:
.sp
.br
gdb\ program\ core
.br
.sp

もし実行中のプロセスのデバッグを行いたい場合には、
第 2 引数にプロセス ID を指定すれば、デバッグが行えます:
.sp
.br
gdb\ program\ 1234
.br
.sp

これは GDB をプロセス\c
.B 1234\c
\& 番に接続します(`\|\c
.B 1234\c
\&\|'という名前のファイルが存在しない限り。
GDB はそのファイルが core ファイルであるかどうかを最初にチェックします)。

頻繁に利用される GDB コマンドを以下に挙げます:
.TP
.B break \fR[\|\fIfile\fB:\fR\|]\fIfunction
\&
プレークポイントを \c
.I function\c
\& (\c
.I file\c
\&内の)に設定します。
.TP
.B run \fR[\|\fIarglist\fR\|]
プログラムの実行を開始します(もし指定された場合は\c
.I arglist\c
\&もいっしょに)。
.TP
.B bt
バックトレースです。プログラムのスタックを表示します。
.TP
.BI print " expr"\c
\&
式の値を表示します。
.TP
.B c
プログラムの実行を再開します(ブレークポイントで停止中に)。
.TP
.B next
次のプログラム行を実行します (停止中に)。
その行内の全ての関数は 1 ステップとみなされます。
.TP
.B step
次のプログラム行を実行します (停止中に)。
その行内の関数内へは、ステップ実行しにいきます。
.TP
.B help \fR[\|\fIname\fR\|]
GDB command \c
.I name\c
\&についての情報を表示するか、または、
GDB を使う上での一般的な情報を表示します。
.TP
.B quit
GDB を終了します。
.PP
GDB の詳細については\c
.I 
Using GDB: A Guide to the GNU Source-Level Debugger\c
\&, by Richard M. Stallman and Roland H. Pesch. を参照して下さい。
同じテキストは、
.B info\c
\& プログラム内の
.B gdb\c
\& エントリで、オンラインで得られます。
.SH オプション
オプションのない引数は、実行ファイルと core ファイル (もしくはプロセス ID)
を表します。つまり、オプションフラグ無しの第 1 引数は `\|\c
.B \-se\c
\&\|' オプションの引数とみなされ、第 2 引数が同様にオプションがなく
ファイル名であった場合は `\|\c
.B \-c\c
\&\|' オプションの引数とみなされます。
多くのオプションが、長い表記法と短い表記法の両方を持ちます。
ここでは両方を示してあります。
長い表記法は、そのオプションが不明瞭でない長さまで切り詰められたものであれば
きちんと解釈されます。(好みにより、`\|\c
.B \-\c
\&\|' の代わりに
`\|\c
.B +\c
\&\|' が使用できます。)

全てのオプションとコマンドライン引数は順番に処理されます。
この順番は
`\|\c
.B \-x\c
\&\|' オプションが使用された時は変わります。

.TP
.B \-help
.TP
.B \-h
短い説明つきで、全てのオプションを表示します。

.TP
.BI "\-symbols=" "file"\c
.TP
.BI "\-s " "file"\c
\&
シンボルテーブルを、ファイル \c
.I file\c
\&から読みます。

.TP
.BI "\-exec=" "file"\c
.TP
.BI "\-e " "file"\c
\&
ファイル \c
.I file\c
\& を実行可能ファイルとして利用します。

.TP
.BI "\-se=" "file"\c
\&
ファイル \c
.I file\c
\& からシンボルテーブルを読み、実行可能ファイルとして利用します。

.TP
.BI "\-core=" "file"\c
.TP
.BI "\-c " "file"\c
\&
ファイル \c
.I file\c
\& を調査用の core dump として利用します。

.TP
.BI "\-command=" "file"\c
.TP
.BI "\-x " "file"\c
\&
ファイル \c
.I file\c
\&から GDB のコマンドを読み込みます。

.TP
.BI "\-directory=" "directory"\c
.TP
.BI "\-d " "directory"\c
\&
ソースファイルを探索するためのパスに \c
.I directory\c
\& を追加します。
.PP

.TP
.B \-nx
.TP
.B \-n
初期化ファイル \c
.B .gdbinit\c
\&\|' からコマンドを読み込みません。
通常は、
全てのコマンドオプションと引数が処理された後で、
このファイル内のコマンドが実行されます。

.TP
.B \-quiet
.TP
.B \-q
``Quiet''です。起動時のメッセージおよび copyright メッセージを表示しません。
これらのメッセージはバッチモードでも削除されます。

.TP
.B \-batch
バッチモードで動作します。`\|\c
.B \-x\c
\&\|' (および、実行を抑制されなければ `\|\c
.B .gdbinit\c
\&\|') で指定したファイル内の全てのコマンドを
処理した後で戻り値として \c
.B 0\c
\& を返します。
コマンドファイル内の GDB コマンドの実行中にエラーが起こった場合は
0 でない値が返ります。

バッチモードは GDB をフィルタとして実行する場合に有効です。

.TP
.BI "\-cd=" "directory"\c
\&
GDB のワーキングディレクトリを、カレントディレクトリの代わりに \c
.I directory\c
\& にして実行します。

.TP
.BI "\-b " "bps"\c
\&
リモートデバッグ用の GDB が利用するシリアルインタフェースの転送速度を
セットします。

.TP
.BI "\-tty=" "device"\c
\&
プログラムの標準入出力に \c
.I device\c
\& を利用します。
.PP

.SH "関連項目"
.B info\c
内の
.RB "`\|" gdb "\|'"
エントリ
\&;
.I 
Using GDB: A Guide to the GNU Source-Level Debugger\c
, Richard M. Stallman and Roland H. Pesch, July 1991.
.SH COPYING
Copyright (c) 1991 Free Software Foundation, Inc.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
