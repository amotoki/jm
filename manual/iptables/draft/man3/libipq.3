.\"O .TH LIBIPQ 3 "16 October 2001" "Linux iptables 1.2" "Linux Programmer's Manual" 
.TH LIBIPQ 3 "16 October 2001" "Linux iptables 1.2" "Linux Programmer's Manual" 
.\"
.\" $Id: libipq.3,v 1.4 2001/10/16 16:58:25 jamesm Exp $
.\"
.\"     Copyright (c) 2000-2001 Netfilter Core Team
.\"
.\"     This program is free software; you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation; either version 2 of the License, or
.\"     (at your option) any later version.
.\"
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\"
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program; if not, write to the Free Software
.\"     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\" Japanese Version Copyright (c) 2003 Susumu ISHIZUKA
.\"         all rights reserved.
.\" Translated Tue Jun  6 19:25:23 JST 2003
.\"         by Susumu ISHIZUKA <szuka@isp.co.jp>
.\"
.\"WORD:	userspace	ユーザ空間
.\"WORD:	verdict		判断
.\"O .SH NAME
.SH 名前
libipq \- iptables userspace packet queuing library.
.\"O .SH SYNOPSIS
.SH 書式
.B #include <linux/netfilter.h>
.br
.B #include <libipq.h>
.\"O .SH DESCRIPTION
.SH 説明
.\"O libipq is a development library for iptables userspace packet queuing.
libipq は iptables を 使って ユーザ空間でパケット操作を
するためのライブラリである。
.SS Userspace Packet Queuing
.\"O Netfilter provides a mechanism for passing packets out of the stack for
.\"O queueing to userspace, then receiving these packets back into the kernel
.\"O with a verdict specifying what to do with the packets (such as ACCEPT
.\"O or DROP).  These packets may also be modified in userspace prior to
.\"O reinjection back into the kernel.
Netfilter は、ユーザ空間でパケット操作をするための機構を 
提供している。 この機構はプロトコルスタックからパケットを 
ユーザ空間に渡してキューイング(queuing) し、ユーザ空間で 
(ACCEPT や DROP といった) パケット処理の判断を行った後に
パケットをカーネルに戻している。 これらのパケットは、 
ユーザ空間で変更を加えられて、カーネルに返されることもある。 
.PP
.\"O For each supported protocol, a kernel module called a
.\"O .I queue handler
.\"O may register with Netfilter to perform the mechanics of passing
.\"O packets to and from userspace.
ユーザ空間とのパケットのやり取りのために
.I キューハンドラー (queue handler)
と呼ばれるカーネルモジュールが 
Netfilter に登録されている。 
キューハンドラーは、各プロトコルごとに 用意される。
.PP
.\"O The standard queue handler for IPv4 is ip_queue.  It is provided as an
.\"O experimental module with 2.4 kernels, and uses a Netlink socket for
.\"O kernel/userspace communication.
IPv4 での 標準のキューハンドラーは ip_queue である。 
2.4カーネルでは experimental モジュールとして提供され、
Netlink ソケットを使って、カーネルとユーザ空間との通信を
行っている。 
.PP
.\"O Once ip_queue is loaded, IP packets may be selected with iptables
.\"O and queued for userspace processing via the QUEUE target.  For example,
.\"O running the following commands:
ip_queue が、メモリ上にロードされると IP パケットは iptables で
フィルタリングされ QUEUE ターゲットによって ユーザ空間の 処理のために
キューイングされる。 例として 次の一連の コマンドが発行されると、
.PP
	# modprobe iptable_filter
.br	
	# modprobe ip_queue
.br	
	# iptables -A OUTPUT -p icmp -j QUEUE
.PP
.\"O will cause any locally generated ICMP packets (e.g. ping output) to
.\"O be sent to the ip_queue module, which will then attempt to deliver the
.\"O packets to a userspace application.  If no userspace application is waiting,
.\"O the packets will be dropped
ローカルホストから送信されたICMPパケット（pingの送信など）が
ip_queueモジュールに送られ、そこからパケットをユーザ空間の
アプリケーションに渡そうとする。 パケットを受け取る
アプリケーションがない場合は、パケットは破棄（drop）される。 
.PP
.\"O An application may receive and process these packets via libipq.
アプリケーションは、libipq を使うことでパケットを受信・
変更できる。 
.PP
.PP
.SS Libipq Overview
.\"O Libipq provides an API for communicating with ip_queue.  The following is
.\"O an overview of API usage, refer to individual man pages for more details
.\"O on each function.
libipq は、ip_queue と通信するための API を提供する。 
以下は、API の簡単な説明である。 関数の詳細は各 manpage を
参照すること。 
.\P
.\"O .B Initialisation
.B 初期化
.br
.\"O To initialise the library, call
.\"O .BR ipq_create_handle (3).
.\"O This will attempt to bind to the Netlink socket used by ip_queue and
.\"O return an opaque context handle for subsequent library calls.
初期化を行うには、
.BR ipq_create_handle (3)
を使用する。 
この関数は ip_queue が使用している Netlink ソケットを bind
し、この後のライブラリ関数が使用するコンテキストハンドルを
返す。 
.PP
.\"O .B Setting the Queue Mode
.B キューモード（queue mode）の設定
.br
.\"O .BR ipq_set_mode (3)
.\"O allows the application to specify whether packet metadata, or packet
.\"O payloads as well as metadata are copied to userspace.  It is also used to
.\"O initially notify ip_queue that an application is ready to receive queue
.\"O messages.
.BR ipq_set_mode (3)
は、ユーザ空間にパケットのメタデータだけを
コピーするのか、パケットのメタデータとペイロードの両方を
コピーするのか指定する。この関数はまた ip_queue に
アプリケーションがキューメッセージ (queue message)を受け
取る準備ができたことを通知する。 
.PP
.\"O .B Receiving Packets from the Queue
.B キューからパケットを受信する
.br
.\"O .BR ipq_read (3)
.\"O waits for queue messages to arrive from ip_queue and copies
.\"O them into a supplied buffer.
.\"O Queue messages may be
.\"O .I packet messages
.\"O or
.\"O .I error messages.
.BR ipq_read (3)
関数は ip_queue からのキューメッセージを
待って、バッファにコピーする。 キューメッセージは
.I パケット メッセージ
または
.I エラーメッセージ
のどちらか である。
.PP
.\"O The type of packet may be determined with
.\"O .BR ipq_message_type (3).
パケットのタイプは
.BR ipq_message_type (3)
で取得する。
.PP
.\"O If it's a packet message, the metadata and optional payload may be retrieved with
.\"O .BR ipq_get_packet (3).
パケットメッセージの場合は、メタデータとペイロードを
.BR ipq_get_packet (3)
関数で取得できる。 
.PP
.\"O To retrieve the value of an error message, use
.\"O .BR ipq_get_msgerr (3).
エラーメッセージの値を取得するには、
.BR ipq_get_msgerr (3)
を 使用する。
.PP
.\"O .B Issuing Verdicts on Packets
.B パケットの処理内容の発行
.br
.\"O To issue a verdict on a packet, and optionally return a modified version
.\"O of the packet to the kernel, call
.\"O .BR ipq_set_verdict (3).
パケットの処理を決定し、必要ならパケットに変更を加えて
カーネルに返す時には、
.BR ipq_set_verdict (3)
を使用する。
.PP
.\"O .B Error Handling
.B エラー処理
.br
.\"O An error string corresponding to the current value of the internal error
.\"O variable
.\"O .B ipq_errno
.\"O may be obtained with
.\"O .BR ipq_errstr (3).
現在のエラー状態を格納している変数
.B ipq_errno
に対応する
エラー文字列は
.BR ipq_errstr (3).
で取得できる。
.PP
.\"O For simple applications, calling
.\"O .BR ipq_perror (3)
.\"O will print the same message as
.\"O .BR ipq_errstr (3),
.\"O as well as the string corresponding to the global
.\"O .B errno
.\"O value (if set) to stderr.
単純なアプリケーションに使える関数として、
.BR ipq_perror (3)
は、
.BR ipq_errstr (3),
で返されるのと同じ文字列を標準出力 (stderr) に
出力する。 また、
.B errno
がセットされていれば
それに対応するエラー文字列も出力する。 
.PP
.\"O .B Cleaning Up
.B 後始末
.br
.\"O To free up the Netlink socket and destroy resources associated with
.\"O the context handle, call
.\"O .BR ipq_destroy_handle (3).
Netlink ソケットを解放し、コンテキストハンドルに関連付け
られたリソースを削除するには、
.BR ipq_destroy_handle (3)
関数を使用する。 
.\"O .SH SUMMARY
.SH まとめ
.TP 4
.BR ipq_create_handle (3)
.\"O Initialise library, return context handle.
は、ライブラリを初期化し、コンテキストハンドルを返す。
.TP
.BR ipq_set_mode (3)
.\"O Set the queue mode, to copy either packet metadata, or payloads
.\"O as well as metadata to userspace.
は、パケットのメタデータだけをコピーするか、ペイロードも
コピーするかの動作モードをセットする。
.TP
.BR ipq_read (3)
.\"O Wait for a queue message to arrive from ip_queue and read it into
.\"O a buffer.
ip_queue からのメッセージを待ち、受信するとバッファに
読み込む。
.TP
.BR ipq_message_type (3)
.\"O Determine message type in the buffer.
は、バッファされたメッセージのタイプを返す。
.TP
.BR ipq_get_packet (3)
.\"O Retrieve a packet message from the buffer.
は、バッファからメッセージを読む。
.TP
.BR ipq_get_msgerr (3)
.\"O Retrieve an error message from the buffer.
は、バッファからエラーメッセージを取得する。
.TP
.BR ipq_set_verdict (3)
.\"O Set a verdict on a packet, optionally replacing its contents.
は、パケットの判断を下す。内容を書き換えることもできる。
.TP
.BR ipq_errstr (3)
.\"O Return an error message corresponding to the internal ipq_errno variable.
は、内部変数 ipq_errno の値に応じたエラーメッセージを
返す。
.TP
.BR ipq_perror (3)
.\"O Helper function to print error messages to stderr.
は、エラーメッセージを標準出力（stderr）に表示する
ヘルパー関数である。
.TP
.BR ipq_destroy_handle (3)
.\"O Destroy context handle and associated resources.
は、コンテキストハンドルを破棄し、リソースを解放する。
.\"O .SH EXAMPLE
.SH 例
.\"O The following is an example of a simple application which receives
.\"O packets and issues NF_ACCEPT verdicts on each packet.
次のコードは、パケットを受け取って NF_ACCEPT の判断を返す単純な
アプリケーションの例である。 
.RS
.nf
/*
 * This code is GPL.
 */
#include <linux/netfilter.h>
#include <libipq.h>
#include <stdio.h>

#define BUFSIZE 2048 

static void die(struct ipq_handle *h)
{
	ipq_perror("passer");
	ipq_destroy_handle(h);
	exit(1);
}

int main(int argc, char **argv)
{
	int status;
	unsigned char buf[BUFSIZE];
	struct ipq_handle *h;
	
	h = ipq_create_handle(0);
	if (!h)
		die(h);
		
	status = ipq_set_mode(h, IPQ_COPY_PACKET, BUFSIZE);
	if (status < 0)
		die(h);
		
	do{
		status = ipq_read(h, buf, BUFSIZE, 0);
		if (status < 0)
			die(h);
			
		switch (ipq_message_type(buf)) {
			case NLMSG_ERROR:
				fprintf(stderr, "Received error message %d\\n",
				        ipq_get_msgerr(buf));
				break;
				
			case IPQM_PACKET: {
				ipq_packet_msg_t *m = ipq_get_packet(buf);
				
				status = ipq_set_verdict(h, m->packet_id,
				                         NF_ACCEPT, 0, NULL);
				if (status < 0)
					die(h);
				break;
			}
			
			default:
				fprintf(stderr, "Unknown message type!\\n");
				break;
		}
	} while (1);
	
	ipq_destroy_handle(h);
	return 0;
}
.RE
.fi
.PP
.\"O Pointers to more libipq application examples may be found in The
.\"O Netfilter FAQ.
libipq を使ったアプリケーションの例は
Netfilter FAQ にもある。 
.\"O .SH DIAGNOSTICS
.SH DIAGNOSTICS
.\"O For information about monitoring and tuning ip_queue, refer to the
.\"O Linux 2.4 Packet Filtering HOWTO.
ip_queue の監視とチューニングに関しては Linux 2.4 Packet
Filtering HOWTO を参照すること。 
.PP
.\"O If an application modifies a packet, it needs to also update any
.\"O checksums for the packet.  Typically, the kernel will silently discard
.\"O modified packets with invalid checksums. 
アプリケーションがパケットに変更を加えた時には、関連する
チェックサムも変更する必要がある。 変更されたパケットの
チェックサムが異常なときにはカーネルは黙って破棄 (silently discard) する。 
.\"O .SH SECURITY
.SH セキュリティー
.\"O Processes require CAP_NET_ADMIN capabilty to access the kernel ip_queue
.\"O module.  Such processes can potentially access and modify any IP packets
.\"O received, generated or forwarded by the kernel.
ip_queue カーネルモジュールにアクセスするプロセスは
CAP_NET_ADMIN 権限が必要である。 そのようなプロセスは、
潜在的にカーネルが受信 (送信、転送) する全ての IP パケットを
取得し変更する可能性がある。 
.\"O .SH TODO
.SH TODO
.\"O Per-handle
.\"O .B ipq_errno
.\"O values.
.B ipq_errno
をハンドルごとに用意する。 
.\"O .SH BUGS
.SH バグ
.\"O Probably.
あるかもしれない。 
.\"O .SH AUTHOR
.SH 著者
James Morris <jmorris@intercode.com.au>
.\"O .SH COPYRIGHT
.SH 著作権
Copyright (c) 2000-2001 Netfilter Core Team.
.PP
Distributed under the GNU General Public License.
.SH CREDITS
.\"O Joost Remijn implemented the
.\"O .B ipq_read
.\"O timeout feature, which appeared in the 1.2.4 release of iptables.
Joost Remijn は
.B ipq_read
のタイムアウトを実装した。 この機能は iptables の 1.2.4 から使用できる。 
.\"O .SH SEE ALSO
.SH 関連項目
.BR iptables (8),
.BR ipq_create_handle (3),
.BR ipq_destroy_handle (3),
.BR ipq_errstr (3),
.BR ipq_get_msgerr (3),
.BR ipq_get_packet (3),
.BR ipq_message_type (3),
.BR ipq_perror (3),
.BR ipq_read (3),
.BR ipq_set_mode (3),
.BR ipq_set_verdict (3).
.PP
.\"O The Netfilter home page at http://netfilter.samba.org/
.\"O which has links to The Networking Concepts HOWTO, The Linux 2.4 Packet
.\"O Filtering HOWTO, The Linux 2.4 NAT HOWTO, The Netfilter Hacking HOWTO,
.\"O The Netfilter FAQ and many other useful resources.
Netfilter のホームページは http://netfilter.samba.org/ にある。
The Networking Concepts HOWTO, The Linux 2.4 Packet
Filtering HOWTO, The Linux 2.4 NAT HOWTO, The Netfilter Hacking HOWTO,
The Netfilter FAQ などの有益な 情報がある。 
