.ds ve 1.8
.TH GDBM 3 5/19/99
.\" Japanese Version Copyright (c) 2000 Tsugikazu Shibata
.\"         all rights reserved.
.\" Translated Fri. August 29 23:32:00 JST 2000
.\"         by Tsugikazu Shibata <ts@tsden.org>
.\"O .SH NAME
.SH 名前
.\"O GDBM - The GNU database manager.  Includes \fBdbm\fR and \fBndbm\fR
.\"O compatability. (Version \*(ve.)
GDBM - GNUデータベース・マネージャ。\fBdbm\fR および \fBndbm\fR
互換機能を含む。 (Version \*(ve.)

.\"O .SH SYNOPSIS
.SH 書式
.B #include <gdbm.h>
.PP
.SM
.B extern gdbm_error
.br
.B gdbm_errno
.PP
.B extern char
.br
.B *gdbm_version
.PP
.B GDBM_FILE
.br
.B gdbm_open (name, block_size, read_write, mode, fatal_func)
.br
.B char * name;
.br
.B int block_size, read_write, mode;
.br
.B void (*fatal_func) ();
.PP
.B void
.br
.B gdbm_close (dbf)
.br
.B GDBM_FILE dbf;
.PP
.B int
.br
.B gdbm_store (dbf, key, content, flag)
.br
.B GDBM_FILE dbf;
.br
.B datum key, content;
.br
.B int flag;
.PP
.B datum
.br
.B gdbm_fetch (dbf, key)
.br
.B GDBM_FILE dbf;
.br
.B datum key;
.PP
.B int
.br
.B gdbm_delete (dbf, key)
.br
.B GDBM_FILE dbf;
.br
.B datum key;
.PP
.B datum
.br
.B gdbm_firstkey (dbf)
.br
.B GDBM_FILE dbf;
.PP
.B datum
.br
.B gdbm_nextkey (dbf, key)
.br
.B GDBM_FILE dbf;
.br
.B datum key;
.PP
.B int
.br
.B gdbm_reorganize (dbf)
.br
.B GDBM_FILE dbf;
.PP
.B void
.br
.B gdbm_sync (dbf)
.br
.B GDBM_FILE dbf;
.PP
.B int
.br
.B gdbm_exists (dbf, key)
.br
.B GDBM_FILE dbf;
.br
.B datum key;
.PP
.B char *
.br
.B gdbm_strerror (errno)
.br
.B gdbm_error errno;
.PP
.B int
.br
.B gdbm_setopt (dbf, option, value, size)
.br
.B GDBM_FILE dbf;
.br
.B int option;
.br
.B int *value;
.br
.B int size;
.PP
.B int
.br
.B gdbm_fdesc (dbf)
.br
.B GDBM_FILE dbf;
.PP
.PP
.B DBM Compatability routines:
.PP
.B #include <dbm.h>
.PP
.SM
.B int
.br
.B dbminit (name)
.br
.B char *name;
.PP
.B int
.br
.B store (key, content)
.br
.B datum key, content;
.PP
.B datum
.br
.B fetch (key)
.br
.B datum key;
.PP
.B int
.br
.B delete (key)
.br
.B datum key;
.PP
.B datum
.br
.B firstkey ()
.PP
.B datum
.br
.B nextkey (key)
.br
.B datum key;
.PP
.B int
.br
.B dbmclose ()
.PP
.PP
.B NDBM Compatability routines:
.PP
.B #include <ndbm.h>
.PP
.SM
.B DBM
.br
.B *dbm_open (name, flags, mode)
.br
.B char *name;
.br
.B int flags, mode;
.PP
.B void
.br
.B dbm_close (file)
.br
.B DBM *file;
.PP
.B datum
.br
.B dbm_fetch (file, key)
.br
.B DBM *file;
.br
.B datum key;
.PP
.B int
.br
.B dbm_store (file, key, content, flags)
.br
.B DBM *file;
.br
.B datum key, content;
.br
.B int flags;
.PP
.B int
.br
.B dbm_delete (file, key)
.br
.B DBM *file;
.br
.B datum key;
.PP
.B datum
.br
.B dbm_firstkey (file)
.br
.B DBM *file;
.PP
.B datum
.br
.B dbm_nextkey (file)
.br
.B DBM *file;
.PP
.B int
.br
.B dbm_error (file)
.br
.B DBM *file;
.PP
.B int
.br
.B dbm_clearerr (file)
.br
.B DBM *file;
.PP
.B int
.br
.B dbm_pagfno (file)
.br
.B DBM *file;
.PP
.B int
.br
.B dbm_dirfno (file)
.br
.B DBM *file;
.PP
.B int
.br
.B dbm_rdonly (file)
.br
.B DBM *file;


.\"O .SH DESCRIPTION
.SH 説明
.\"O GNU dbm is a library of routines that manages data files that contain
.\"O key/data pairs.
GNU dbm は、キーとデータのペアを含んだデータファイルを取り扱う
ルーチン群のライブラリである。
.\"O The access provided is that of storing, 
.\"O retrieval, and deletion by key and a non-sorted traversal of all
.\"O keys. 
.\"O A process is allowed to use multiple data files at the
.\"O same time.
提供されるアクセスとしては、キーによる格納、キーによる取り出し、
キーによる削除の他、すべてのキーに渡るソートされていない横断的な
アクセスがある。
一つのプロセスからは複数のデータファイルを同時に利用することができる。

.\"O 
.\"O A process that opens a gdbm file is designated as a "reader" or a
.\"O "writer".
.\"O Only one writer may open a gdbm file and many readers ma
.\"O open the file. 
gdbm ファイルをオープンするプロセスは、「リーダ」または「ライタ」
と呼ばれる。
1 つの gdbm ファイルをオープンできるライタは 1 つだけだが、
リーダは複数が 1 つの gdbm ファイルをオープンすることができる。

.\"O Readers and writers can not open the gdbm file at the
.\"O same time. The procedure for opening a gdbm file is:
リーダとライタは同時に同じファイルをオープンすることはできない。
gdbm ファイルをオープンする手続きは：

　  GDBM_FILE dbf;
 
   dbf = gdbm_open ( name, block_size, read_write, mode, fatal_func )

.\"O 
.\"O \fIName\fR is the name of the file (the complete name,
.\"O gdbm does not append any characters to this name). 
.\"O  \fIBlock_size\fR is the size of a single transfer from
.\"O disk to memory. 
\fIname\fR はファイルの名前である。(完全な名前、gdbm はこの名前に
文字列を付け加えるようなことはしない)
\fIblock_size\fR はディスクからメモリへ 1 回に転送されるサイズである。
.\"O This parameter is ignored unless the file is a new file. 
.\"O The minimum size is 512. 
このパラメータは、新しいファイルの場合以外は無視される。最小サイズ
は 512 である。
.\"O  If it is less than 512, dbm will use the stat block size 
.\"O for the file system.
512 よりも小さい場合には, gdbm はファイルシステムに対する stat
のブロックサイズを使用する。
.\"O \fIRead_write\fR can have one of the following values:
\fIread_write\fR には以下のいずれかの値を取る。
.br
.B GDBM_READER
.\"O reader
リーダ
.br
.B GDBM_WRITER
.\"O writer
ライタ
.br
.B GDBM_WRCREAT
.\"O writer - if database does not exist create new one
ライタ - データベースが存在しなければ作成する
.br
.B GDBM_NEWDB
.\"O writer - create new database regardless if one exists
ライタ - すでに存在しても新しいデータベースを作成する
.br
.\"O For the last three (writers of the database) the following may be added
.\"O added to \fIread_write\fR by bitwise or:
最後の 3 つについては (データベースのライタ) \fIread_write\fR に対して
以下をビットの OR により追加できる:
.B GDBM_SYNC
.\"O which causes all database operations to be synchronized to the disk, and
はすべてのデータベースの操作をディスクと同期する、また
.B GDBM_NOLOCK
.\"O which prevents the library from performing any locking on the database file.M
はデータベースファイルに関するライブラリからのロック動作を行わない。
.\"O The option
.\"O .B GDBM_FAST
.\"O is now obsolete, since gdbm defaults to no-sync mode.
オプション
.B GDBM_FAST
は gdbm の既定動作が no-sync モードになったためにもう使われなくなった。
.br
.\"O \fIMode\fR is the file mode (see \fBchmod(2)\fR and \fBopen(2)\fR)
.\"O  if the file is created. 
.\"O \fI(*Fatal_func) ()\fR is a function for dbm to call
.\"O if it detects a fatal error. The only parameter of this function
.\"O  is a string.
.\"O If the value of 0 is provided, gdbm will use a default function.
\fImode\fR はファイルのモードである (\fBchmod(2)\fR および \fBopen(2)\fR を
参照)。\fI(*fatal_func) ()\fR は dbm が致命的エラーを検出した場合に呼び出す
関数である。この関数への唯一のパラメータは文字列である。
値 0 が指定されると、gdbm はデフォルトの関数を使用する。

.\"O 
.\"O The return value \fIdbf\fR is the pointer needed by all other routines to
.\"O access that gdbm file.
.\"O  If the return is the NULL pointer, \fBgdbm_open\fR
.\"O was not successful.
返り値 \fIdbf\fR は、その gdbm ファイルにアクセスする他のすべてのルーチン
に必要なポインタである。 NULL ポインタが返った場合、\fBgdbm_open\fR は
成功しなかったことを示す。
.\"O  The errors can be found in \fIgdbm_errno\fR for gdbm
.\"O errors and in \fIerrno\fR for system errors.  (For error codes, see
.\"O gdbmerrno.h.)
.\"O 
gdbm のエラーは  \fIgdbm_errno\fR に、システムのエラーは \fIerrno\fR 
に格納される。(エラーコードについては gdbmerrno.h を参照)

.\"O In all of the following calls, the parameter \fIdbf\fR refers 
.\"O to the pointer returned from \fBgdbm_open\fR.
以下のすべてのコールにおいては、
パラメータ \fIdbf\fR は \fBgdbm_open\fR から
返ってきたポインタである。
.\"O 
.\"O It is important that every file opened is also closed.
.\"O This is needed to update the reader/writer count on the file. 
どんなファイルでもオープンしたものをクローズすることは重要である。
クローズはファイルに対するリーダ数／ライタ数を更新する。
.\"O This is done by:
.\"O 
.\"O   gdbm_close (dbf);
これは以下のようにして行う。

   gdbm_close (dbf);

.\"O The database is used by 3 primary routines.  The first stores data in the
.\"O database.
データベースは 3 つの主なルーチンによって利用できる。最初はデータを
データベースに格納するものである。

.\"O 
.\"O   ret = gdbm_store ( dbf, key, content, flag )
.\"O 

   ret = gdbm_store ( dbf, key, content, flag )


.\"O \fIDbf\fR is the pointer returned by \fBgdbm_open\fR.  \fIKey\fR is the
.\"O key data.  \fIContent\fR is the data to be associated with the \fIkey\fR.
\fIdbf\fR は \fBgdbm_open\fR から返ってきたポインタである。
\fIkey\fR はキーデータで、\fIcontent\fR は \fIkey\fR に関連付けられた
データである。
.\"O \fIFlag\fR can have one of the following values:
.\"O .br
.\"O .B GDBM_INSERT
\fIflag\fR は以下のいずれかの値を持つことができる。
.br
.B GDBM_INSERT
.\"O insert only, generate an error if key exists
挿入のみ。キーが存在すればエラーとなる。
.br
.B GDBM_REPLACE
.\"O replace contents if key exists.
キーが存在すれば内容を更新する。

.\"O 
.\"O If a reader calls \fBgdbm_store\fR, the return value will be  -1.
リーダが \fBgdbm_store\fR をコールした場合、返り値は -1 となる。
.\"O If called with GDBM_INSERT and \fIkey\fR is in the database, the return
.\"O value will be 1.  Otherwise, the return value is 0.
GDBM_INSERT が指定された時にデータベースに \fIkey\fR が存在すると、
返り値は 1 である。そうでなければ返り値は 0 である。

.\"O 
.\"O \fINOTICE: If you store data for a key that is already in the data base,
.\"O gdbm replaces the old data with the new data if called with GDBM_REPLACE.
\fI注意: 既にデータベースに存在するキーを指定して格納する場合、
GDBM_REPLACEで呼び出しているならば、gdbm は古いデータを
新しいデータで置き換える。
.\"O You do not get two data items for the same key and you do not get an
.\"O error from gdbm_store.
同じキーで 2 つのデータ・アイテムを得ることはできないし、
また gdbm_store がエラーを返すこともない。

.\"O 
.\"O NOTICE: The size in gdbm is not restricted like dbm or ndbm.  Your data
.\"O can be as large as you want.\fR
注意: gdbm のサイズは、dbm や ndbm と異なり制限されない。
データは必要なだけ大きくすることができる。
\fR

.\"O 
.\"O 
.\"O To search for some data:
.\"O 
.\"O   content = gdbm_fetch ( dbf, key )
データを検索するには、以下のようにする:

  content = gdbm_fetch ( dbf, key )

.\"O 
.\"O \fIDbf\fR is the pointer returned by \fBgdbm_open\fR.  \fIKey\fR is
.\"O the key data.
\fIdbf\fR は \fBgdbm_open\fR から返ってきたポインタである。
\fIkey\fR はキーデータである。

.\"O 
.\"O 
.\"O If the \fIdptr\fR element of the return value is NULL, no data was
.\"O found.
.\"O  Otherwise the return value is a pointer to the found data.
返り値の \fIdptr\fR が NULL の場合、データは見つからなかった。
見つかった場合はデータへのポインタが返る。
.\"O The storage space for the \fIdptr\fR element is allocated using
.\"O \fBmalloc(3C)\fR.
.\"O  \fBGdbm\fI does not automatically free this data.
\fIdptr\fR の記憶空間は \fBmalloc(3C)\fR により確保される。 
\fBgdbm\fI は自動的にこのデータを解放することはしない。
.\"O It is the programmer's responsibility to free this storage when it is
.\"O no longer needed.\fR
必要の無くなった領域を解放するのはプログラマの責任である。\fR

.\"O 
.\"O 
.\"O To search for some data, without retrieving it:
データを参照せずに、検索だけする場合には：

   ret = gdbm_exists ( dbf, key )

.\"O \fIDbf\fR is the pointer returned by \fBgdbm_open\fR.  \fIKey\fR is
.\"O the key data to search for.
\fIdbf\fR は \fBgdbm_open\fR から返ってきたポインタである。
\fIkey\fR は検索したいキーデータである。

.\"O 
.\"O If the \fIkey\fR is found within the database, the return value \fIret\fR
.\"O will be true.  If nothing appropiate is found, \fIret\fR will be false.
データベース内に \fIkey\fR が見つかれば、返り値 \fIret\fR は true である。
.\" If nothing appropiate is found, \fIret\fR will be false.
何も対応するものが見つからなければ \fIret\fR は false である。

.\"O This routine is useful for checking for the existance of a record,
.\"O without performing the memory allocation done by \fBgdbm_fetch\fR.
\fBgdbm_fetch\fR ではメモリ確保が行われるが、このルーチンはそれをしない
ので、レコードの存在をチェックをする時に役に立つ。

.\"O 
.\"O 
.\"O To remove some data from the database:
データベースからあるデータを削除する場合は、以下のようにする:

   ret = gdbm_delete ( dbf, key )

.\"O \fIDbf\fR is the pointer returned by \fBgdbm_open\fR.  \fIKey\fR is the
.\"O key data.
\fIdbf\fR は \fBgdbm_open\fR から返ってきたポインタである。\fIkey\fR は
削除したいキーデータである。

.\"O 
.\"O The return value is -1 if the item is not present or the requester is a reader.
.\"O The return value is 0 if there was a successful delete.
アイテムが存在しなかったり、要求したのがリーダだった場合、
返り値は -1 である。
削除に成功すれば返り値は 0 である。

.\"O 
.\"O 
.\"O The next two routines allow for accessing all items in the database. 
次の 2 つのルーチンは、データベース中のすべてのアイテムにアクセスできる。
.\"O This access is not key sequential, but it is guaranteed to visit 
.\"O every key in the database once.  (The order has to do with the 
.\"O hash values.)
アクセスはキー順ではないが、データベース内ですべてのキーに各 1 回
アクセスすることは保証されている。(アクセス順序はハッシュ値の順になる。)

   key = gdbm_firstkey ( dbf )

   nextkey = gdbm_nextkey ( dbf, key )

.\"O \fIDbf\fR is the pointer returned by \fBgdbm_open\fR. \fIKey\fR is the
.\"O key data.
\fIdbf\fR は \fBgdbm_open\fR から返ってきたポインタである。\fIkey\fR は
キーデータである。

.\"O 
.\"O The return values are both of type \fBdatum\fR.  If the \fIdptr\fR
.\"O element of the return value is NULL, there is no first key or next key.
返り値はどちらも \fBdatum\fR 型である。返り値の \fIdptr\fR 要素が NULL
の場合、最初のキーまたは次のキーがなかったことを示す。
.\"O Again notice that \fIdptr\fR points to data allocated by \fBmalloc(3C)\fR
.\"O and \fBgdbm\fR will not free it for you. 
返り値の \fIdptr\fR 要素が指しているのは \fBmalloc(3C)\fR
により確保されたデータであり、\fBgdbm\fR は free してはくれないことに
もう一度注意すること。

.\"O 
.\"O These functions were intended to visit the database in read-only algorithms,
.\"O for instance, to validate the database or similar operations.
これらの関数はデータベースをリードオンリーで参照することを意図していた。
たとえば、データベースの正当性を確認したりするような目的で。

.\"O 
.\"O File `visiting' is based on a `hash table'.  \fIgdbm_delete\fR re-arranges the
.\"O hash table to make sure that any collisions in the table do not leave some item
.\"O `un-findable'.  The original key order is NOT guaranteed to remain unchanged in
.\"O ALL instances.  It is possible that some key will not be visited if a loop like
.\"O the following is executed:
ファイルへの「参照」は「ハッシュ・テーブル」に基づいている。
\fIgdbm_delete\fR はハッシュ・テーブルを再構成して、「見つけられることのない」
アイテムがテーブルの中で放置されないように、すべての競合を確認する。
すべてのデータの実体に変更を加えなかったとしても、オリジナルのキーの
順序は保証されない。

.\" It is possible that some key will not be visited if a loop like
.\" the following is executed:
以下のループが実行された場合、いくつかのキーが見つけられ
ないことが起こり得る。


    key = gdbm_firstkey ( dbf );
    while ( key.dptr ) {
       nextkey = gdbm_nextkey ( dbf, key );
       if ( some condition ) {
          gdbm_delete ( dbf, key );
          free ( key.dptr );
       }
       key = nextkey;
    }

.\"O The following routine should be used very infrequently.

以下のルーチンは繰り返し使われるべきではない。

.\"O   
.\"O   ret = gdbm_reorganize ( dbf )

   ret = gdbm_reorganize ( dbf )

.\"O 
.\"O If you have had a lot of deletions and would like to shrink the space
.\"O used by the \fBgdbm\fR file, this routine will reorganize the database.
.\"O \fBGdbm\fR will not shorten the length of a \fBgdbm\fR file except by
.\"O using this reorganization.  (Deleted file space will be reused.)
もしあなたがたくさんの削除を行い、\fBgdbm\fR ファイルが使っている
スペースを小さくしたいと思うならば、このルーチンはデータベースの再構成を行う。
\fBgdbm\fR はこの再構成以外で \fBgdbm\fR が使っているファイルの大きさを
小さくすることは無い。(削除されたスペースは再利用される)

.\"O 
.\"O 
.\"O Unless your database was opened with the GDBM_SYNC flag, gdbm does not
.\"O wait for writes to be flushed to the disk before continuing.
.\"O The following routine can be used to guarantee that the database is
.\"O physically written to the disk file.
データベースが GDBM_SYNC フラグ付きで open されない限り、gdbm は次の動作を
継続する前に、write がディスクにフラッシュするのを待つようなことはしない。
次のルーチンはデータベースを物理的にディスクに書き出すことを保証する。
.\"O 
.\"O   gdbm_sync ( dbf )

   gdbm_sync ( dbf )

.\"O 
.\"O It will not return until the disk file state is syncronized with the
.\"O in-memory state of the database.
これはメインメモリの状態をディスクの状態と同期させるまでは戻って来ない。

.\"O 
.\"O 
.\"O To convert a \fBgdbm\fR error code into English text, use this routine:
\fBgdbm\fR のエラーコードを英文のテキストに変換するには、次のルーチン
を利用する。
.\"O 
.\"O   ret = gdbm_strerror ( errno )

   ret = gdbm_strerror ( errno )

.\"O 
.\"O Where \fIerrno\fR is of type \fIgdbm_error\fR, usually the global
.\"O variable \fIgdbm_errno\fR.  The appropiate phrase is returned.

ここで \fIerrno\fR は \fIgdbm_error\fR 型であり、通常はグローバル変数
の \fIgdbm_errno\fR である。対応するフレーズが返ってくる。

.\"O 
.\"O 
.\"O \fBGdbm\fR now supports the ability to set certain options on an
.\"O already open database.
\fBgdbm\fR は既に open されているファイルに対するオプションを設定できる
機能をサポートしている。

   ret = gdbm_setopt ( dbf, option, value, size )

.\"O Where \fIdbf\fR is the return value from a previous call to \fBgdbm_open\fR,
.\"O and \fIoption\fR specifies which option to set.  The valid options are
.\"O currently:
ここで、\fIdbf\fR は直前の \fBgdbm_open\fR の返り値であり、
\fIoption\fR は設定したいオプションを指定する。現在の正しいオプションは：

.\"O 
.\"O   \fBGDBM_CACHESIZE\fR - Set the size of the internal bucket
.\"O   cache. This option may only be set once on each \fIGDBM_FILE\fR
.\"O   descriptor, and is set automatically to 100 upon the first
.\"O   access to the database.
\fBGDBM_CACHESIZE\fR - 内部の bucket キャッシュのサイズを指定する。
このオプションは \fIGDBM_FILE\fR のディスクリプタに一度だけ設定でき、
データベースの最初のアクセス時に自動的に 100 が設定される。

.\"O 
.\"O   \fBGDBM_FASTMODE\fR - Set \fBfast mode\fR to either on or off.  This
.\"O   allows \fBfast mode\fR to be toggled on an already open and
.\"O   active database. \fIvalue\fR (see below) should be set to either
.\"O   TRUE or FALSE.  \fIThis option is now obsolete.\fR
\fBGDBM_FASTMODE\fR - \fBfast mode\fR の on, off を指定する。
\fBfast mode\fR はすでにオープンされていて、アクティブなデータベースに
対してトグル (on, off) できる。\fIvalue\fR (以下参照) は TRUE か FALSE 
が設定できる。このオプションはもう使われない。

.\"O 
.\"O   \fBGDBM_SYNCMODE\fR - Turn on or off file system synchronization operations.
.\"O   This setting defaults to off; \fIvalue\fR (see below) should be set to either
.\"O   TRUE or FALSE.
\fBGDBM_SYNCMODE\fR - ファイルシステムの同期処理を on, off する。この
設定のデフォルトは off である。\fIvalue\fR (以下参照) は TRUE か FALSE 
を指定する。

.\"O 
.\"O   \fBGDBM_CENTFREE\fR - Set \fBcentral free block pool\fR to either on or off.
.\"O   The default is off, which is how previous versions of \fBGdbm\fR
.\"O   handled free blocks. If set, this option causes all subsequent free
.\"O   blocks to be placed in the \fBglobal\fR pool, allowing (in thoery)
.\"O   more file space to be reused more quickly. \fIvalue\fR (see below) should
.\"O   be set to either TRUE or FALSE.
.\"O   \fINOTICE: This feature is still under study.\fR
\fBGDBM_CENTFREE\fR - \fBcentral フリーブロックプール\fR を on, off する。
デフォルトは off であり、これは以前のバージョンの \fBgdbm\fR のフリー
ブロックの取り扱いと同じである。もし、設定されると、このオプションはそ
の後はフリーブロックはグローバルプールにおかれ、(理論的には) より多くの
ファイルスペースがより早く再利用されるようになる。
\fIvalue\fR (以下参照) は TRUE か FALSE を設定すべきである。
注意：この機能はまだ検討中である。

.\"O 
.\"O   \fBGDBM_COALESCEBLKS\fR - Set \fBfree block merging\fR to either on or off.
.\"O   The default is off, which is how previous versions of \fBGdbm\fR
.\"O   handled free blocks. If set, this option causes adjacent free blocks
.\"O   to be merged. This can become a CPU expensive process with time, though,
.\"O   especially if used in conjunction with \fBGDBM_CENTFREE\fR. \fIvalue\fR
.\"O   (see below) should be set to either TRUE or FALSE.
.\"O   \fINOTICE: This feature is still under study.\fR
\fBGDBM_COALESCEBLKS\fR - フリーブロックマージングの on, off を設定
する。デフォルトは off で前のバージョンの \fBgdbm\fR のフリーブロック
の扱いと同じである。もし、設定されるとこのオプションは、付近にあるフリー
ブロックをマージする。これは 特に\fBGDBM_CENTFREE\fR と一緒に使われた
としても 時間と CPU のかかる処理になる。\fIvalue\fR (以下参照) は TRUE 
か FALSE を設定するべきである。
注意：この機能はまだ検討中である。

.\"O 
.\"O \fIvalue\fR is the value to set \fIoption\fR to, specified as an integer
.\"O pointer.  \fIsize\fR is the size of the data pointed to by \fIvalue\fR.
.\"O The return value will be -1 upon failure, or 0 upon success.  The global
.\"O variable \fIgdbm_errno\fR will be set upon failure.
\fIvalue\fR は \fIoption\fR に設定する値であり、integer へのポインタ
である。 \fIsize\fR は \fIvalue\fR によってポイントされるデータの
サイズである。返り値は 失敗した場合 -1 になり、成功したら 0 になる。
失敗の場合、グローバル変数の \fIgdbm_errno\fR には値が設定される。

.\"O 
.\"O For instance, to set a database to use a cache of 10, after opening it
.\"O with \fBgdbm_open\fR, but prior to accessing it in any way, the following
.\"O code could be used:
例えば、\fBgdbm_open\fR でオープンしたデータベースをアクセスする前に、
キャッシュとして 10 を使うように設定する場合、以下のコードが利用できる：

   int value = 10;

   ret = gdbm_setopt( dbf, GDBM_CACHESIZE, &value, sizeof(int));


.\"O If the database was opened with the \fBGDBM_NOLOCK\fR flag, the user may
.\"O wish to perform their own file locking on the database file in order to
.\"O prevent multiple writers operating on the same file simultaneously.
もしデータベースが \fBGDBM_NOLOCK\fR フラグ付きでオープンされた場合、
ユーザはデータベースに対して、例えば複数のライタ操作を同一のファイル
に対して行うような、自分の独自のファイルロッキングを使うことができる、

.\"O 
.\"O In order to support this, the \fIgdbm_fdesc\fR routine is provided.
.\"O 
.\"O   ret = gdbm_fdesc ( dbf )
.\"O 
.\"O Where \fIdbf\fR is the return value from a previous call to \fBgdbm_open\fR.
.\"O The return value will be the file descriptor of the database.
これをサポートするため、\fIgdbm_fdesc\fR ルーチンが提供される。

   ret = gdbm_fdesc ( dbf )

ここで  \fIdbf\fR は以前の \fBgdbm_open\fR の返り値である。
返り値はデータベースのファイルディスクリプタである。

.\"O 
.\"O The following two external variables may be useful:
.\"O 
.\"O \fIgdbm_errno\fR is the variable that contains more information about
.\"O gdbm errors.  (gdbm.h has the definitions of the error values and
.\"O defines gdbm_errno as an external variable.)
.\"O .br
.\"O \fIgdbm_version\fR is the string containing the version information.

以下の 2 つの外部変数は役に立つことだろう。
\fIgdbm_errno\fR は gdbm のエラーに関するより詳しい情報を持つ。
(gdbm.h はエラー値の定義と gdbm_errno を外部変数とする定義を持つ)
.br
\fIgdbm_version\fR はバージョン情報の文字列を持つ。


.\"O 
.\"O 
.\"O There are a few more things of interest.  First, \fBgdbm\fR files are
.\"O not "sparse".  You can copy them with the UNIX \fBcp(1)\fR command and
.\"O they will not expand in the copying process.  Also, there is a
.\"O compatibility mode for use with programs that already use UNIX
.\"O \fBdbm\fR.  In this compatibility mode, no \fRgdbm\fR file pointer is
.\"O required by the programmer, and only one file may be opened at a time.
.\"O All users in compatibility mode are assumed to be writers.  If the
.\"O \fBgdbm\fR file is a read only, it will fail as a writer, but will
.\"O also try to open it as a reader.  All returned pointers in datum
.\"O structures point to data that \fBgdbm\fR WILL free.  They should be
.\"O treated as static pointers (as standard UNIX \fBdbm\fR does).
もう少し興味深いことが幾つかある。まず \fBgdbm\fR は「隙間のある」
ファイルでは無いということである。あなたはこのファイルを UNIX の
\fBcp(1)\fR コマンドによってコピーすることが可能で、そのコピー処理の間
にファイルサイズが拡張されるようなことはない。さらに、UNIX ですでに使
われている \fBdbm\fR のコンパチブルモードが存在する。このコンパチブル
モードでは、\fRgdbm\fR のファイルポインタはプログラマに取って必要では
なく、一度には 1 つのファイルだけがオープンされる。コンパチブルモード
全ての利用者はライタと見なされる。もし、\fBgdbm\fR ファイルがリード
オンリーならば、ライタとしては失敗し、リーダとしてオープンし直しを
試みる。datum 構造体のすべてのポインタは、\fBgdbm\fR が解放するであろう
データを指す。これらは (標準的な UNIX　の \fBdbm\fR がするように) 
静的ポインタとして扱う必要がある。


.\"O 
.\"O 
.\"O .SH LINKING
.\"O This library is accessed by specifying \fI-lgdbm\fR as the last
.\"O parameter to the compile line, e.g.:

.SH リンク
このライブラリはコンパイル行の最後のパラメータとして \fI-lgdbm\fR を
指定することで利用される。

.sp
	gcc -o prog prog.c -lgdbm
.\"O 
.\"O 
.\"O .SH BUGS
.SH バグ


.\"O 
.\"O .SH "SEE ALSO"
.\"O dbm, ndbm
.SH 関連項目
dbm, ndbm

.\"O .SH AUTHOR
.SH 著者

by Philip A. Nelson and Jason Downs.
Copyright (C) 1990 - 1999 Free Software Foundation, Inc.
 
GDBM is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.
 
GDBM is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with GDBM; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
You may contact the original author by:
.br
   e-mail:  phil@cs.wwu.edu
.br
  us-mail:  Philip A. Nelson
.br
Computer Science Department
.br
Western Washington University
.br
Bellingham, WA 98226
 
You may contact the current maintainer by:
.br
   e-mail:  downsj@downsj.com
