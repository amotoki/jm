.\" Copyright (c) 1996 Free Software Foundation, Inc.
.\" This program is distributed according to the Gnu General Public License.
.\" See the file COPYING in the kernel source directory.
.\" $Id: insmod.8,v 1.10 2004/07/30 13:11:10 nakano Exp $
.\"
.\" Translated Sun Aug 15 10:54:37 JST 1999
.\"         by FUJIWARA Teruyoshi <fujiwara@linux.or.jp>
.\" Updated Thu 12 Oct 2000 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Sun 28 Jan 2001 by Kentaro Shirakata <argrath@ub32.org>
.\"
.\" WORD: persistent data	永続データ
.\" WORD: prefix		プレフィックス
.\"
.TH INSMOD 8 "October 2, 2001" Linux "Linux Module Support"
.\"O .SH NAME
.\"O insmod \- install loadable kernel module
.SH 名前
insmod \- ローダブルカーネルモジュールをインストールする
.hy 0
.\"O .SH SYNOPSIS
.SH 書式
.B insmod
[\-fhkLmnpqrsSvVxXyY] [\-e\ persist_name] [\-o\ module_name]
[\-O\ blob_name] [\-P\ prefix] module [\ symbol=value\ ...\ ]
.\"O .SH DESCRIPTION
.SH 説明
.\"O .B insmod
.\"O installs a loadable module in the running kernel.
.B insmod
は実行中のカーネルにローダブルモジュールをインストールする。
.PP
.\"O .B insmod
.\"O tries to link a module into the running kernel by resolving all symbols
.\"O from the kernel's exported symbol table.
.B insmod
は実行中のカーネルにモジュールをリンクし、
カーネルがエクスポートしているシンボルテーブルにある
全てのシンボルを解決しようとする。
.PP
.\"O If the module file name is given without directories or extension,
.\"O .B insmod
.\"O will search for the module in some common default directories.
.\"O The environment variable MODPATH can be used to override this default.
.\"O If a module configuration file such as /etc/modules.conf exists,
.\"O it will override the paths defined in MODPATH.
ディレクトリや拡張子なしでモジュールファイル名を与えると、
.B insmod
は標準のデフォルトディレクトリ(複数)からモジュールを探す。環境変数
MODPATH を使って、このデフォルト値を上書きすることができる。
/etc/modules.conf のようなモジュール設定ファイルがあれば、
こちらの内容が MODPATH での指定を上書きする。
.\"O .br
.PP
.\"O The environment variable MODULECONF can also be used to select a
.\"O different configuration file from the default /etc/modules.conf (or
.\"O /etc/conf.modules (deprecated)).
.\"O This environment variable will override all the definitions above.
環境変数 MODULECONF によって、 /etc/modules.conf
(あるいは /etc/conf.modules (使わないほうが良い))
以外の設定ファイルを指定することもできる。
この環境変数は、上記の指定すべてより優先される。
.\"O .SS OPTIONS
.SS オプション
.TP
.I "-f --force"
.\"O Attempt load the module even if the version of the running kernel and
.\"O the version of the kernel for which the module was compiled do not match.
.\"O This only overrides the kernel version check, it has no effect on
.\"O symbol name checks.  If the symbol names in the module do not match the
.\"O kernel then there is no way to force
.\"O .I insmod
.\"O to load the module.
実行中のカーネルのバージョンと、
モジュールに組み込まれているカーネルの対象バージョンが異なっても、
モジュールのロードを試みる。
これはカーネルバージョンチェックだけを無効にし、
シンボル名チェックには何の影響も与えない。
モジュールのシンボル名がカーネルのものと一致しない場合、
.I insmod
に強制的にモジュールをロードさせる方法はない。
.TP
.I "-h --help"
.\"O Print the help text.
ヘルプ文章を表示する。
.TP
.I "-k --autoclean"
.\"O Set the auto-clean flag on the module.  This flag will be used by
.\"O \fBkerneld\fP(8) to remove modules that have not been used in some
.\"O period of time \(em usually one minute.
モジュールの auto-clean フラグを設定する。このフラグは
\fBkerneld\fP(8) が使用し、
一定期間(普通は 1 分)使われなかったモジュールを削除する。
.TP
.I "-L --lock"
.\"O Use \fBflock\fR(2) to prevent simultaneous loads of the same module.
同じモジュールを同時にロードすることを防ぐために、\fBflock\fR(2) を用いる。
.TP
.I "-m --map"
.\"O Output a load map on stdout, making it easier to debug the module in
.\"O the event of a kernel panic.
ロード時のメモリマップを標準出力に出力する。これにより、
カーネルパニックの際のモジュールのデバッグが容易になる。
より詳細なデバッグを可能にする。
デフォルトでは ksymoops シンボルを定義する。
このオプションは \-X/\-x オプションとは独立である。
.\"O .TP
.\"O .I ""
.sp
.\"O ksymoops symbols add approximately 260 bytes per loaded module.  Unless
.\"O you are really short on kernel space and are trying to reduce ksyms to
.\"O its minimum size, take the default and get more accurate Oops
.\"O debugging.
ksymoops シンボルは、各ローダブルモジュールごとに、
約 260 バイトを余分に必要とする。カーネル空間がキツキツで、
ksyms を最小にしたいような場合を除き、
デフォルトのままにして詳しい Oops デバッグを有効にするほうが良い。
.TP
.I "-o \fRmodule_name\fI --name\fR=module_name\fI"
.\"O Explicitly name the module, rather than deriving the name from the
.\"O base name of the source object file.
モジュールに明示的に名前をつける。
通常はロードするオブジェクトファイルの
basename に基づいた名前が用いられる。
.TP
.I "-O \fRblob_name\fI --blob\fR=blob_name\fI"
.\"O Save the binary object in
.\"O .IR blob_name .
バイナリオブジェクトを
.I blob_name
のファイル名で保存する。
.\"O The result is a binary blob (no ELF headers) showing exactly what is
.\"O loaded into the kernel, after section manipulation and relocation.
このファイルは カーネルにロードされ、セクション操作と再配置が行われた後の
状態を正確に表しているバイナリ blob (ELF ヘッダなし)である。
.\"O Option
.\"O .I -m
.\"O is recommended to get a map of the object.
オブジェクトのマッピング情報を得るためには
.I -m
オプションが推奨される。
.TP
.I "-P \fRprefix\fI --prefix\fR=prefix\fI"
.\"O This option can be used with versioned modules for an SMP or bigmem
.\"O kernel, since such modules have an extra prefix added in their symbol
.\"O names.
このオプションは SMP カーネルや bigmem カーネル向けの、
バージョン付きモジュールを使うときに利用できる。
これらのモジュールには、シンボル名に余分な prefix がつくからである。
.\"O If the kernel was built with symbol versions then
.\"O .I insmod
.\"O will automatically extract the prefix from the definition of
.\"O "get_module_symbol" or "inter_module_get", one of which must exist in
.\"O any kernel that supports modules.  If the kernel has no symbol versions
.\"O but the module was built with symbol versions then the user must supply
.\"O \-P.
カーネルがシンボルバージョンつきでビルドされると、
insmod は自動的に prefix を "get_module_symbol" か "inter_module_get" の定義から取得する
(モジュールをサポートする全てのカーネルにはこのどちらかが存在しなければならない)。
カーネルがシンボルバージョンを持たず、
しかしモジュールがシンボルバージョン付きでビルドされた場合は、
ユーザーは \-P を指定する必要がある。
.TP
.I "-e \fRpersist_name\fI --persist\fR=persist_name\fI"
.\"O Specifies where any persistent data for the module is read from on load
.\"O and written to when this instantiantion of the module is unloaded.
.\"O This option is silently ignored if the module has no persistent data.
モジュールの永続データを保存するファイル名を指定する。
これはモジュールがロードされた時に読み込まれ、
モジュールの実体がアンロードされた時に書き込まれる。
モジュールに永続データがない場合はこのオプションは暗黙に無視される。
.\"O Persistent data is only read by
.\"O .I insmod
.\"O if this option is present, by default
.\"O .I insmod
.\"O does not process persistent data.
永続データは
.I insmod
にこのオプションが指定された場合にのみ読み込まれる。
デフォルトでは
.I insmod
は永続データを処理しない。
.\"O As a shorthand form,
.\"O .I -e
.\"O "" (an empty string) is interpreted by
.\"O .I insmod
.\"O as the value of
.\"O .I persistdir
.\"O (see
.\"O .BR modules.conf (5))
.\"O followed by the filename of the module, relative to the module search
.\"O path it was found in, minus any trailing \'.gz', \'.o' and \'.mod'.  If
.\"O you specify
.\"O .IR persistdir =
.\"O (i.e. persistdir is an empty field) then this shorthand form is
.\"O silently ignored.
省略記法として
.I -e
"" (空文字列) が指定されると、
.I insmod
は
.I persistdir
の値(
.BR modules.conf (5)
参照)の後ろに、モジュールのファイル名から末尾の \'.gz', \'.o' and \'.mod' を
取ったもの(そのモジュールが見つかったモジュール検索パスからの相対パス)が
指定されたものと解釈する。
.IR persistdir =
(つまり persistdir に 空フィールド)が指定されていると、
省略記法は暗黙に無視される。
.\"O .SS "MODULE PARAMETERS"
.SS モジュールのパラメータ
.\"O Some modules accept load-time parameters to customize their operation.
.\"O These parameters are often I/O port and IRQ numbers that vary from
.\"O machine to machine and cannot be determined from the hardware.
一部のモジュールではロード時にパラメータを指定して、
動作を変えることができる。
このようなパラメータは I/O ポートや IRQ 番号であることが多い。
これらの数値はマシンごとに異なり、
しかもハードウェアから求めることができないからである。
.PP
.\"O In modules built for 2.0 series kernels, any integer or character pointer
.\"O symbol may be treated as a parameter and modified.  Beginning in the
.\"O 2.1 series kernels, symbols are explicitly marked as parameters so that
.\"O only specific values may be changed.  Furthermore type information is
.\"O provided for checking the values provided at load time.
2.0 系列のカーネル用に構築したモジュールでは、
全ての整数と文字ポインタシンボルはパラメータとして扱われ、
従ってその内容は変更されうる。
2.1 系列のカーネルからは、特定の値だけが変更されるように、
シンボルにはパラメータかどうかの印が明示的に付けられる。
また、ロード時に与えられた値をチェックするために、
追加の型情報が与えられる。
.PP
.\"O In the case of integers, all values may be in decimal, octal or
.\"O hexadecimal a la C: 17, 021 or 0x11.  Array elements are specified
.\"O sequence separated by commas; elements can be skipped by omitting
.\"O the value.
整数の場合には、全ての値は 10 進値、8 進値, 16 進値で
C 言語と同じように指定できる (17, 021, 0x11 等)。
配列の要素は、値をコンマで区切って並べることにより指定する。
値を省略することにより、要素を飛ばすことができる。
.PP
.\"O In 2.0 series modules, values that do not begin with a number are
.\"O considered strings.  Beginning in 2.1, the parameter's type information
.\"O indicates whether to interpret the value as a string.  If the value
.\"O begins with double-quotes (\fI"\fP), the string is interpreted as
.\"O in C, escape sequences and all.  Do note that from the shell prompt,
.\"O the quotes themselves may need to be protected from shell interpretation.
2.0 系列のモジュールでは、数字で始まらない値は文字列と解釈される。2.1
以降では、値を文字列と解釈するかどうかはパラメータの型情報によって判断する。
値が二重引用符(\fI"\fP)で始まる場合は、
エスケープシーケンスも含めて全て C 言語と同じように文字列として解釈される。
シェルのプロンプトで使う場合にはクォート自体もシェルが解釈するため、
保護しなければならない点に注意すること。
.\"O .SS "GPL LICENSED MODULES AND SYMBOLS"
.SS GPL ライセンスのモジュールとシンボル
.\"O Starting with kernel 2.4.10, modules should have a license string,
.\"O defined using MODULE_LICENSE().  Several strings are recognised as
.\"O being GPL compatible, any other license string or no license at all
.\"O means that the module is treated as proprietary.  See
.\"O include/linux/module.h for a list of GPL compatible license strings.
カーネル 2.4.10 からモジュールはライセンス文を含むことになり、
MODULE_LICENSE() によって定義されることになった。
いくつかの文字列は GPL 互換であると認識される。
それ以外のライセンス文字列だったり、そもそもライセンスがない場合は、
そのモジュールはプロプラエタリなものとして扱われる。
GPL 互換とされるライセンス文字列については
include/linux/module.h を参照すること。
.PP
.\"O If the kernel supports the
.\"O .I /proc/sys/kernel/tainted flag
.\"O then
.\"O .I insmod
.\"O will OR the tainted flag with '1' when loading a module without a GPL
.\"O license.  A warning is issued if the kernel supports tainting and a
.\"O module is loaded without a license; a warning is always issued for
.\"O modules which have a MODULE_LICENSE() that is not GPL compatible, even
.\"O on older kernels that do not support tainting.  This minimizes warnings
.\"O when a new modutils is used on older kernels.
カーネルが
.I /proc/sys/kernel/tainted flag
をサポートする場合は、
.I insmod
は GPL ライセンスを持たないモジュールのロード時に、
tainted (汚染) フラグを '1' と OR する。
カーネルが tainting をサポートしていると、
ライセンスのないモジュールがロードされる際には警告が発せられる。
警告は GPL 互換でない MODULE_LICENSE() を持つモジュールに対しては
(tainting をサポートしていない古いカーネルでも)、
常に警告が発せられる。
これによって、新しいモジュールが古いカーネルで利用されるときも、
警告は最小限になる。
.PP
.\"O .I insmod\ -f
.\"O (force) mode will OR the tainted flag with '2' on kernels
.\"O that support tainting, it always issues a warning.
.I insmod\ -f
(強制) モードでは、tainting をサポートするカーネルなら
tainted フラグが '2' と OR され、常に警告が発せられる。
.PP
.\"O Some kernel developers require that symbols exported by their code must
.\"O only be used by modules with a GPL compatible license.  These symbols
.\"O are exported by EXPORT_SYMBOL_GPL instead of the normal EXPORT_SYMBOL.
.\"O GPL only symbols exported by the kernel and by other modules are only
.\"O visible to modules with a GPL compatible license, these symbols appear
.\"O in /proc/ksyms with a prefix of 'GPLONLY_'.
.\"O .I insmod
.\"O ignores the GPLONLY_ prefix on symbols while loading a GPL licensed
.\"O module so the module just refers to the normal symbol name, without the
.\"O prefix.  GPL only symbols are not made available to modules without a
.\"O GPL compatible license, this includes  modules with no license at all.
カーネル開発者の中には、彼らのコードがエクスポートするシンボルは、
GPL 互換なライセンスのモジュールからしか利用できないようにしたい、
と考えている人たちがいる。これらのシンボルは
EXPOET_SYMBOL の代わりに EXPORT_SYMBOL_GPL でエクスポートされる。
カーネルや、別のモジュールによってエクスポートされた
GPL オンリーのシンボルは、GPL 互換なライセンスのモジュールからしか見えない。
これらのシンボルには、
/proc/ksyms において 'GPLONLY_' というプレフィックスが付く。
.I insmod
は GPL ライセンスのモジュールをロードするときは、
シンボルの 'GPLONLY_' プレフィックスを無視し、
通常のシンボル名の部分だけを参照する。
GPL オンリーのシンボルは
GPL 互換なライセンスを持たないモジュールに対しては利用可能とならない。
ライセンスを全く持たないモジュールに対しても同様である。
.\"O .SS "KSYMOOPS ASSISTANCE"
.SS KSYMOOPS 支援
.\"O To assist with debugging of kernel Oops when using modules, insmod
.\"O defaults to adding some symbols to ksyms, see the \fB-Y\fP option.
.\"O These symbols start with \fB__insmod_\fP\fImodulename\fP\fB_\fP.  The
.\"O \fImodulename\fP is required to make the symbols unique, it is legal to
.\"O load the same object more than once under different module names.
.\"O Currently defined symbols are
モジュール利用時のカーネル Oops のデバッグを支援するため、
insmod はデフォルトではいくつかのシンボルを ksyms に追加する
.RB ( \-Y
オプションの説明を見よ)。
これらのシンボルの名前は
.BI __insmod_ modulename _
で始まる。
.I modulename
はシンボルを他と重ならないようにするために必要である。
同じオブジェクトを、別のモジュール名で複数回ロードするのは許されている。
現在定義されているシンボルは
.\"O .PP
.sp
.nf
__insmod_\fImodulename\fP_O\fIobjectfile\fP_M\fImtime\fP_V\fIversion\fP
.fi
.sp
.\"O .PP
.\"O \fIobjectfile\fP is the name of the file that the object was loaded
.\"O from.  This ensures that ksymoops can match the code to the correct
.\"O object.  \fImtime\fP is the last modified timestamp on that file in
.\"O hex, zero if stat failed.  \fIversion\fP is the kernel version that
.\"O the module was compiled for, -1 if no version is available.  The
.\"O _O symbol has the same start address as the module header.
.I objectfile
は、オブジェクトのロード元のファイルの名前である。
これによって
ksymoops がコードを正しいオブジェクトにマッチさせることが可能となる。
.I mtime
はそのファイルの最終修正タイムスタンプを 16 進で表したものである。
stat に失敗すると 0 になる。
.I version
はモジュールのコンパイル時に指定されたカーネルのバージョンで、
バージョンが取得できなければ \-1 となる。
.\"NAKANO ちょっと意訳気味ですけれども。
シンボル _O はモジュールヘッダと同じスタートアドレスになる。
.\"O .PP
.sp
.nf
__insmod_\fImodulename\fP_S\fIsectionname\fP_L\fIlength\fP
.fi
.sp
.\"O .PP
.\"O This symbol appears at the start of selected ELF sections,
.\"O currently .text, .rodata, .data and .bss.  It only appears if the
.\"O section has a non-zero size.  \fIsectionname\fP is the name of the ELF
.\"O section, \fIlength\fP is the length of the section in decimal.  These
.\"O symbols help ksymoops map addresses to sections when no symbols are
.\"O available.
このシンボルは指定された ELF セクションの先頭に現れる。
現在は .text, .rodata, .data, .bss である。
これが現れるのは、セクションの長さが 0 以上の場合だけである。
.I sectionname
は ELF セクションの名前、
.I length
は各セクションの長さの 10 進表記である。
これらのシンボルにより、 ksymoops はシンボルが使えない場合でも
アドレスをセクションにマップできるようになる。
.\"O .PP
.sp
.nf
__insmod_\fImodulename\fP_P\fIpersistent_filename\fP
.fi
.sp
.\"O .PP
.\"O Only created by insmod if the module has one or more parameters that
.\"O are marked as persistent data and a filename to save persistent data
.\"O (see
.\"O .I -e
.\"O above) is available.
モジュールが永続データとしてマークされたパラメータを持ち、
永続データを保存するファイル名が有効な場合 (上述の
.I -e
参照) にのみ、insmod によって作成される。
.PP
.\"O The other problem with debugging kernel Oops in modules is that the
.\"O contents of /proc/ksyms and /proc/modules can change between the Oops
.\"O and when you process the log file.  To help overcome this problem, if
.\"O directory /var/log/ksymoops exists then insmod and rmmod will
.\"O automatically copy /proc/ksyms and /proc/modules to /var/log/ksymoops
.\"O with a prefix of `date\ +%Y%m%d%H%M%S`.
.\"O The system administrator can tell ksymoops which snapshot files to use
.\"O when debugging an Oops.  There is no switch to disable this automatic
.\"O copy, if you do not want it to occur, do not create /var/log/ksymoops.
.\"O If that directory exists, it should be owned by root and be mode 644 or
.\"O 600 and you should run this script every day or so.  The script below
.\"O is installed as insmod_ksymoops_clean.
モジュールにおけるカーネル Oops のデバッグにおける別の問題として、
/proc/ksyms と /proc/modules の内容が Oops とログファイル処理の間で
変わってしまう可能性がある。
この問題の処理を助けるため、
/var/log/ksymoops があると、insmod と rmmod は自動的に
/proc/ksyms と /proc/modules を /var/log/ksymoops
に `date\ +%Y%m%d%H%M%S` の prefix を付けてコピーする。
システム管理者は ksymoops に対して、
Oops のデバッグ時にどのスナップショットファイルを利用するか伝えることができる。
この自動コピーを無効にするスイッチは存在しない。
これを望まない場合は、 /var/log/ksymoops を作ってはならない。
このディレクトリを置くときには、所有者は root とし、
モードは 644 または 600 にして、
以下のスクリプトを一日一回程度実行すると良い。
このスクリプトは insmod_ksymoops_clean としてインストールされる。
.PP
.\"O .ne 8
.nf
  #!/bin/sh
  # Delete saved ksyms and modules not accessed in 2 days
  if [ -d /var/log/ksymoops ]
  then
	  set -e
	  # Make sure there is always at least one version
	  d=`date +%Y%m%d%H%M%S`
	  cp -a /proc/ksyms /var/log/ksymoops/${d}.ksyms
	  cp -a /proc/modules /var/log/ksymoops/${d}.modules
	  find /var/log/ksymoops -type f -atime +2 -exec rm {} \\;
  fi
.fi
.\"O .SH SEE ALSO
.SH 関連項目
\fBrmmod\fP(8), \fBmodprobe\fP(8), \fBdepmod\fP(8), \fBlsmod\fP(8),
\fBksyms\fP(8), \fBmodules\fP(2), \fBgenksyms\fP(8), \fBkerneld\fP(8),
\fBksymoops\fP(kernel).
.\"O .SH HISTORY
.SH 履歴
.\"O Module support was first conceived by Anonymous
モジュール対応を誰が最初に考えたのかは不明である。
.br
.\"O Initial Linux version by Bas Laarhoven <bas@vimec.nl>
Linux 用の最初のバージョンは Bas Laarhoven <bas@vimec.nl> が作成した。
.br
.\"O Version 0.99.14 by Jon Tombs <jon@gtex02.us.es>
バージョン 0.99.14 は Jon Tombs <jon@gtex02.us.es> が作成した。
.br
.\"O Extended by Bjorn Ekwall <bj0rn@blox.se>
Bjorn Ekwall <bj0rn@blox.se> が拡張を行った。
.br
.\"O Original ELF help from Eric Youngdale <eric@aib.com>
元々の ELF 対応は Eric Youngdale <eric@aib.com> の助力によるものである。
.br
.\"O Rewritten for 2.1.17 by Richard Henderson <rth@tamu.edu>
バージョン 2.1.17 への更新は Richard Henderson <rth@tamu.edu> が行った。
.br
.\"O Extended by Bjorn Ekwall <bj0rn@blox.se> for modutils-2.2.*, March 1999
modutil-2.2.* での拡張は 1999 年 3 月に Bjorn Ekwall <bj0rn@blox.se> が行った。
.br
.\"O Assistance for ksymoops by Keith Owens <kaos@ocs.com.au>, May 1999
ksymoops の補助は 1999 年 5 月に Keith Owens <kaos@ocs.com.au> が行った。
.br
.\"O Maintainer: Keith Owens <kaos@ocs.com.au>.
メンテナ: Keith Owens <kaos@ocs.com.au>.
