.\" Copyright (c) 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" 2001-10-11, 2003-08-22, aeb, added some details
.\"
.\" Japanese Version Copyright (c) 2001 Akihiro MOTOKI
.\"       all rights reserved.
.\" Translated 2001-11-05, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2003-09-05, Akihiro MOTOKI, catch up to v1.60
.\" Updated 2005-11-19, Akihiro MOTOKI
.\" Updated 2010-04-18, Akihiro MOTOKI, LDP v3.24
.\"
.\"WORD:	obsolete	廃止された
.\"WORD:	a multiple of	〜の倍数
.\"WORD:	a power of two	2 のべき乗
.\"
.TH POSIX_MEMALIGN 3  2010-09-20 "GNU" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O posix_memalign, memalign, valloc \- Allocate aligned memory
posix_memalign, memalign, valloc \- アラインメントされたメモリの割り当てを行う
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <stdlib.h>
.sp
.BI "int posix_memalign(void **" memptr ", size_t " alignment ", size_t " size );
.sp
.B #include <malloc.h>
.sp
.BI "void *valloc(size_t " size );
.BI "void *memalign(size_t " boundary ", size_t " size );
.fi
.sp
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR posix_memalign ():
.RS 4
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.RE
.sp
.BR valloc ():
.br
.PD 0
.RS 4
.TP 4
.\"O Since glibc 2.12:
glibc 2.12 以降:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.br
.fi
.TP
.\"O Before glibc 2.12:
glibc 2.12 より前:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.PD
.ad b
.\"O .SH DESCRIPTION
.SH 説明
.\"O The function
.\"O .BR posix_memalign ()
.\"O allocates
.\"O .I size
.\"O bytes and places the address of the allocated memory in
.\"O .IR "*memptr" .
.\"O The address of the allocated memory will be a multiple of
.\"O .IR "alignment" ,
.\"O which must be a power of two and a multiple of
.\"O .IR "sizeof(void *)".
関数
.BR posix_memalign ()
は、
.I size
バイトのメモリを割り当て、割り当てられたメモリのアドレスを
.I "*memptr"
に設定する。
割り当てられたメモリのアドレスは
.I "alignment"
の倍数になっているはずである。
.I "alignment"
は 2 のべき乗で、かつ
.IR "sizeof(void *)"
の倍数でなければならない。
.\"O If
.\"O .I size
.\"O is 0, then
.\"O .BR posix_memalign ()
.\"O returns either NULL,
.\"O .\" glibc does this:
.\"O or a unique pointer value that can later be successfully passed to
.\"O .BR free (3).
.I size
が 0 の場合、
.BR posix_memalign ()
は NULL か一意なポインタ値を返す。
このポインタ値は、後で
.BR free (3)
に問題なく渡すことができる。

.\"O The obsolete function
.\"O .BR memalign ()
.\"O allocates
.\"O .I size
.\"O bytes and returns a pointer to the allocated memory.
.\"O The memory address will be a multiple of
.\"O .IR "boundary" ,
.\"O which must be a power of two.
廃止された関数である
.BR memalign ()
は、
.I size
バイトのメモリを割り当て、割り当てられたメモリへのポインタを返す。
メモリのアドレスは
.I "boundary"
の倍数になっているはずである。
.I "boundary"
は 2 のべき乗でなければならない。
.\" The behavior of memalign() for size==0 is as for posix_memalign()
.\" but no standards govern this.

.\"O The obsolete function
.\"O .BR valloc ()
.\"O allocates
.\"O .I size
.\"O bytes and returns a pointer to the allocated memory.
.\"O The memory address will be a multiple of the page size.
.\"O It is equivalent to
.\"O .IR "memalign(sysconf(_SC_PAGESIZE),size)" .
廃止された関数である
.BR valloc ()
は
.I size
バイトのメモリを割り当て、割り当てられたメモリへのポインタを返す。
メモリのアドレスはページサイズの倍数になっているはずである。
これは
.I "memalign(sysconf(_SC_PAGESIZE),size)"
と等価である。

.\"O For all three routines, the memory is not zeroed.
.\" motoki: be not zeroed ってどういう意味？
3 つの関数はいずれもメモリのゼロクリアを行わない。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O .BR memalign ()
.\"O and
.\"O .BR valloc ()
.\"O return the pointer to the allocated memory, or NULL if the request fails.
.BR memalign ()
と
.BR valloc ()
は割り当てられたメモリへのポインタを返す。
割り当てに失敗した場合は NULL を返す。

.\"O .BR posix_memalign ()
.\"O returns zero on success, or one of the error values listed in the
.\"O next section on failure.
.\"O Note that
.\"O .I errno
.\"O is not set.
.BR posix_memalign ()
は成功した場合は 0 を返し、
失敗した場合は次のセクションに記載されたエラー値のいずれかを返す。
.I errno
はセットされないことに注意すること。
.\"O .SH "ERRORS"
.SH エラー
.TP
.B EINVAL
.\"O The
.\"O .I alignment
.\"O argument was not a power of two, or was not a multiple of
.\"O .IR "sizeof(void *)" .
.I alignment
引き数が 2 のべき乗でなかったか、
.IR "sizeof(void *)"
の倍数でなかった。
.TP
.B ENOMEM
.\"O There was insufficient memory to fulfill the allocation request.
割り当て要求を満たすのに十分なメモリがなかった。
.\"O .SH VERSIONS
.SH バージョン
.\"O The functions
.\"O .BR memalign ()
.\"O and
.\"O .BR valloc ()
.\"O have been available in all Linux libc libraries.
.BR memalign ()
と
.BR valloc ()
はすべての Linux libc ライブラリで使用可能である。
.\"O The function
.\"O .BR posix_memalign ()
.\"O is available since glibc 2.1.91.
.BR posix_memalign ()
は glibc 2.1.91 以降で使用可能である。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O The function
.\"O .BR valloc ()
.\"O appeared in 3.0BSD.
.\"O It is documented as being obsolete in 4.3BSD,
.\"O and as legacy in SUSv2.
.\"O It does not appear in POSIX.1-2001.
関数
.BR valloc ()
は 3.0BSD で登場した。4.3BSD では廃止されたと記載されており、
SUSv2 では過去の名残だと記載されている。
POSIX.1-2001 にはもはや存在しない。
.\"O The function
.\"O .BR memalign ()
.\"O appears in SunOS 4.1.3 but not in 4.4BSD.
関数
.BR memalign ()
は SunOS 4.1.3 で登場したが、4.4BSD にはない。
.\"O The function
.\"O .BR posix_memalign ()
.\"O comes from POSIX.1d.
関数
.BR posix_memalign ()
は POSIX.1d に由来する。
.\"O .SS Headers
.SS ヘッダ
.\"O Everybody agrees that
.\"O .BR posix_memalign ()
.\"O is declared in \fI<stdlib.h>\fP.
.BR posix_memalign ()
の宣言を \fI<stdlib.h>\fP で行うことに関しては、
皆の意見が一致している。

.\"O On some systems
.\"O .BR memalign ()
.\"O is declared in \fI<stdlib.h>\fP instead of \fI<malloc.h>\fP.
いくつかのシステムでは、
.BR memalign ()
は \fI<malloc.h>\fP ではなく \fI<stdlib.h>\fP で宣言されている。

.\"O According to SUSv2,
.\"O .BR valloc ()
.\"O is declared in \fI<stdlib.h>\fP.
.\"O Libc4,5 and glibc declare it in \fI<malloc.h>\fP and perhaps also in
.\"O \fI<stdlib.h>\fP
.\"O (namely, if
.\"O .B _GNU_SOURCE
.\"O is defined, or
.\"O .B _BSD_SOURCE
.\"O is defined, or,
.\"O for glibc, if
.\"O .B _XOPEN_SOURCE_EXTENDED
.\"O is defined, or, equivalently,
.\"O .B _XOPEN_SOURCE
.\"O is defined to a value not less than 500).
SUSv2 によると、
.BR valloc ()
は
.I <stdlib.h>
で宣言される。
libc4,5 や glibc では
.I <malloc.h>
で宣言されており、
さらに
.I <stdlib.h>
でも宣言されることもある
(具体的には以下のいずれかの場合:
.B _GNU_SOURCE
が定義されている、
.B _BSD_SOURCE
が定義されている、
glibc で
.B _XOPEN_SOURCE_EXTENDED
が定義されている、
glibc で
.B _XOPEN_SOURCE
が 500 より小さくない値に定義されている)。
.\"O .SH NOTES
.SH 注意
.\"O On many systems there are alignment restrictions, for example, on buffers
.\"O used for direct block device I/O.
.\"O POSIX specifies the
.\"O .I "pathconf(path,_PC_REC_XFER_ALIGN)"
.\"O call that tells what alignment is needed.
.\"O Now one can use
.\"O .BR posix_memalign ()
.\"O to satisfy this requirement.
多くのシステムでは、アラインメントに関して制限がある。例えば、
ブロックデバイスに対するダイレクト I/O に使用するバッファには
アラインメントに関する制限がある。
POSIX では、どんなアラインメントが必要かを知るために
.I "pathconf(path,_PC_REC_XFER_ALIGN)"
コールを規定している。ここで
.BR posix_memalign ()
を使うと、この必要条件を満たすことができる。

.\"O .BR posix_memalign ()
.\"O verifies that
.\"O .I alignment
.\"O matches the requirements detailed above.
.BR posix_memalign ()
は
.I alignment
が上で詳細に述べた必要条件を満たすかどうかを確かめる。
.\"O .BR memalign ()
.\"O may not check that the
.\"O .I boundary
.\"O argument is correct.
.BR memalign ()
は
.I boundary
引き数が正しいかどうかの確認を行わないかもしれない。

.\"O POSIX requires that memory obtained from
.\"O .BR posix_memalign ()
.\"O can be freed using
.\"O .BR free (3).
POSIX では
.BR posix_memalign ()
によって獲得したメモリは
.BR free (3)
を使って解放することができる必要がある。
.\"O Some systems provide no way to reclaim memory allocated with
.\"O .BR memalign ()
.\"O or
.\"O .BR valloc ()
いくつかのシステムでは
.BR memalign ()
や
.BR valloc ()
で割り当てられたメモリを再利用する手段が提供されていない。
.\"O (because one can only pass to
.\"O .BR free (3)
.\"O a pointer gotten from
.\"O .BR malloc (3),
.\"O while, for example,
.\"O .BR memalign ()
.\"O would call
.\"O .BR malloc (3)
.\"O and then align the obtained value).
.\" motoki: while の前後のつながりはこれでいい？
(なぜなら
.BR free (3)
に渡すことができるのは
.BR malloc (3)
から受け取ったポインタだけだが、
例えば
.BR memalign ()
は
.BR malloc (3)
を呼び出し、得た値をアラインメントしてしまうからである)
.\" Other systems allow passing the result of
.\" .BR valloc ()
.\" to
.\" .BR free (3),
.\" but not to
.\" .BR realloc (3).
.\"O The glibc implementation
.\"O allows memory obtained from any of these three routines to be
.\"O reclaimed with
.\"O .BR free (3).
glibc の実装では、
ここに述べた 3 つの関数のいずれで獲得したメモリも
.BR free (3)
で再利用することができる。

.\"O glibc
.\"O .BR malloc (3)
.\"O always returns 8-byte aligned memory addresses, so these routines are only
.\"O needed if you require larger alignment values.
glibc の
.BR malloc (3)
は常に 8 バイトにアラインメントされたメモリアドレスを返すので、
ここで述べた関数が必要になるのは
8 バイトよりも大きなアラインメントが必要な場合だけである。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR brk (2),
.BR getpagesize (2),
.BR free (3),
.BR malloc (3)
