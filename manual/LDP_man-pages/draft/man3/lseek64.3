.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sun Jan 30 03:23:04 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH LSEEK64 3 2004-12-11 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O lseek64 \- reposition 64-bit read/write file offset
lseek64 \- ファイルの 64 ビットの読み書きオフセットの位置を変える
.\"O .SH SYNOPSIS
.SH 書式
.\"O .BR "#define _LARGEFILE64_SOURCE" "     /* See feature_test_macros(7) */"
.BR "#define _LARGEFILE64_SOURCE" "     /* feature_test_macros(7) 参照 */"
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.BI "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.\"O .SH DESCRIPTION
.SH 説明
.\"O The
.\"O .BR lseek (2)
.\"O family of functions reposition the offset of the open file associated
.\"O with the file descriptor
.\"O .I fd
.\"O to
.\"O .I offset
.\"O bytes relative to the start, current position, or end of the file,
.\"O when
.\"O .I whence
.\"O has the value
.\"O .BR SEEK_SET ,
.\"O .BR SEEK_CUR ,
.\"O or
.\"O .BR SEEK_END ,
.\"O respectively.
.BR lseek (2)
関数ファミリーは、ファイルディスクリプタ
.I fd
に関連するオープンされたファイルのオフセットを、
ファイルの開始位置・現在位置・終端から
.I offset
の位置へ変更する。
これは
.I whence
がそれぞれ
.BR SEEK_SET ,
.BR SEEK_CUR ,
.B SEEK_END
の場合に対応する。
.LP
.\"O For more details, return value, and errors, see
.\"O .BR lseek (2).
更に詳しい説明・返り値・エラーは、
.BR lseek (2)
を参照すること。
.PP
.\"O Four interfaces are available:
.\"O .BR lseek (2),
.\"O .BR lseek64 (),
.\"O .BR llseek (2),
.\"O and the raw system call
.\"O .BR _llseek (2).
4 つのインタフェースが使用可能である:
.BR lseek (2),
.BR lseek64 (),
.BR llseek (2)
と元となるシステムコール
.BR _llseek (2)
である。
.SS lseek
.\"O Prototype:
プロトタイプ:
.nf
.sp
.in +4n
.BI "off_t lseek(int " fd ", off_t " offset ", int " whence );
.in
.fi
.sp
.\"O .BR lseek (2)
.\"O uses the type
.\"O .IR off_t .
.BR lseek (2)
は型
.I off_t
を使う。
.\"O This is a 32-bit signed type on 32-bit architectures, unless one
.\"O compiles with
これは 32 ビットアーキテクチャ上では 32 ビット符号付き型である。
ただし、
.nf
.sp
.in +4n
#define _FILE_OFFSET_BITS 64
.in
.sp
.fi
.\"O in which case it is a 64-bit signed type.
を定義してコンパイルした場合は 64 ビット符号付き型である。
.SS lseek64
.\"O Prototype:
プロトタイプ:
.nf
.sp
.in +4n
.BI "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.in
.fi
.sp
.\"O The library routine
.\"O .BR lseek64 ()
.\"O uses a 64-bit type even when
.\"O .I off_t
.\"O is a 32-bit type.
.\"O Its prototype (and the type
.\"O .IR off64_t )
.\"O is available only when one compiles with
ライブラリルーチン
.BR lseek64 ()
は
.I off_t
が 32 ビット型であっても 64 ビット型を使う。
このプロトタイプ (と型
.IR off64_t )
は、以下の定義をしてコンパイルした場合にのみ使用可能である。
.nf
.sp
.in +4n
#define _LARGEFILE64_SOURCE
.in
.sp
.fi
.\"O The function
.\"O .BR lseek64 ()
.\"O .\" in glibc 2.0.94, not in 2.0.6
.\"O is available since glibc 2.1, and is defined to be an alias for
.\"O .BR llseek ().
関数
.BR lseek64 ()
.\" glibc 2.0.94 には存在するが 2.0.6 には存在しない
は glibc 2.1 以降で使用可能であり、
.BR llseek ()
のエイリアスとして定義されている。
.SS llseek
.\"O Prototype:
プロトタイプ:
.nf
.sp
.in +4n
.BI "loff_t llseek(int " fd ", loff_t " offset ", int " whence );
.in
.fi
.sp
.\"O The type
.\"O .I loff_t
.\"O is a 64-bit signed type.
型
.I loff_t
は 64 ビット符号付き型である。
.\"O The library routine
.\"O .BR llseek ()
.\"O .\" in libc 5.0.9, not in 4.7.6
.\"O is available in libc5 and glibc and works without special defines.
ライブラリルーチン
.BR llseek ()
.\" libc 5.0.9 には存在するが 4.7.6 は存在しない
は libc5 と glibc で使用可能であり、特別な定義なしに動作する。
.\"O Its prototype was given in
.\"O .I <unistd.h>
.\"O with libc5, but glibc does not provide a prototype.
このプロトタイプは、libc5 では
.I <unistd.h>
で与えられるが、glibc はプロトタイプを提供しない。
.\"O This is bad, since a prototype is needed.
.\"O Users should add
.\"O the above prototype, or something equivalent, to their own source.
これはプロトタイプが必要になるので良くない。
ユーザは上記のプロトタイプまたはそれと同等のものを、
自身のソースに追加しなければならない。
.\"O When users complained about data loss caused by a miscompilation of
.\"O .BR e2fsck (8),
.\"O glibc 2.1.3 added the link-time warning
このデータがないことによって
.BR e2fsck (8)
のコンパイルが失敗するという苦情がユーザから出たので、
glibc 2.1.3 では以下のようなリンク時の警告が追加された。
.sp
.in +4n
"the \`llseek\' function may be dangerous; use \`lseek64\' instead."
.in
.sp
.\"O This makes this function unusable if one desires a warning-free
.\"O compilation.
これにより、警告なしでコンパイルしたい場合には、この関数を使用不可にできる。
.SS _llseek
.\"O All the above functions are implemented in terms of this system call.
.\"O The prototype is:
上記の全ての関数は、このシステムコールに基づいて実装される。
プロトタイプは以下の通り:
.nf
.sp
.in +4n
.BI "int _llseek(int " fd ", off_t " offset_hi ", off_t " offset_lo ,
.BI "            loff_t *" result ", int " whence );
.in
.fi
.sp
.\"O For more details, see
.\"O .BR llseek (2).
更に詳しい情報は、
.BR llseek (2)
を参照すること。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR llseek (2),
.BR lseek (2)
