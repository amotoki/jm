.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" @(#)xdr.3n	2.2 88/08/03 4.0 RPCSRC; from 1.16 88/03/14 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes to modern C syntax
.\"
.\" Japanese Version Copyright (c) 1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Tue Jan  4 20:48:51 JST 2000
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\"
.TH XDR 3 2007-12-30 "" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O xdr \- library routines for external data representation
xdr \- 外部データ表現(XDR)のためのライブラリ・ルーティン
.\"O .SH SYNOPSIS AND DESCRIPTION
.SH 書式と説明
.LP
.\"O These routines allow C programmers to describe
.\"O arbitrary data structures in a machine-independent fashion.
.\"O Data for remote procedure calls are transmitted using these
.\"O routines.
これらのルーティンは C プログラマーがマシン非依存な形式で
任意のデータ構造体を記述することを可能にする。
リモート・プロシジャ・コールのためのデータはこれらのルーティンを
使用して送信される。

.\"O The prototypes below are declared in
.\"O .I <rpc/xdr.h>
.\"O and make use of the following types:
以下に示すプロトタイプ宣言は
.I <rpc/xdr.h>
で行われており、その中では次の型が使用される。
.in +4n
.nf

typedef int \fIbool_t\fP;

typedef bool_t (*\fIxdrproc_t\fP) (XDR *, void *,...);
.fi
.in
.LP
.\"O For the declaration of the
.\"O .I XDR
.\"O type, see
.\"O .IR <rpc/xdr.h> .
.I XDR
型の宣言については、
.I <rpc/xdr.h>
を参照。
.LP
.nf
.BI "bool_t xdr_array(XDR *" xdrs ", char **" arrp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize ", unsigned int " elsize ,
.BI "                 xdrproc_t " elproc );
.fi
.IP
.\"O A filter primitive that translates between variable-length arrays
.\"O and their corresponding external representations.
.\"O The argument
.\"O .I arrp
.\"O is the address of the pointer to the array, while
.\"O .I sizep
.\"O is the address of the element count of the array;
.\"O this element count cannot exceed
.\"O .IR maxsize .
可変長の配列とそれに対応する外部表現とを変換する基本フィルター。
引き数
.I arrp
は配列へのポインターのアドレスであり、
.I sizep
は配列の要素数のアドレスである。
これらの要素数は
.I maxsize
を超えてはならない。
.\"O The argument
.\"O .I elsize
.\"O is the
.\"O .I sizeof
.\"O each of the array's elements, and
.\"O .I elproc
.\"O is an XDR filter that translates between
.\"O the array elements' C form, and their external
.\"O representation.
.\"O This routine returns one if it succeeds, zero otherwise.
引き数
.I elsize
は各配列の要素の
.I sizeof
であり、
.I elproc
は配列要素を C 形式からその外部表現に変換するための XDR フィルターである。
このルーティンは成功した場合には 1 を返す。
失敗した場合にはゼロを返す。
.LP
.nf
.BI "bool_t xdr_bool(XDR *" xdrs ", bool_t *" bp );
.fi
.IP
.\"O A filter primitive that translates between booleans (C
.\"O integers)
.\"O and their external representations.
.\"O When encoding data, this
.\"O filter produces values of either one or zero.
.\"O This routine returns one if it succeeds, zero otherwise.
真偽値(C の int)とその外部表現とを変換する基本フィルター。
データをエンコードする時、このフィルターは 1 また 0 の値を生成する。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
.LP
.nf
.BI "bool_t xdr_bytes(XDR *" xdrs ", char **" sp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize );
.fi
.IP
.\"O A filter primitive that translates between counted byte
.\"O strings and their external representations.
.\"O The argument
.\"O .I sp
.\"O is the address of the string pointer.
.\"O The length of the
.\"O string is located at address
.\"O .IR sizep ;
.\"O strings cannot be longer than
.\"O .IR maxsize .
.\"O This routine returns one if it succeeds, zero otherwise.
ある長さのバイト文字列とその外部表現とを変換する基本フィルター。
引き数
.I sp
は文字列ポインターのアドレスである。文字列の長さは
.I sizep
のアドレスに置く。文字列は
.I maxsize
より長くてはいけない。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
.LP
.nf
.BI "bool_t xdr_char(XDR *" xdrs ", char *" cp );
.fi
.IP
.\"O A filter primitive that translates between C characters
.\"O and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
.\"O Note: encoded characters are not packed, and occupy 4 bytes each.
.\"O For arrays of characters, it is worthwhile to
.\"O consider
.\"O .BR xdr_bytes (),
.\"O .BR xdr_opaque ()
.\"O or
.\"O .BR xdr_string ().
C の文字(char)とその外部表現との間を変換する基本フィルター。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
注意: エンコードされたデータは詰め込まれておらず、それぞれ 4 バイトを
占める。文字の配列の場合には
.BR xdr_bytes (),
.BR xdr_opaque (),
.BR xdr_string ()
などを考慮した方が良い。
.LP
.nf
.BI "void xdr_destroy(XDR *" xdrs );
.fi
.IP
.\"O A macro that invokes the destroy routine associated with the XDR stream,
.\"O .IR xdrs .
.\"O Destruction usually involves freeing private data structures
.\"O associated with the stream.
.\"O Using
.\"O .I xdrs
.\"O after invoking
.\"O .BR xdr_destroy ()
.\"O is undefined.
このマクロは XDR ストリーム
.I xdrs
に関連付けられた破壊ルーティンを呼び出す。
破壊には通常、ストリームに関連付けられた私的データ構造体の解放が含まれている。
.BR xdr_destroy ()
の呼び出しの後に
.I xdrs
を使用することは未定義である。
.LP
.nf
.BI "bool_t xdr_double(XDR *" xdrs ", double *" dp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I double
.\"O precision numbers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I 倍精度数 (double)
とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "bool_t xdr_enum(XDR *" xdrs ", enum_t *" ep );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .IR enum s
.\"O (actually integers) and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I enum
(実際には int)とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "bool_t xdr_float(XDR *" xdrs ", float *" fp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .IR float s
.\"O and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.IR "浮動小数点数 (float)"
とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "void xdr_free(xdrproc_t " proc ", char *" objp );
.fi
.IP
.\"O Generic freeing routine.
.\"O The first argument is the XDR routine for the object being freed.
.\"O The second argument is a pointer to the object itself.
.\"O Note: the pointer passed to this routine is
.\"O .I not
.\"O freed, but what it points to
.\"O .I is
.\"O freed (recursively).
汎用解放(free)ルーティン。最初の引き数はオブジェクトを解放するための
XDR ルーティンである。二番目の引き数はそのオブジェクト自身へのポインター
である。注意: このルーティンに渡されるポインターは
.I 解放されない
が、このポインターの指すデータは(再帰的に)
.IR 解放される 。
.LP
.nf
.BI "unsigned int xdr_getpos(XDR *" xdrs );
.fi
.IP
.\"O A macro that invokes the get-position routine
.\"O associated with the XDR stream,
.\"O .IR xdrs .
.\"O The routine returns an unsigned integer,
.\"O which indicates the position of the XDR byte stream.
.\"O A desirable feature of .SM XDR
.\"O streams is that simple arithmetic works with this number,
.\"O although the XDR stream instances need not guarantee this.
このマクロは XDR ストリーム
.I xdrs
に関連付けられた位置取得ルーティンを呼び出す。
このルーティンは XDR バイト・ストリームの位置を指示する符号無し整数を返す。
XDR ストリームの機能としてこの数値で単純な算術作業ができることが
期待されてるいる。しかしながら
XDR ストリームの実体はこれを保証する必要はない。
.LP
.nf
.BI "long *xdr_inline(XDR *" xdrs ", int " len );
.fi
.IP
.\"O A macro that invokes the inline routine associated with the XDR stream,
.\"O .IR xdrs .
.\"O The routine returns a pointer
.\"O to a contiguous piece of the stream's buffer;
.\"O .I len
.\"O is the byte length of the desired buffer.
.\"O Note: pointer is cast to
.\"O .IR "long *" .
このマクロは XDR ストリーム
.I xdrs
に関連付けられた内部(inline)ルーティンを呼び出す。
ルーティンはストリームのバッファーの連続する断片へのポインターを返す。
.I len
は要求するバッファーのバイト長である。
注意: ポインターは
.I "long *"
にキャストされる。
.IP
.\"O Warning:
.\"O .BR xdr_inline ()
.\"O may return NULL (0)
.\"O if it cannot allocate a contiguous piece of a buffer.
.\"O Therefore the behavior may vary among stream instances;
.\"O it exists for the sake of efficiency.
警告:
.BR xdr_inline ()
はバッファーの連続する断片を割り当てることができなかった場合には
NULL (0)を返すかもしれない。
どの場合もその動作はストリームの実体によって変化するかもしれない。
これは効率化のために存在している。
.LP
.nf
.BI "bool_t xdr_int(XDR *" xdrs ", int *" ip );
.fi
.IP
.\"O A filter primitive that translates between C integers
.\"O and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の整数(int)とその外部表現とを変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_long(XDR *" xdrs ", long *" lp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I long
.\"O integers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I long
整数とそのその外部表現とを変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "void xdrmem_create(XDR *" xdrs ", char *" addr ", unsigned int " size ,
.BI "                   enum xdr_op " op );
.fi
.IP
.\"O This routine initializes the XDR stream object pointed to by
.\"O .IR xdrs .
.\"O The stream's data is written to, or read from,
.\"O a chunk of memory at location
.\"O .I addr
.\"O whose length is no more than
.\"O .I size
.\"O bytes long.
.\"O The
.\"O .I op
.\"O determines the direction of the XDR stream (either
.\"O .BR XDR_ENCODE ,
.\"O .BR XDR_DECODE ,
.\"O or
.\"O .BR XDR_FREE ).
このルーティンは
.I xdrs
によって指されている XDR ストリーム・オブジェクトを初期化する。
ストリームのデータは
.I addr
位置にあるメモリーの塊から読み書きされる。
その長さはバイト単位で
.I size
超えてはいけない。
.I op
は XDR ストリームの変換方向を決定する
.RB ( XDR_ENCODE ,
.BR XDR_DECODE ,
.B XDR_FREE
のどれか)。
.LP
.nf
.BI "bool_t xdr_opaque(XDR *" xdrs ", char *" cp ", unsigned int " cnt );
.fi
.IP
.\"O A filter primitive that translates between fixed size opaque data
.\"O and its external representation.
.\"O The argument
.\"O .I cp
.\"O is the address of the opaque object, and
.\"O .I cnt
.\"O is its size in bytes.
.\"O This routine returns one if it succeeds, zero otherwise.
固定長の不明データとその外部表現との変換を行なう基本フィルター。
引き数
.I cp
は不明オブジェクトのアドレスであり
.I cnt
はそのバイト単位の大きさである。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_pointer(XDR *" xdrs ", char **" objpp ,
.BI "                   unsigned int " objsize ", xdrproc_t " xdrobj );
.fi
.IP
.\"O Like
.\"O .BR xdr_reference ()
.\"O except that it serializes NULL pointers, whereas
.\"O .BR xdr_reference ()
.\"O does not.
.\"O Thus,
.\"O .BR xdr_pointer ()
.\"O can represent
.\"O recursive data structures, such as binary trees or
.\"O linked lists.
.BR xdr_reference ()
と同様であるが、これが NULL ポインターを番号化するのに対して
.BR xdr_reference ()
はそうしない点が異なっている。これにより、
.BR xdr_pointer ()
は二分木や連結リストのような再帰的なデータ構造体を
表現できる。
.LP
.nf
.BI "void xdrrec_create(XDR *" xdrs ", unsigned int " sendsize ,
.BI "                   unsigned int " recvsize ", char *" handle ,
.BI "                   int (*" readit ") (char *, char *, int),"
.BI "                   int (*" writeit ") (char *, char *, int));"
.fi
.IP
.\"O This routine initializes the XDR stream object pointed to by
.\"O .IR xdrs .
.\"O The stream's data is written to a buffer of size
.\"O .IR sendsize ;
.\"O a value of zero indicates the system should use a suitable default.
.\"O The stream's data is read from a buffer of size
.\"O .IR recvsize ;
.\"O it too can be set to a suitable default by passing a zero value.
このルーティンは
.I xdrs
で指された XDR ストリーム・オブジェクトを初期化する。
ストリームのデータは大きさ
.I sendsize
のバッファへ書き込まれる。
.I sendsize
をゼロにすると、システムに適切なデフォルトを使用するように指示する。
ストリームのデータは大きさ
.I recvsize
のバッファから読み込まれる。これもゼロを渡すことで適切なデフォルトに
設定することができる。
.\"O When a stream's output buffer is full,
.\"O .I writeit
.\"O is called.
.\"O Similarly, when a stream's input buffer is empty,
.\"O .I readit
.\"O is called.
.\"O The behavior of these two routines is similar to
.\"O the system calls
.\"O .BR read (2)
.\"O and
.\"O .BR write (2),
.\"O except that
.\"O .I handle
.\"O is passed to the former routines as the first argument.
ストリームの出力バッファが一杯の場合は
.I writeit
が呼び出される。同様にストリーム入力バッファが空の場合には
.I readit
が呼び出される。これらの二つのルーティンの動作はシステムコールの
.BR read (2)
や
.BR write (2)
と似ているが、前者のルーティンは最初の引き数として
.I handle
が渡される点で異なっている。
.\"O Note: the XDR stream's
.\"O .I op
.\"O field must be set by the caller.
注意: XDR ストリームの
.I op
は呼び出し側で設定しなければならない。
.IP
.\"O Warning: this XDR stream implements an intermediate record stream.
.\"O Therefore there are additional bytes in the stream
.\"O to provide record boundary information.
警告: この XDR ストリームは中間レコード・ストリームを実装している。
レコード境界の情報を提供するためにストリームには余分なバイトが存在する。
.LP
.nf
.BI "bool_t xdrrec_endofrecord(XDR *" xdrs ", int " sendnow );
.fi
.IP
.\"O This routine can be invoked only on streams created by
.\"O .BR xdrrec_create ().
.\"O The data in the output buffer is marked as a completed record,
.\"O and the output buffer is optionally written out if
.\"O .I sendnow
.\"O is nonzero.
.\"O This routine returns one if it succeeds, zero otherwise.
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
出力バッファのデータは完全なレコードとして印され、
.I sendnow
がゼロでない場合には出力バッファは書き出される。
このルーティンは成功した場合は 1 を返す。失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdrrec_eof(XDR *" xdrs );
.fi
.IP
.\"O This routine can be invoked only on streams created by
.\"O .BR xdrrec_create ().
.\"O After consuming the rest of the current record in the stream,
.\"O this routine returns one if the stream has no more input,
.\"O zero otherwise.
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
ストリームの現在のレコードの残りを消費した後に、
ストリームに入力が残っていない場合には 1 を返す。
それ以外の場合はゼロを返す。
.LP
.nf
.BI "bool_t xdrrec_skiprecord(XDR *" xdrs );
.fi
.IP
.\"O This routine can be invoked only on
.\"O streams created by
.\"O .BR xdrrec_create ().
.\"O It tells the XDR implementation that the rest of the current record
.\"O in the stream's input buffer should be discarded.
.\"O This routine returns one if it succeeds, zero otherwise.
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
XDR の実装にそのストリームの入力バッファーの現在のレコードの残りを
捨てるように伝える。このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_reference(XDR *" xdrs ", char **" pp ", unsigned int " size ,
.BI "                     xdrproc_t " proc );
.fi
.IP
.\"O A primitive that provides pointer chasing within structures.
.\"O The argument
.\"O .I pp
.\"O is the address of the pointer;
.\"O .I size
.\"O is the
.\"O .I sizeof
.\"O the structure that
.\"O .I *pp
.\"O points to; and
.\"O .I proc
.\"O is an XDR procedure that filters the structure
.\"O between its C form and its external representation.
.\"O This routine returns one if it succeeds, zero otherwise.
構造体へのポインター追跡を提供する基本ルーティン。
引き数
.I pp
はポインターのアドレスである。
.I size
は
.I *pp
が指している構造体の
.I sizeof
である。
.I proc
はその構造体の C 形式と外部表現との変換を行なう XDR プロシジャである。
このルーティンは成功した場合 1 を返す。
失敗した場合はゼロを返す。
.IP
.\"O Warning: this routine does not understand NULL pointers.
.\"O Use
.\"O .BR xdr_pointer ()
.\"O instead.
警告: このルーティンは NULL ポインターを理解することができない。かわりに
.BR xdr_pointer ()
を使用すること。
.LP
.nf
.BI "xdr_setpos(XDR *" xdrs ", unsigned int " pos );
.fi
.IP
.\"O A macro that invokes the set position routine associated with
.\"O the XDR stream
.\"O .IR xdrs .
.\"O The argument
.\"O .I pos
.\"O is a position value obtained from
.\"O .BR xdr_getpos ().
.\"O This routine returns one if the XDR stream could be repositioned,
.\"O and zero otherwise.
このマクロは XDR ストリーム
.I xdrs
に関連付けられた位置設定ルーティンを呼び出す。引き数
.I pos
は
.BR xdr_getpos ()
によって取得される位置数値である。
このルーティンは XDR ストリームの位置の変更ができた場合には 1 を返す。
それ以外の場合は 0 を返す。
.IP
.\"O Warning: it is difficult to reposition some types of XDR
.\"O streams, so this routine may fail with one
.\"O type of stream and succeed with another.
警告: ある種の XDR ストリームの場合は位置の変更を行なうことが困難である。
それでこのルーティンはある種のストリームの場合には成功し、別の種類の
場合には失敗するかもしれない。
.LP
.nf
.BI "bool_t xdr_short(XDR *" xdrs ", short *" sp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I short
.\"O integers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I short
整数とその外部表現との変換を行なう基本フィルター。
このルーティンは成功すると 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "void xdrstdio_create(XDR *" xdrs ", FILE *" file ", enum xdr_op " op );
.fi
.IP
.\"O This routine initializes the XDR stream object pointed to by
.\"O .IR xdrs .
.\"O The XDR stream data is written to, or read from, the
.\"O .I stdio
.\"O stream
.\"O .IR file .
.\"O The argument
.\"O .I op
.\"O determines the direction of the XDR stream (either
.\"O .BR XDR_ENCODE ,
.\"O .BR XDR_DECODE ,
.\"O or
.\"O .BR XDR_FREE ).
このルーティンは
.I xdrs
で指された XDR ストリーム・オブジェクトを初期化する。
XDR ストリームに読み書きれたデータは
.I stdio
ストリーム
.I file
が使用される。
.I op
引き数は XDR ストリームの変換方向を決定する
.RB ( XDR_ENCODE ,
.BR XDR_DECODE ,
.B XDR_FREE
のどれか)。
.IP
.\"O Warning: the destroy routine associated with such XDR streams calls
.\"O .BR fflush (3)
.\"O on the
.\"O .I file
.\"O stream, but never
.\"O .BR fclose (3).
警告: このような XDR ストリームに関連付けられた破壊ルーティンは
.I file
ストリームに対して
.BR fflush (3)
を呼び出すが
.BR fclose (3)
を呼び出すことはない。
.LP
.nf
.BI "bool_t xdr_string(XDR *" xdrs ", char **" sp ", unsigned int " maxsize );
.fi
.IP
.\"O A filter primitive that translates between C strings and
.\"O their corresponding external representations.
.\"O Strings cannot be longer than
.\"O .IR maxsize .
.\"O Note:
.\"O .I sp
.\"O is the address of the string's pointer.
.\"O This routine returns one if it succeeds, zero otherwise.
C の文字列とそれに対応する外部表現とを変換するための基本フィルター。
文字列は
.I maxsize
より長くはできない。
注意:
.I sp
は文字列へのポインターのアドレスである。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_char(XDR *" xdrs ", unsigned char *" ucp );
.fi
.IP
.\"O A filter primitive that translates between
.\"O .I unsigned
.\"O C characters and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I 符号無し文字 (unsigned char)
とその外部表現とを変換する基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_int(XDR *" xdrs ", unsigned *" up );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I unsigned
.\"O integers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I 符号無し整数 (unsigned)
とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_long(XDR *" xdrs ", unsigned long *" ulp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I "unsigned long"
.\"O integers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I "unsigned long"
整数とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_short(XDR *" xdrs ", unsigned short *" usp );
.fi
.IP
.\"O A filter primitive that translates between C
.\"O .I "unsigned short"
.\"O integers and their external representations.
.\"O This routine returns one if it succeeds, zero otherwise.
C の
.I "unsigned short"
整数とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_union(XDR *" xdrs ", int *" dscmp ", char *" unp ,
.BI "                 struct xdr_discrim *" choices ,
.BI "                 xdrproc_t " defaultarm ");     /* may equal NULL */"
.fi
.IP
.\"O A filter primitive that translates between a discriminated C
.\"O .I union
.\"O and its corresponding external representation.
.\"O It first
.\"O translates the discriminant of the union located at
.\"O .IR dscmp .
分別可能な C の
.I "共用体 (union)"
とその外部形式とを変換する基本フィルター。
最初に
.I dscmp
として与えられた共用体の分別要素が変換される。
.\"O This discriminant is always an
.\"O .IR enum_t .
この分別要素は常に
.I enum_t
である。
.\"O Next the union located at
.\"O .I unp
.\"O is translated.
.\"O The argument
.\"O .I choices
.\"O is a pointer to an array of
.\"O .BR xdr_discrim ()
.\"O structures.
.\"O Each structure contains an ordered pair of
.\"O .RI [ value , proc ].
次に
.I unp
の位置の共用体が変換される。引き数
.I choices
は
.BR xdr_discrim ()
構造体の配列へのポインターである。各構造体は
.RI [ value , proc ]
の順序付きペアを格納している。
.\"O If the union's discriminant is equal to the associated
.\"O .IR value ,
.\"O then the
.\"O .I proc
.\"O is called to translate the union.
.\"O The end of the
.\"O .BR xdr_discrim ()
.\"O structure array is denoted by a routine of value NULL.
もし共用体の分別要素が関連付けられた
.I value
と等しい場合には、共用体を変換するために
.I proc
が呼び出される。
.BR xdr_discrim ()
構造体の配列の最後は、ルーティンとして
.SM NULL
を指定することで示される。
.\"O If the discriminant is not found in the
.\"O .I choices
.\"O array, then the
.\"O .I defaultarm
.\"O procedure is called (if it is not NULL).
.\"O Returns one if it succeeds, zero otherwise.
分別要素が
.I choices
配列の中に見つからなかった場合、
.I defaultarm
が (NULL でなければ) 呼び出される。
成功した場合は 1 を返す。失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_vector(XDR *" xdrs ", char *" arrp ", unsigned int " size ,
.BI "                  unsigned int " elsize ", xdrproc_t " elproc );
.fi
.IP
.\"O A filter primitive that translates between fixed-length arrays
.\"O and their corresponding external representations.
.\"O The argument
.\"O .I arrp
.\"O is the address of the pointer to the array, while
.\"O .I size
.\"O is the element count of the array.
.\"O The argument
.\"O .I elsize
.\"O is the
.\"O .I sizeof
.\"O each of the array's elements, and
.\"O .I elproc
.\"O is an XDR filter that translates between
.\"O the array elements' C form, and their external
.\"O representation.
.\"O This routine returns one if it succeeds, zero otherwise.
固定長の配列とそれらが対応する外部表現とを変換する基本フィルター。
引き数
.I arrp
は配列へのポインターのアドレスである。一方で
.I size
は配列の要素数そのものである。引き数
.I elsize
は配列の各要素の
.I sizeof
で、
.I elproc
は配列の要素を C 形式からその外部表現へと変換する XDR フィルターである。
このルーティンは成功した場合 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_void(void);"
.fi
.IP
.\"O This routine always returns one.
.\"O It may be passed to RPC routines that require a function argument,
.\"O where nothing is to be done.
このルーティンは常に 1 を返す。
これは何も行なわないが、関数引き数が必要な
RPC ルーティンに渡すことができる。
.LP
.nf
.BI "bool_t xdr_wrapstring(XDR *" xdrs ", char **" sp );
.fi
.IP
.\"O A primitive that calls
.\"O .B "xdr_string(xdrs, sp,MAXUN.UNSIGNED );"
.\"O where
.\"O .B MAXUN.UNSIGNED
.\"O is the maximum value of an unsigned integer.
.\"O .BR xdr_wrapstring ()
.\"O is handy because the RPC package passes a maximum of two XDR
.\"O routines as arguments, and
.\"O .BR xdr_string (),
.\"O one of the most frequently used primitives, requires three.
.\"O Returns one if it succeeds, zero otherwise.
.B "xdr_string(xdrs, sp, \s-1MAXUN.UNSIGNED\s0 );"
を呼び出す基本ルーティン。
ここで
.B
.SM MAXUN.UNSIGNED
は符号無し整数(unsigned int)の最大値である。
.BR xdr_wrapstring ()
は、
.SM RPC
パッケージは二つの
.SM XDR
ルーティンの最大値を引き数として渡すため便利である。
.BR xdr_string ()
は最も頻繁に利用される基本ルーティンであるが三つを要求する。
成功した場合は 1 を返す、失敗した場合はゼロを返す。
.\"O .SH SEE ALSO
.SH 関連項目
.BR rpc (3)
.LP
.\"O The following manuals:
以下のマニュアル:
.RS
eXternal Data Representation Standard: Protocol Specification
.br
eXternal Data Representation: Sun Technical Notes
.br
.IR "XDR: External Data Representation Standard" ,
RFC\ 1014, Sun Microsystems, Inc.,
USC-ISI.
.RE
