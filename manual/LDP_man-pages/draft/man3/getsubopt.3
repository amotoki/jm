.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2007 Justin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Japanese Version Copyright (c) 2007  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2007-06-02, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" 
.TH GETSUBOPT 3 2010-09-26 "GNU" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O getsubopt \- parse suboption arguments from a string
getsubopt \- 文字列中のサブオプション引き数の解釈を行う
.\"O .SH SYNOPSIS
.SH 書式
.B #include <stdlib.h>

.BI "int getsubopt(char **"optionp ", char * const *" tokens \
", char **" valuep );
.sp
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR getsubopt ():
.ad l
.RS 4
.PD 0
_XOPEN_SOURCE\ >= 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.PD
.RE
.ad
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR getsubopt ()
.\"O parses the list of comma-separated suboptions provided in
.\"O .IR optionp .
.\"O (Such a suboption list is typically produced when
.\"O .BR getopt (3)
.\"O is used to parse a command line;
.\"O see for example the \fI-o\fP option of
.\"O .BR mount (8).)
.\"O Each suboption may include an associated value,
.\"O which is separated from the suboption name by an equal sign.
.\"O The following is an example of the kind of string
.\"O that might be passed in
.\"O .IR optionp :
.BR getsubopt ()
は、
.I optionp
で与えられたカンマ区切りのサブオプション・リストを解析する。
(このようなサブオプション・リストは
.BR getopt (3)
を使ってコマンドラインを解釈した場合に現れることが多い。
例えば、
.BR mount (8)
の \fI-o\fP オプションを見るとよい。)
それぞれのサブオプションには対応する値を指定することができる。
サブオプションの名前と対応する値は等号 (\(aq=\(aq) で区切られる。
例えば、以下のような文字列を
.I optionp
に渡すことができる。
.sp
.in +4n
.B ro,name=xyz
.in

.\"O The
.\"O .I tokens
.\"O argument is a pointer to a NULL-terminated array of pointers to the tokens that
.\"O .BR getsubopt ()
.\"O will look for in
.\"O .IR optionp .
.\"O The tokens should be distinct, null-terminated strings containing at
.\"O least one character, with no embedded equal signs or commas.
.I tokens
引き数はトークンへのポインタの配列へのポインタで、
配列は NULL で終端される。
.BR getsubopt ()
はこのトークンを
.I optionp
内で探す。
それぞれのトークンは、NULL 終端された 1文字以上の文字列で、
他のトークンと区別できる必要がある。
また、等号とカンマを含んではならない。

.\"O Each call to
.\"O .BR getsubopt ()
.\"O returns information about the next unprocessed suboption in
.\"O .IR optionp .
.BR getsubopt ()
は呼び出されるたびに、
.I optionp
中の次の未処理のサブオプションの情報を返す。
.\"O The first equal sign in a suboption (if any) is interpreted as a
.\"O separator between the name and the value of that suboption.
.\"O The value extends to the next comma,
.\"O or (for the last suboption) to the end of the string.
サブオプション内に等号があった場合、最初の等号は
そのサブオプションの名前と値の区切りと解釈される。
区切りから次のカンマ (最後のサブオプションの場合、文字列の末尾)
までが、サブオプションの値となる。
.\"O If the name of the suboption matches a known name from
.\"O .IR tokens ,
.\"O and a value string was found,
.\"O .BR getsubopt ()
.\"O sets
.\"O .I *valuep
.\"O to the address of that string.
サブオプションの名前が
.I tokens
内の名前と一致し、値を表す文字列が見つかった場合、
.BR getsubopt ()
は
.I *valuep
を値を表す文字列のアドレスに設定する。
.\"O The first comma in
.\"O .I optionp
.\"O is overwritten with a null byte, so
.\"O .I *valuep
.\"O is precisely the "value string" for that suboption.
.I optionp
中の最初のカンマはヌルバイトで上書きされる。そのため、
.I *valuep
はそのサブオプションの「値の文字列」そのものとなる。

.\"O If the suboption is recognized, but no value string was found,
.\"O .RI * valuep
.\"O is set to NULL.
サブオプションが認識されたが、値を表す文字列が見つからなかった場合、
.RI * valuep
は NULL に設定される。

.\"O When
.\"O .BR getsubopt ()
.\"O returns,
.\"O .I optionp
.\"O points to the next suboption,
.\"O or to the null byte (\(aq\\0\(aq) at the end of the
.\"O string if the last suboption was just processed.
.BR getsubopt ()
が返る時、
.I optionp
は次のサブオプションを指している。
ちょうど最後のサブオプションが処理された場合は、
文字列末尾のヌルバイト (\(aq\\0\(aq) を指している。
.\"O .SH RETURN VALUE
.SH 返り値
.\"O If the first suboption in
.\"O .I optionp
.\"O is recognized,
.\"O .BR getsubopt ()
.\"O returns the index of the matching suboption element in
.\"O .IR tokens .
.\"O Otherwise, \-1 is returned and
.\"O .I *valuep
.\"O is the entire
.\"O .IB name [= value ]
.\"O string.
.I optionp
内でサブオプションが見つかった場合、
.BR getsubopt ()
は最初のサブオプションにマッチする
.I tokens
の要素の添字を返す。
見つからなかった場合、\-1 を返す。この場合、
.I *valuep
は
.IB name [= value ]
の文字列全体となる。

.\"O Since
.\"O .I *optionp
.\"O is changed, the first suboption before the call to
.\"O .BR getsubopt ()
.\"O is not (necessarily) the same as the first suboption after
.\"O .BR getsubopt ().
.I *optionp
は変更されるので、
.BR getsubopt ()
を呼び出す前の最初のサブオプションは
.BR getsubopt ()
を呼び出し後のサブオプションと必ずしも同じとは限らない。
.\"O .SH CONFORMING TO
.SH 準拠
POSIX.1-2001.
.\"O .SH NOTES
.SH 注意

.\"O Since
.\"O .BR getsubopt ()
.\"O overwrites any commas it finds in the string
.\"O .I *optionp ,
.\"O that string must be writable; it cannot be a string constant.
.BR getsubopt ()
は、文字列
.RI * optionp
中に見つけたカンマを上書きするので、文字列
.I *optionp
は書き込み可能でなければならず、
文字列定数にすることはできない。
.\"O .SH EXAMPLE
.SH 例
.\"O The following program expects suboptions following a "\-o" option.
以下のプログラムは "\-o" オプションに続いてサブオプションがあることを
期待している。

.nf
#define _XOPEN_SOURCE 500
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

int main(int argc, char **argv)
{
    enum {
        RO_OPT = 0,
        RW_OPT,
        NAME_OPT
    };
    char *const token[] = {
        [RO_OPT]   = "ro",
        [RW_OPT]   = "rw",
        [NAME_OPT] = "name",
        NULL
    };
    char *subopts;
    char *value;
    int opt;

    int readonly = 0;
    int readwrite = 0;
    char *name = NULL;
    int errfnd = 0;

    while ((opt = getopt(argc, argv, "o:")) != \-1) {
        switch (opt) {
        case \(aqo\(aq:
            subopts = optarg;
            while (*subopts != \(aq\\0\(aq && !errfnd) {

            switch (getsubopt(&subopts, token, &value)) {
            case RO_OPT:
                readonly = 1;
                break;

            case RW_OPT:
                readwrite = 1;
                break;

            case NAME_OPT:
                if (value == NULL) {
                    fprintf(stderr, "Missing value for "
                            "suboption \(aq%s\(aq\\n", token[NAME_OPT]);
                    errfnd = 1;
                    continue;
                }

                name = value;
                break;

            default:
                fprintf(stderr, "No match found "
                        "for token: /%s/\\n", value);
                errfnd = 1;
                break;
            }
        }
        if (readwrite && readonly) {
            fprintf(stderr, "Only one of \(aq%s\(aq and \(aq%s\(aq can be "
                    "specified\\n", token[RO_OPT], token[RW_OPT]);
            errfnd = 1;
        }
        break;

        default:
            errfnd = 1;
        }
    }

    if (errfnd || argc == 1) {
        fprintf(stderr, "\\nUsage: %s \-o <suboptstring>\\n", argv[0]);
        fprintf(stderr, "suboptions are \(aqro\(aq, \(aqrw\(aq, "
                "and \(aqname=<value>\(aq\\n");
        exit(EXIT_FAILURE);
    }

    /* Remainder of program... */

    exit(EXIT_SUCCESS);
}
.fi
.\"O .SH SEE ALSO
.SH 関連項目
.BR getopt (3)
