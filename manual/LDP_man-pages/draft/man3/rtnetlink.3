.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: rtnetlink.3,v 1.3 1999/08/20 04:10:17 nakano Exp $
.\"
.\" Japanese Version Copyright (c) 1999 Shouichi Saito
.\"	all rights reserved.
.\" Translated Mon Jul 26 12:18:39 JST 1999
.\"	by Shouichi Saito <ss236rx@ymg.urban.ne.jp>
.\" Proofed Fri Aug 20 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.\"WORD:	running length	実動時の長さ
.\"
.TH RTNETLINK 3 2010-01-11 "GNU" "Linux Programmer's Manual"
.SH 名前
.\"O rtnetlink \- macros to manipulate rtnetlink messages
rtnetlink \- rtnetlink メッセージを操作するマクロ
.\"O .SH SYNOPSIS
.SH 書式
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.br
.B #include <linux/rtnetlink.h>
.br
.B #include <sys/socket.h>

.BI "rtnetlink_socket = socket(AF_NETLINK, int " socket_type \
", NETLINK_ROUTE);"
.sp
.BI "int RTA_OK(struct rtattr *" rta ", int " rtabuflen );
.sp
.BI "void *RTA_DATA(struct rtattr *" rta );
.sp
.BI "unsigned int RTA_PAYLOAD(struct rtattr *" rta );
.sp
.BI "struct rtattr *RTA_NEXT(struct rtattr *" rta \
", unsigned int " rtabuflen );
.sp
.BI "unsigned int RTA_LENGTH(unsigned int " length );
.sp
.BI "unsigned int RTA_SPACE(unsigned int "length );
.SH 説明
.\"O All
.\"O .BR rtnetlink (7)
.\"O messages consist of a
.\"O .BR netlink (7)
.\"O message header and appended attributes.
.\"O The attributes should be only
.\"O manipulated using the macros provided here.
全ての
.BR rtnetlink (7)
メッセージは
.BR netlink (7)
メッセージヘッダと追加属性からなる。
属性の操作は、必ずここに挙げたマクロを通して行うべきである。
.PP
.\"O .BI RTA_OK( rta ", " attrlen )
.\"O returns true if
.\"O .I rta
.\"O points to a valid routing attribute;
.\"O .I attrlen
.\"O is the running length of the attribute buffer.
.BI RTA_OK( rta ", " attrlen )
は
.I rta
が有効なルーティング属性へのポインタであれば真を返す。
.I attrlen
は属性バッファの実働時の長さ (running length) である。
.\"O When not true then you must assume there are no more attributes in the
.\"O message, even if
.\"O .I attrlen
.\"O is nonzero.
真でなければ、例え
.I attrlen
がゼロでなくても、
メッセージ中にはもうそれ以上属性は無いと考えなければならない。
.PP
.\"O .BI RTA_DATA( rta )
.\"O returns a pointer to the start of this attribute's data.
.BI RTA_DATA( rta )
はこの属性データの先頭へのポインタを返す。
.PP
.\"O .BI RTA_PAYLOAD( rta )
.\"O returns the length of this attribute's data.
.BI RTA_PAYLOAD( rta )
はこの属性データの長さを返す。
.PP
.\"O .BI RTA_NEXT( rta ", " attrlen )
.\"O gets the next attribute after
.\"O .IR rta .
.BI RTA_NEXT( rta ", " attrlen )
は
.I rta
の次にある属性を取得する。
.\"O Calling this macro will update
.\"O .IR attrlen .
.\"O You should use
.\"O .B RTA_OK
.\"O to check the validity of the returned pointer.
このマクロを呼ぶと
.I attrlen
が更新される。
.B RTA_OK
を使って、返されたポインタが正しいかをチェックすべきである。
.PP
.\"O .BI RTA_LENGTH( len )
.\"O returns the length which is required for
.\"O .I len
.\"O bytes of data plus the header.
.BI RTA_LENGTH( len )
は
.I len
バイトのデータ + ヘッダに必要な長さを返す。
.PP
.\"O .BI RTA_SPACE( len )
.\"O returns the amount of space which will be needed in a message with
.\"O .I len
.\"O bytes of data.
.BI RTA_SPACE( len )
は
.I len
バイトのデータを持つメッセージに必要とされる容量を返す。
.\"O .SH CONFORMING TO
.SH 準拠
.\"O These macros are nonstandard Linux extensions.
これらのマクロは非標準で、Linux での拡張である。
.SH バグ
.\"O This manual page is incomplete.
このマニュアルは完全ではない。
.SH 例
.\" FIXME ? would be better to use libnetlink in the EXAMPLE code here
.\"O
.\"O Creating a rtnetlink message to set the MTU of a device.
デバイスの MTU をセットする rtnetlink メッセージを生成する
.nf
    #include <linux/rtnetlink.h>

    ...

    struct {
        struct nlmsghdr  nh;
        struct ifinfomsg if;
        char             attrbuf[512];
    } req;

    struct rtattr *rta;
    unsigned int mtu = 1000;

    int rtnetlink_sk = socket(AF_NETLINK, SOCK_DGRAM, NETLINK_ROUTE);

    memset(&req, 0, sizeof(req));
    req.nh.nlmsg_len = NLMSG_LENGTH(sizeof(struct ifinfomsg));
    req.nh.nlmsg_flags = NLM_F_REQUEST;
    req.nh.nlmsg_type = RTM_NEWLINK;
    req.if.ifi_family = AF_UNSPEC;
    req.if.ifi_index = INTERFACE_INDEX;
    req.if.ifi_change = 0xffffffff; /* ???*/
    rta = (struct rtattr *)(((char *) &req) +
                                  NLMSG_ALIGN(req.nh.nlmsg_len));
    rta\->rta_type = IFLA_MTU;
    rta\->rta_len = sizeof(unsigned int);
    req.n.nlmsg_len = NLMSG_ALIGN(req.nh.nlmsg_len) +
                                  RTA_LENGTH(sizeof(mtu));
    memcpy(RTA_DATA(rta), &mtu, sizeof(mtu));
    send(rtnetlink_sk, &req, req.nh.nlmsg_len);
.fi
.SH 関連項目
.BR netlink (3),
.BR netlink (7),
.BR rtnetlink (7)
