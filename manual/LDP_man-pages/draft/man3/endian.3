.\" Copyright (C) 2009, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" a few pieces remain from an earlier version
.\" Copyright (C) 2008, Nanno Langstraat <nal@ii.nl>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH ENDIAN 3 2010\-09\-10 GNU "Linux Programmer's Manual"
.SH 名前
htobe16, htole16, be16toh, le16toh, htobe32, htole32, be32toh, le32toh,
htobe64, htole64, be64toh, le64toh \- convert values between host and
big\-/little\-endian byte order
.SH 書式
.nf
\fB#define _BSD_SOURCE\fP             /* See feature_test_macros(7) */
\fB#include <endian.h>\fP

\fBuint16_t htobe16(uint16_t \fP\fIhost_16bits\fP\fB);\fP
\fBuint16_t htole16(uint16_t \fP\fIhost_16bits\fP\fB);\fP
\fBuint16_t be16toh(uint16_t \fP\fIbig_endian_16bits\fP\fB);\fP
\fBuint16_t le16toh(uint16_t \fP\fIlittle_endian_16bits\fP\fB);\fP

\fBuint32_t htobe32(uint32_t \fP\fIhost_32bits\fP\fB);\fP
\fBuint32_t htole32(uint32_t \fP\fIhost_32bits\fP\fB);\fP
\fBuint32_t be32toh(uint32_t \fP\fIbig_endian_32bits\fP\fB);\fP
\fBuint32_t le32toh(uint32_t \fP\fIlittle_endian_32bits\fP\fB);\fP

\fBuint64_t htobe64(uint64_t \fP\fIhost_64bits\fP\fB);\fP
\fBuint64_t htole64(uint64_t \fP\fIhost_64bits\fP\fB);\fP
\fBuint64_t be64toh(uint64_t \fP\fIbig_endian_64bits\fP\fB);\fP
\fBuint64_t le64toh(uint64_t \fP\fIlittle_endian_64bits\fP\fB);\fP
.fi
.SH 説明
These functions convert the byte encoding of integer values from the byte
order that the current CPU (the "host") uses, to and from little\-endian and
big\-endian byte order.

The number, \fInn\fP, in the name of each function indicates the size of
integer handled by the function, either 16, 32, or 64 bits.

The functions with names of the form "htobe\fInn\fP" convert from host byte
order to big\-endian order.

The functions with names of the form "htole\fInn\fP" convert from host byte
order to little\-endian order.

The functions with names of the form "be\fInn\fPtoh" convert from big\-endian
order to host byte order.

The functions with names of the form "le\fInn\fPtoh" convert from little\-endian
order to host byte order.
.SH バージョン
These function were added to glibc in version 2.9.
.SH 準拠
These functions are nonstandard.  Similar functions are present on the BSDs,
where the required header file is \fI<sys/endian.h>\fP instead of
\fI<endian.h>\fP.  Unfortunately, NetBSD, FreeBSD, and glibc haven't
followed the original OpenBSD naming convention for these functions, whereby
the \fInn\fP component always appears at the end of the function name (thus,
for example, in NetBSD, FreeBSD, and glibc, the equivalent of OpenBSDs
"betoh32" is "be32toh").
.SH 注意
These functions are similar to the older \fBbyteorder\fP(3)  family of
functions.  For example, \fBbe32toh\fP()  is identical to \fBntohl\fP()\fB.\fP

The advantage of the \fBbyteorder\fP(3)  functions is that they are standard
functions available on all UNIX systems.  On the other hand, the fact that
they were designed for use in the context of TCP/IP means that they lack the
64\-bit and little\-endian variants described in this page.
.SH 例
The program below display the results of converting an integer from host
byte order to both little\-endian and big\-endian byte order.  Since host byte
order is either little\-endian or big\-endian, only one of these conversions
will have an effect.  When we run this program on a little\-endian system
such as x86\-32, we see the following:
.in +4n
.nf

$ \fB./a.out\fP
x.u32 = 0x44332211
htole32(x.u32) = 0x44332211
htobe32(x.u32) = 0x11223344
.fi
.in
.SS プログラムのソース
\&
.nf
#include <endian.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    union {
	uint32_t u32;
	uint8_t arr[4];
    } x;

    x.arr[0] = 0x11;	/* Lowest\-address byte */
    x.arr[1] = 0x22;
    x.arr[2] = 0x33;
    x.arr[3] = 0x44;	/* Highest\-address byte */

    printf("x.u32 = 0x%x\en", x.u32);
    printf("htole32(x.u32) = 0x%x\en", htole32(x.u32));
    printf("htobe32(x.u32) = 0x%x\en", htobe32(x.u32));

    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
\fBbyteorder\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.40 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
