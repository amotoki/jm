.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)dbopen.3	8.5 (Berkeley) 1/2/94
.\"
.\" Japanese Version Copyright (c) 1999 Shouichi Saito
.\"	all rights reserved.
.\" Translated Thu Jul 22 00:00:00 JST 1999
.\"	by Shouichi Saito <ss236rx@ymg.urban.ne.jp>
.\" Proofed Tue Aug 19 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.\"WORD:	descriptor	デスクリプタ
.TH DBOPEN 3 1994-01-02 "" "Linux Programmer's Manual"
.UC 7
.\"O .SH NAME
.SH 名前
.\"O dbopen \- database access methods
dbopen \- データベースアクセスメソッド
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <sys/types.h>
.B #include <limits.h>
.B #include <db.h>

.BI "DB *dbopen(const char *" file ", int " flags ", int " mode \
", DBTYPE " type ,
.BI "           const void *" openinfo );
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR dbopen ()
.\"O is the library interface to database files.
.BR dbopen ()
はデータベースファイルに対するライブラリインターフェースである。
.\"O The supported file formats are btree, hashed and UNIX file oriented.
.\"O The btree format is a representation of a sorted, balanced tree structure.
.\"O The hashed format is an extensible, dynamic hashing scheme.
.\"O The flat-file format is a byte stream file with fixed or variable length
.\"O records.
サポートされているファイルフォーマットは btree, hash,
UNIX ファイルに指向したフォーマット, の 3 つである。
btree フォーマットは、ソートされたバランスツリー構造である。
hashed フォーマットは、拡張可能な動的 hash スキームである。
フラットファイル (flat-file) フォーマットは、
固定長/可変長のレコードからなるバイトストリームファイルである。
.\"O The formats and file format specific information are described in detail
.\"O in their respective manual pages
.\"O .BR btree (3),
.\"O .BR hash (3)
.\"O and
.\"O .BR recno (3).
それぞれのフォーマットと、ファイルフォーマットに特有の情報は
それぞれ対応するマニュアルページ
.BR btree (3),
.BR hash (3),
.BR recno (3)
に詳細に記述されている。
.PP
.\"O .BR dbopen ()
.\"O opens
.\"O .I file
.\"O for reading and/or writing.
.BR dbopen ()
は
.I file
を読み込み (読み書き) するためにオープンする。
.\"O Files never intended to be preserved on disk may be created by setting
.\"O the
.\"O .I file
.\"O argument to NULL.
.I file
引き数を NULL にすれば、
ディスク上に保存したくないファイルを作ることもできる。
.PP
.\"O The
.\"O .I flags
.\"O and
.\"O .I mode
.\"O arguments are as specified to the
.\"O .BR open (2)
.\"O routine, however, only the
.\"O .BR O_CREAT ,
.\"O .BR O_EXCL ,
.\"O .BR O_EXLOCK ,
.\"O .BR O_NONBLOCK ,
.\"O .BR O_RDONLY ,
.\"O .BR O_RDWR ,
.\"O .BR O_SHLOCK ,
.\"O and
.\"O .B O_TRUNC
.\"O flags are meaningful.
.I flags
と
.I mode
引き数は
.BR open (2)
ルーチンで指定するのと同様である。ただし
意味を持つフラグは
.BR O_CREAT ,
.BR O_EXCL ,
.BR O_EXLOCK ,
.BR O_NONBLOCK ,
.BR O_RDONLY ,
.BR O_RDWR ,
.BR O_SHLOCK ,
.B O_TRUNC
だけである。
.\"O (Note, opening a database file
.\"O .B O_WRONLY
.\"O is not possible.)
(注意:
.B O_WRONLY
でデータベースファイルを開く事は出来ない)
.\"Three additional options may be specified by ORing
.\"them into the
.\".I flags
.\"argument.
.\".TP
.\"DB_LOCK
.\"Do the necessary locking in the database to support concurrent access.
.\"If concurrent access isn't needed or the database is read-only this
.\"flag should not be set, as it tends to have an associated performance
.\"penalty.
.\".TP
.\"DB_SHMEM
.\"Place the underlying memory pool used by the database in shared
.\"memory.
.\"Necessary for concurrent access.
.\".TP
.\"DB_TXN
.\"Support transactions in the database.
.\"The DB_LOCK and DB_SHMEM flags must be set as well.
.PP
.\"O The
.\"O .I type
.\"O argument is of type
.\"O .I DBTYPE
.\"O (as defined in the
.\"O .I <db.h>
.\"O include file) and
.\"O may be set to
.\"O .BR DB_BTREE ,
.\"O .BR DB_HASH ,
.\"O or
.\"O .BR DB_RECNO .
.I type
引き数は
.I DBTYPE
型である (インクルードファイル
.I <db.h>
で定義されている)。
.BR DB_BTREE ,
.BR DB_HASH ,
.B DB_RECNO
のいずれかをセットできる。
.PP
.\"O The
.\"O .I openinfo
.\"O argument is a pointer to an access method specific structure described
.\"O in the access method's manual page.
.\"O If
.\"O .I openinfo
.\"O is NULL, each access method will use defaults appropriate for the system
.\"O and the access method.
.I openinfo
引き数はアクセスメソッドに固有な構造体へのポインタである。
それぞれの構造体に関しては各アクセスメソッドの
マニュアルページに記述されている。
.I openinfo
が NULL の場合、それぞれのアクセスメソッドとシステムとに適合した
デフォルトが用いられる。
.PP
.\"O .BR dbopen ()
.\"O returns a pointer to a
.\"O .I DB
.\"O structure on success and NULL on error.
.\"O The
.\"O .I DB
.\"O structure is defined in the
.\"O .I <db.h>
.\"O include file, and contains at
.\"O least the following fields:
.BR dbopen ()
は、成功した場合
.I DB
構造体へのポインタを、エラーの場合 NULL を返す。
.I DB
構造体は
.I <db.h>
インクルードファイルの中で定義されており、
少なくとも以下のようなフィールドを持っている。
.sp
.in +4n
.nf
typedef struct {
    DBTYPE type;
    int (*close)(const DB *db);
    int (*del)(const DB *db, const DBT *key, unsigned int flags);
    int (*fd)(const DB *db);
    int (*get)(const DB *db, DBT *key, DBT *data,
               unsigned int flags);
    int (*put)(const DB *db, DBT *key, const DBT *data,
               unsigned int flags);
    int (*sync)(const DB *db, unsigned int flags);
    int (*seq)(const DB *db, DBT *key, DBT *data,
               unsigned int flags);
} DB;
.fi
.in
.PP
.\"O These elements describe a database type and a set of functions performing
.\"O various actions.
.\"O These functions take a pointer to a structure as returned by
.\"O .BR dbopen (),
.\"O and sometimes one or more pointers to key/data structures and a flag value.
各要素には、データベースのタイプと、
様々な動作をする関数のセットが記述されている。
これらの関数は
.BR dbopen ()
によって返される構造体へのポインタを引き数にとる。
キー/データ構造体へのポインタやフラグ値を取るものもある。
.TP
.I type
.\"O The type of the underlying access method (and file format).
用いられているアクセスメソッド (とファイルフォーマット) の型。
.TP
.I close
.\"O A pointer to a routine to flush any cached information to disk, free any
.\"O allocated resources, and close the underlying file(s).
キャッシュされた情報をディスクに掃きだすためのルーチンへのポインタ。
割り当てられたリソースを解放し、利用したファイル(群)をクローズする。
.\"O Since key/data pairs may be cached in memory, failing to sync the file
.\"O with a
.\"O .I close
.\"O or
.\"O .I sync
.\"O function may result in inconsistent or lost information.
キー/データ対がメモリにキャッシュされている場合、
.I close
や
.I sync
関数での同期に失敗すると、情報に矛盾が生じるか情報を失う可能性がある。
.\"O .I close
.\"O routines return \-1 on error (setting
.\"O .IR errno )
.\"O and 0 on success.
.I close
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功すると 0 を返す。
.TP
.I del
.\"O A pointer to a routine to remove key/data pairs from the database.
データベースからキー/データ対を削除するルーチンへのポインタ。
.IP
.\"O The argument
.\"O .I flag
.\"O may be set to the following value:
.I flag
引き数は次の値がセットできる。
.RS
.TP
.B R_CURSOR
.\"O Delete the record referenced by the cursor.
.\"O The cursor must have previously been initialized.
カーソル (cursor) が参照しているレコードを削除する。
カーソルは前もって初期化されていなくてはならない。
.RE
.IP
.\"O .I delete
.\"O routines return \-1 on error (setting
.\"O .IR errno ),
.\"O 0 on success, and 1 if the specified
.\"O .I key
.\"O was not in the file.
.I delete
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功すると 0 を返す。また指定の
.I key
がファイル中に無い場合 1 を返す。
.TP
.I fd
.\"O A pointer to a routine which returns a file descriptor representative
.\"O of the underlying database.
用いているデータベースのファイルデスクリプタを返すルーチン
へのポインタ。
.\"O A file descriptor referencing the same file will be returned to all
.\"O processes which call
.\"O .BR dbopen ()
.\"O with the same
.\"O .I file
.\"O name.
同じファイル名
.I file
で
.BR dbopen ()
を呼び出した全てのプロセスに対して、
そのファイルを示す単一のファイルデスクリプタが返される。
.\"O This file descriptor may be safely used as an argument to the
.\"O .BR fcntl (2)
.\"O and
.\"O .BR flock (2)
.\"O locking functions.
このファイルデスクリプタはロック関数
.BR fcntl (2)
と
.BR flock (2)
への引き数として安全に使用できる。
.\"O The file descriptor is not necessarily associated with any of the
.\"O underlying files used by the access method.
.\"O No file descriptor is available for in memory databases.
.\"O .I fd
.\"O routines return \-1 on error (setting
.\"O .IR errno ),
.\"O and the file descriptor on success.
このファイルデスクリプタは、必ずしもアクセスメソッドで
用いられているファイルのいずれかに関連づけられていなくても良い。
メモリ内のデータベースにはファイルデスクリプタは無い。
.I fd
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功するとファイルデスクリプタを返す。
.TP
.I get
.\"O A pointer to a routine which is the interface for keyed retrieval from
.\"O the database.
データベースからキーを用いてデータを取り出すための
ルーチンへのポインタ。
.\"O The address and length of the data associated with the specified
.\"O .I key
.\"O are returned in the structure referenced by
.\"O .IR data .
指定した
.I key
に関連づけられたデータのアドレスと長さが
.I data
が参照する構造体に返される。
.\"O .I get
.\"O routines return \-1 on error (setting
.\"O .IR errno ),
.\"O 0 on success, and 1 if the
.\"O .I key
.\"O was not in the file.
.I get
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功すると 0 を返す。また
.I key
がファイル中に無い場合 1 を返す。
.TP
.I put
.\"O A pointer to a routine to store key/data pairs in the database.
キー/データ対をデータベースに納めるルーチンへのポインタ。
.IP
.\"O The argument
.\"O .I flag
.\"O may be set to one of the following values:
.I flag
引き数には次の値のうちのどれか一つがセットできる。
.RS
.TP
.B R_CURSOR
.\"O Replace the key/data pair referenced by the cursor.
.\"O The cursor must have previously been initialized.
カーソルが参照しているキー/データ対を置き換える。
カーソルは前もって初期化されている必要がある。
.TP
.B R_IAFTER
.\"O Append the data immediately after the data referenced by
.\"O .IR key ,
.\"O creating a new key/data pair.
.\"O The record number of the appended key/data pair is returned in the
.\"O .I key
.\"O structure.
.\"O (Applicable only to the
.\"O .B DB_RECNO
.\"O access method.)
.I key
で参照されるデータの直後に、
新しいキー/データ対を作ってデータを追加する。
追加されたキー/データ対のレコード番号は
.I key
構造体に返される。
.RB ( DB_RECNO
アクセス方法でのみ使える。)
.TP
.B R_IBEFORE
.\"O Insert the data immediately before the data referenced by
.\"O .IR key ,
.\"O creating a new key/data pair.
.\"O The record number of the inserted key/data pair is returned in the
.\"O .I key
.\"O structure.
.\"O (Applicable only to the
.\"O .B DB_RECNO
.\"O access method.)
.I key
で参照されるデータの直前に、
新しいキー/データ対を作ってデータを挿入する。
追加されたキー/データ対のレコード番号は
.I key
構造体に返される。
.RB ( DB_RECNO
アクセスメソッドでのみ使える。)
.TP
.B R_NOOVERWRITE
.\"O Enter the new key/data pair only if the key does not previously exist.
キーがあらかじめ存在しない場合に限り、新しいキー/データ対をいれる。
.TP
.B R_SETCURSOR
.\"O Store the key/data pair, setting or initializing the position of the
.\"O cursor to reference it.
.\"O (Applicable only to the
.\"O .B DB_BTREE
.\"O and
.\"O .B DB_RECNO
.\"O access methods.)
キー/データ対を納め、それを指すようにカーソル位置をセットあるいは初期
化する。
.RB ( DB_BTREE
と
.B DB_RECNO
アクセスメソッドでのみ使える。)
.RE
.IP
.\"O .B R_SETCURSOR
.\"O is available only for the
.\"O .B DB_BTREE
.\"O and
.\"O .B DB_RECNO
.\"O access
.\"O methods because it implies that the keys have an inherent order
.\"O which does not change.
.B R_SETCURSOR
は
.B DB_BTREE
と
.B DB_RECNO
アクセスメソッドでしか利用できない。
なぜなら
.B R_SETCURSOR
を用いるには、変更される事の無い固有の順序をキー
が持っていなければならないからである。
.IP
.\"O .B R_IAFTER
.\"O and
.\"O .B R_IBEFORE
.\"O are available only for the
.\"O .B DB_RECNO
.\"O access method because they each imply that the access method is able to
.\"O create new keys.
.\"O This is only true if the keys are ordered and independent, record numbers
.\"O for example.
.B R_IAFTER
と
.B R_IBEFORE
は
.B DB_RECNO
アクセスメソッドでしか利用できない。
これらを実現するには、アクセスメソッドが
新しいキーを作れなければならないからである。
これが成立するのは、例えば、順序づけらた独立なレコード番号が
キーになっているような場合だけである。
.IP
.\"O The default behavior of the
.I put
.\"O routines is to enter the new key/data pair, replacing any previously
.\"O existing key.
ルーチンのデフォルトの動作は、新しいキー/データ対を
既に存在するキーを置き換える事て格納する動作である。
.IP
.I put
.\"O routines return \-1 on error (setting
.\"O .IR errno ),
.\"O 0 on success, and 1 if the
.\"O .B R_NOOVERWRITE
.\"O .I flag
.\"O was set and the key already exists in the file.
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功すると 0 を返す。また
.I flag
に
.B R_NOOVERWRITE
がセットされていてキーが既に存在する場合 1 を返す。
.TP
.I seq
.\"O A pointer to a routine which is the interface for sequential
.\"O retrieval from the database.
.\"O The address and length of the key are returned in the structure
.\"O referenced by
.\"O .IR key ,
.\"O and the address and length of the data are returned in the
.\"O structure referenced
.\"O by
.\"O .IR data .
データベースからシーケンシャルにデータを取り出すための
ルーチンへのポインタ。
キーのアドレスと長さが
.I key
が参照する構造体に返される。データのアドレスと長さが
.I data
が参照する構造体に返される。
.IP
.\"O Sequential key/data pair retrieval may begin at any time, and the
.\"O position of the "cursor" is not affected by calls to the
シーケンシャルなキー/データ対の取得はいつでも行える。また
「カーソル」の位置は
.IR del ,
.IR get ,
.IR put ,
.\"O or
.I sync
.\"O routines.
ルーチンの呼び出しには影響されない。
.\"O Modifications to the database during a sequential scan will be reflected
.\"O in the scan, that is,
.\"O records inserted behind the cursor will not be returned
.\"O while records inserted in front of the cursor will be returned.
シーケンシャルなスキャンの途中に行われたデータベースへの変更は
スキャンに反映される。すなわち、カーソルの後ろに挿入されたレコードは
返されないが、カーソルの前に挿入されたレコードは返される。
.IP
.\"O The flag value
.\"O .B must
.\"O be set to one of the following values:
フラグ値には\fB必ず\fP以下に示すうちの
どれか一つをセットしなければならない。
.RS
.TP
.B R_CURSOR
.\"O The data associated with the specified key is returned.
.\"O This differs from the
.\"O .I get
.\"O routines in that it sets or initializes the cursor to the location of
.\"O the key as well.
.\"O (Note, for the
.\"O .B DB_BTREE
.\"O access method, the returned key is not necessarily an
.\"O exact match for the specified key.
.\"O The returned key is the smallest key greater than or equal to the specified
.\"O key, permitting partial key matches and range searches.)
指定したキーに関連づけられたデータが返される。
.I get
ルーチンとの違いは、カーソルがキーの位置にセットあるいは
初期化される点である。
(注意:
.B DB_BTREE
アクセス方法では、返されたキーが
必ずしも指定したキーに正しくマッチしないかもしれない。
返されたキーは、指定されたキーに等しいかより大きいもののうち
最小のものになる
(部分キーマッチか範囲検索が許可されている場合)。)
.TP
.B R_FIRST
.\"O The first key/data pair of the database is returned, and the cursor
.\"O is set or initialized to reference it.
データベースの最初のキー/データ対が返される。
カーソルはそれを参照するようにセットまたは初期化される。
.TP
.B R_LAST
.\"O The last key/data pair of the database is returned, and the cursor
.\"O is set or initialized to reference it.
.\"O (Applicable only to the
.\"O .B DB_BTREE
.\"O and
.\"O .B DB_RECNO
.\"O access methods.)
データベースの最後のキー/データ対が返される。カーソルはそれを参照する
ようにセットまたは初期化される。
.RB ( DB_BTREE
と
.B DB_RECNO
アクセスメソッドだけで使える。)
.TP
.B R_NEXT
.\"O Retrieve the key/data pair immediately after the cursor.
.\"O If the cursor is not yet set, this is the same as the
.\"O .B R_FIRST
.\"O flag.
カーソル直後のキー/データ対を取得する。
カーソルがセットされていない場合は
.B R_FIRST
フラグと同じ。
.TP
.B R_PREV
.\"O Retrieve the key/data pair immediately before the cursor.
.\"O If the cursor is not yet set, this is the same as the
.\"O .B R_LAST
.\"O flag.
.\"O (Applicable only to the
.\"O .B DB_BTREE
.\"O and
.\"O .B DB_RECNO
.\"O access methods.)
カーソル直前のキー/データ対を取得する。
カーソルがセットされていない場合は
.B R_LAST
フラグと同じ。
.RB ( DB_BTREE
と
.B DB_RECNO
アクセスメソッドだけで使える。)
.RE
.IP
.\"O .B R_LAST
.\"O and
.\"O .B R_PREV
.\"O are available only for the
.\"O .B DB_BTREE
.\"O and
.\"O .B DB_RECNO
.\"O access methods because they each imply that the keys have an inherent
.\"O order which does not change.
.B R_LAST
と
.B R_PREV
は、
.B DB_BTREE
と
.B DB_RECNO
アクセス方法でしか使えない。
なぜなら
.B R_SETCURSOR
を用いるには、変更される事の無い固有の順序をキーが持っていなければならないからである。
.IP
.I seq
.\"O routines return \-1 on error (setting
.\"O .IR errno ),
.\"O 0 on success and 1 if there are no key/data pairs less than or greater
.\"O than the specified or current key.
.\"O If the
.\"O .B DB_RECNO
.\"O access method is being used, and if the database file
.\"O is a character special file and no complete key/data pairs are currently
.\"O available, the
.\"O .I seq
.\"O routines return 2.
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、
成功の場合 0 を返す。
指定したキーやカレントキーよりも大きい/小さいキー/データ対がない場合は
1 を返す。
.B DB_RECNO
アクセスメソッドを使っていて、
かつデータベースファイルが文字型のスペシャルファイルで、
完成しているキー/データ対が無い場合には、
.I seq
ルーチンは 2 を返す。
.TP
.I sync
.\"O A pointer to a routine to flush any cached information to disk.
.\"O If the database is in memory only, the
.\"O .I sync
.\"O routine has no effect and will always succeed.
キャッシュされた情報をディスクに掃き出すルーチンへのポインタ。
データベースがメモリの中だけにある場合、
.I sync
ルーチンは何の効果もなく常に成功する。
.IP
.\"O The flag value may be set to the following value:
flag には以下の値がセットできる。
.RS
.TP
.B R_RECNOSYNC
.\"O If the
.\"O .B DB_RECNO
.\"O access method is being used, this flag causes
.\"O the sync routine to apply to the btree file which underlies the
.\"O recno file, not the recno file itself.
.B DB_RECNO
アクセスメソッドを使っている場合に
このフラグをセットすると、
recno ファイルそのものにではなく、
そのベースになっている btree ファイルに sync が行われる。
.\"O (See the
.\"O .I bfname
.\"O field of the
.\"O .BR recno (3)
.\"O manual page for more information.)
(詳細は
.BR recno (3)
マニュアルページで
.I bfname
フィールドを説明している部分を参照のこと。)
.RE
.IP
.I sync
.\"O routines return \-1 on error (setting
.\"O .IR errno )
.\"O and 0 on success.
ルーチンはエラーの場合 \-1 を返し
.RI ( errno
をセットする)、成功すると 0 を返す。
.\"O .SS "Key/Data Pairs"
.SS キー/データ対
.\"O Access to all file types is based on key/data pairs.
.\"O Both keys and data are represented by the following data structure:
全てのファイルタイプにおいて、
キー/データ対をベースにしてアクセスが行われる。
キーとデータのいずれも、次のデータ構造で記述される。
.in +4n
.nf

typedef struct {
    void  *data;
    size_t size;
} DBT;
.fi
.in
.\"O The elements of the
.\"O .I DBT
.\"O structure are defined as follows:
.I DBT
構造体の各要素は次のように定義されている。
.TP
.I data
.\"O A pointer to a byte string.
バイト文字列へのポインタ。
.TP
.I size
.\"O The length of the byte string.
バイト文字列の長さ。
.PP
.\"O Key and data byte strings may reference strings of essentially unlimited
.\"O length although any two of them must fit into available memory at the same
.\"O time.
キーとデータのバイト文字列は、
基本的には無制限の長さの文字列を参照できるが、
しかしいずれも使用可能なメモリに収まっていなくてはならない。
.\"O It should be noted that the access methods provide no guarantees about
.\"O byte string alignment.
アクセスメソッドはバイト文字列のアラインメントについては
何も保証していない事に注意すること。
.SH エラー
.\"O The
.\"O .BR dbopen ()
.\"O routine may fail and set
.\"O .I errno
.\"O for any of the errors specified for the library routines
.\"O .BR open (2)
.\"O and
.\"O .BR malloc (3)
.\"O or the following:
.BR dbopen ()
ルーチンは失敗するとライブラリルーチン
.BR open (2)
と
.BR malloc (3)
で指定されているエラーに応じた
.I errno
をセットする。あるいは以下をセットする。
.TP
.B [EFTYPE]
.\"O A file is incorrectly formatted.
ファイルが正しくフォーマットされていない。
.TP
.B [EINVAL]
.\"O A parameter has been specified (hash function, pad byte etc.) that is
.\"O incompatible with the current file specification or which is not
.\"O meaningful for the function (for example, use of the cursor without
.\"O prior initialization) or there is a mismatch between the version
.\"O number of file and the software.
指定したパラメータ(ハッシュ関数、バイト埋めなど)が現在のファイル仕様に
合っていない、パラメータが関数にとって無意味
(例えばあらかじめ初期化しないでカーソルを使うとか)、
ファイルとソフトウェアのバージョンが合っていない。
.PP
.\"O The
.I close
.\"O routines may fail and set
ルーチンは失敗するとライブラリルーチン
.\"O .I errno
.\"O for any of the errors specified for the library routines
.BR close (2),
.BR read (2),
.BR write (2),
.BR free (3),
.\"O or
.BR fsync (2)
で指定されているエラーに応じた
.I errno
をセットする。
.PP
.\"O The
.IR del ,
.IR get ,
.I put
.\"O and
と
.I seq
.\"O routines may fail and set
ルーチンは失敗するとライブラリルーチン
.\"O .I errno
.\"O for any of the errors specified for the library routines
.BR read (2),
.BR write (2),
.BR free (3),
.\"O or
.BR malloc (3)
で指定されているエラーに応じた
.I errno
をセットする。
.PP
.\"O The
.\"O .I fd
.\"O routines will fail and set
.\"O .I errno
.\"O to
.\"O .B ENOENT
.\"O for in memory databases.
.I fd
ルーチンはメモリ内データベースに対し失敗すると
.I errno
に
.B ENOENT
をセットする。
.PP
.\"O The
.I sync
.\"O routines may fail and set
ルーチンは失敗するとライブラリルーチン
.\"O .I errno
.\"O for any of the errors specified for the library routine
.BR fsync (2)
で指定されているエラーに応じた
.I errno
をセットする。
.SH バグ
.\"O The typedef
.\"O .I DBT
.\"O is a mnemonic for "data base thang", and was used
.\"O because no-one could think of a reasonable name that wasn't already used.
typedef
.I DBT
は ``data base thang''の略語であるが、これが使われているのは、
まだ使われていない妥当な名前が思い付かなかったためである。
.PP
.\"O The file descriptor interface is a kludge and will be deleted in a
.\"O future version of the interface.
ファイルデスクリプタを使ったやりとりはひどい代物であり、
将来のバージョンでは削除されるだろう。
.PP
.\"O None of the access methods provide any form of concurrent access,
.\"O locking, or transactions.
どのアクセスメソッドも、同時アクセス、ロック、トランザクション
の仕組みは備えていない。
.SH 関連項目
.BR btree (3),
.BR hash (3),
.BR mpool (3),
.BR recno (3)
.sp
.IR "LIBTP: Portable, Modular Transactions for UNIX" ,
Margo Seltzer, Michael Olson, USENIX proceedings, Winter 1992.
