.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETSERVENT_R 3 2010\-09\-10 GNU "Linux Programmer's Manual"
.SH 名前
getservent_r, getservbyname_r, getservbyport_r \- get service entry
(reentrant)
.SH 書式
.nf
\fB#include <netdb.h>\fP
.sp
\fBint getservent_r(struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.sp
\fBint getservbyname_r(const char *\fP\fIname\fP\fB, const char *\fP\fIproto\fP\fB,\fP
\fB                struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.sp
\fBint getservbyport_r(int \fP\fIport\fP\fB, const char *\fP\fIproto\fP\fB,\fP
\fB                struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.sp
.fi
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.ad l
.in
.sp
\fBgetservent_r\fP(), \fBgetservbyname_r\fP(), \fBgetservbyport_r\fP():
.RS 4
_BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH 説明
The \fBgetservent_r\fP(), \fBgetservbyname_r\fP(), and \fBgetservbyport_r\fP()
functions are the reentrant equivalents of, respectively, \fBgetservent\fP(3),
\fBgetservbyname\fP(3), and \fBgetservbyport\fP(3).  They differ in the way that
the \fIservent\fP structure is returned, and in the function calling signature
and return value.  This manual page describes just the differences from the
nonreentrant functions.

Instead of returning a pointer to a statically allocated \fIservent\fP
structure as the function result, these functions copy the structure into
the location pointed to by \fIresult_buf\fP.

.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer -- mtk.
The \fIbuf\fP array is used to store the string fields pointed to by the
returned \fIservent\fP structure.  (The nonreentrant functions allocate these
strings in static storage.)  The size of this array is specified in
\fIbuflen\fP.  If \fIbuf\fP is too small, the call fails with the error \fBERANGE\fP,
and the caller must try again with a larger buffer.  (A buffer of length
1024 bytes should be sufficient for most applications.)

If the function call successfully obtains a service record, then \fI*result\fP
is set pointing to \fIresult_buf\fP; otherwise, \fI*result\fP is set to NULL.
.SH 返り値
On success, these functions return 0.  On error, they return one of the
positive error numbers listed in errors.

On error, record not found (\fBgetservbyname_r\fP(), \fBgetservbyport_r\fP()), or
end of input (\fBgetservent_r\fP())  \fIresult\fP is set to NULL.
.SH エラー
.TP 
\fBENOENT\fP
(\fBgetservent_r\fP())  No more records in database.
.TP 
\fBERANGE\fP
\fIbuf\fP is too small.  Try again with a larger buffer (and increased
\fIbuflen\fP).
.SH 準拠
These functions are GNU extensions.  Functions with similar names exist on
some other systems, though typically with different calling signatures.
.SH 例
The program below uses \fBgetservbyport_r\fP()  to retrieve the service record
for the port and protocol named in its first command\-line argument.  If a
third (integer) command\-line argument is supplied, it is used as the initial
value for \fIbuflen\fP; if \fBgetservbyport_r\fP()  fails with the error
\fBERANGE\fP, the program retries with larger buffer sizes.  The following
shell session shows a couple of sample runs:
.in +4n
.nf

$\fB ./a.out 7 tcp 1\fP
ERANGE! Retrying with larger buffer
getservbyport_r() returned: 0 (success)  (buflen=87)
s_name=echo; s_proto=tcp; s_port=7; aliases=
$\fB ./a.out 77777 tcp\fP
getservbyport_r() returned: 0 (success)  (buflen=1024)
Call failed/record not found
.fi
.in
.SS プログラムのソース
\&
.nf
#define _GNU_SOURCE
#include <ctype.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define MAX_BUF 10000

int
main(int argc, char *argv[])
{
    int buflen, erange_cnt, port, s;
    struct servent result_buf;
    struct servent *result;
    char buf[MAX_BUF];
    char *protop;
    char **p;

    if (argc < 3) {
        printf("Usage: %s port\-num proto\-name [buflen]\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    port = htons(atoi(argv[1]));
    protop = (strcmp(argv[2], "null") == 0 ||
	      strcmp(argv[2], "NULL") == 0) ?  NULL : argv[2];

    buflen = 1024;
    if (argc > 3)
        buflen = atoi(argv[3]);

    if (buflen > MAX_BUF) {
        printf("Exceeded buffer limit (%d)\en", MAX_BUF);
        exit(EXIT_FAILURE);
    }

    erange_cnt = 0;
    do {
        s = getservbyport_r(port, protop, &result_buf,
                     buf, buflen, &result);
        if (s == ERANGE) {
            if (erange_cnt == 0)
                printf("ERANGE! Retrying with larger buffer\en");
            erange_cnt++;

            /* Increment a byte at a time so we can see exactly
               what size buffer was required */

            buflen++;

            if (buflen > MAX_BUF) {
                printf("Exceeded buffer limit (%d)\en", MAX_BUF);
                exit(EXIT_FAILURE);
            }
        }
    } while (s == ERANGE);

    printf("getservbyport_r() returned: %s  (buflen=%d)\en",
            (s == 0) ? "0 (success)" : (s == ENOENT) ? "ENOENT" :
            strerror(s), buflen);

    if (s != 0 || result == NULL) {
        printf("Call failed/record not found\en");
        exit(EXIT_FAILURE);
    }

    printf("s_name=%s; s_proto=%s; s_port=%d; aliases=",
                result_buf.s_name, result_buf.s_proto,
                ntohs(result_buf.s_port));
    for (p = result_buf.s_aliases; *p != NULL; p++)
        printf("%s ", *p);
    printf("\en");

    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
\fBgetservent\fP(3), \fBservices\fP(5)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.40 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
