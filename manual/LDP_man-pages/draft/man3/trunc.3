.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2001, 2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sun Jul  8 10:40:20 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified Sun Jan 16 08:20:45 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH TRUNC 3  2008-08-11 "" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O trunc, truncf, truncl \- round to integer, towards zero
trunc, truncf, truncl \- 0 に近い方の整数値に丸める
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <math.h>
.sp
.BI "double trunc(double " x );
.br
.BI "float truncf(float " x );
.br
.BI "long double truncl(long double " x );
.fi
.sp
.\"O Link with \fI\-lm\fP.
\fI\-lm\fP でリンクする。
.sp
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR trunc (),
.BR truncf (),
.BR truncl ():
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE; or
.I cc\ -std=c99
.ad b
.\"O .SH DESCRIPTION
.SH 説明
.\"O These functions round \fIx\fP to the nearest integer
.\"O not larger in absolute value.
これらの関数は絶対値が \fIx\fP より小さい
一番近い整数値に \fIx\fP を丸める。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O These functions return the rounded integer value.
これらの関数は丸められた整数値を返す。

.\"O If \fIx\fP is integral, infinite, or NaN, \fIx\fP itself is returned.
\fIx\fP が整数、無限大、NaN の場合、\fIx\fP 自身が返される。
.\"O .SH ERRORS
.SH エラー
.\"O No errors occur.
エラーは発生しない。
.\"O .SH VERSIONS
.SH バージョン
.\"O These functions first appeared in glibc in version 2.1.
これらの関数は glibc バージョン 2.1 で初めて登場した。
.\"O .SH "CONFORMING TO"
.SH 準拠
C99, POSIX.1-2001.
.\"O .SH NOTES
.SH 注意
.\"O The integral value returned by these functions may be too large
.\"O to store in an integer type
.\"O .RI ( int ,
.\"O .IR long ,
.\"O etc.).
.\"O To avoid an overflow, which will produce undefined results,
.\"O an application should perform a range check on the returned value
.\"O before assigning it to an integer type.
これらの関数が返す整数値は整数型
.RI ( int ,
.I long
など) に格納するには大き過ぎるかもしれない。
オーバーフローが起こった場合の結果は分からないので、
オーバーフローを避けるため、アプリケーションでは整数型に代入する前に
返された値の範囲確認を実行すべきである。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR ceil (3),
.BR floor (3),
.BR lrint (3),
.BR nearbyint (3),
.BR rint (3),
.BR round (3)
