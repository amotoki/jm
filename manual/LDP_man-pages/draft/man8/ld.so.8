.\" This is in the public domain
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated 1998-05-23, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified 1999-09-14, NAKANO Takeo
.\" Updated & Modified 2002-01-17, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2002-07-15, Yuichi SATO
.\" Updated 2007-06-13, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.55
.\" Updated 2010-04-23, Akihiro MOTOKI, LDP v3.24
.\"
.TH LD.SO 8 2009-01-12 "GNU" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O ld.so, ld-linux.so* \- dynamic linker/loader
.SH 名前
ld.so, ld-linux.so* \- 動的なリンカ/ローダ
.\"O .SH SYNOPSIS
.SH 書式
.\"O The dynamic linker can be run either indirectly by running some
.\"O dynamically linked program or library (in which case no command-line options
.\"O to the dynamic linker can be passed and, in the ELF case, the dynamic linker
.\"O which is stored in the
.\"O .B .interp
.\"O section of the program is executed) or directly by running:
.\"O .P
.\"O .I /lib/ld-linux.so.*
.\"O [OPTIONS] [PROGRAM [ARGUMENTS]]
動的リンカは、動的にリンクされたプログラムやライブラリの実行によって
間接的に実行することができる
(ELF の場合、動的リンカにコマンドラインオプションを渡すことはできず、
プログラムの
.B .interp
セクションに入っている動的リンカが実行される)。
また以下のように直接実行することもできる
.P
.I /lib/ld-linux.so.*
[OPTIONS] [PROGRAM [ARGUMENTS]]
.\"O .SH DESCRIPTION
.SH 説明
.\"O The programs
.\"O .B ld.so
.\"O and
.\"O .B ld-linux.so*
.\"O find and load the shared libraries needed by a program, prepare
.\"O the program to run, and then run it.
プログラム
.B ld.so
と
.B ld-linux.so*
はプログラムに必要な共有ライブラリを見つけてロードし、
プログラムの実行を準備してから起動させる。
.LP
.\"O Linux binaries require dynamic linking (linking at run time)
.\"O unless the
.\"O .B \-static
.\"O option was given to
.\"O .BR ld (1)
.\"O during compilation.
Linux のバイナリは、コンパイルの時に
.BR ld (1)
に対して
.B \-static
オプションが指定されていない限り、動的リンク (実行時リンク) が必要となる。
.LP
.\"O The program
.\"O .B ld.so
.\"O handles a.out binaries, a format used long ago;
プログラム
.B ld.so
は a.out バイナリを扱う。
これはずっと昔に使われていたフォーマットである。
.\"O .B ld-linux.so*
.\"O handles ELF (\fI/lib/ld-linux.so.1\fP for libc5, \fI/lib/ld-linux.so.2\fP
.\"O for glibc2), which everybody has been using for years now.
.B ld-linux.so*
(libc5 では \fI/lib/ld-linux.so.1\fP,
glibc2 では \fI/lib/ld-linux.so.2\fP)
は ELF バイナリを扱う。
このフォーマットは多くの人が最近何年も使っている。
.\"O Otherwise both have the same behavior, and use the same
.\"O support files and programs
.\"O .BR ldd (1),
.\"O .BR ldconfig (8)
.\"O and
.\"O .IR /etc/ld.so.conf .
それ以外の点では両方とも同じように動作し、
同じサポートファイルとプログラム
.BR ldd (1),
.BR ldconfig (8),
.I /etc/ld.so.conf
を使用する。
.LP
.\"O The shared libraries needed by the program are searched for
.\"O in the following order:
プログラムで必要とされる共有ライブラリは、
以下の順序で検索される。
.IP o 3
.\"O (ELF only) Using the directories specified in the
.\"O DT_RPATH dynamic section attribute
.\"O of the binary if present and DT_RUNPATH attribute does not exist.
.\"O Use of DT_RPATH is deprecated.
(ELF のみ)
バイナリの動的セクション属性 DT_RPATH が存在し、
DT_RUNPATH 属性が存在しない場合は、
DT_RPATH で指定されたディレクトリを使用する。
DT_RPATH の使用は推奨されない。
.IP o
.\"O Using the environment variable
.\"O .BR LD_LIBRARY_PATH .
.\"O Except if the executable is a set-user-ID/set-group-ID binary,
.\"O in which case it is ignored.
環境変数
.B LD_LIBRARY_PATH
を用いる。
ただし実行ファイルが set-user-ID/set-group-ID バイナリの場合、
これは無視される。
.IP o
.\"O (ELF only) Using the directories specified in the
.\"O DT_RUNPATH dynamic section attribute
.\"O of the binary if present.
(ELF のみ)
バイナリの動的セクション属性 DT_RUNPATH が存在すれば、
DT_RUNPATH で指定されたディレクトリを使用する。
.IP o
.\"O From the cache file
.\"O .I /etc/ld.so.cache
.\"O which contains a compiled list of candidate libraries previously found
.\"O in the augmented library path.
.\"O If, however, the binary was linked with the
.\"O .B \-z nodeflib
.\"O linker option, libraries in the default library paths are skipped.
キャッシュファイル
.I /etc/ld.so.cache
を探す。このファイルは、
(ld.so.conf で追加指定されたものも含めた) ライブラリ検索パスから
見つかったライブラリファイルの情報を集めたものである。
ただしバイナリがリンカオプション
.B \-z nodeflib
でリンクされている場合は、デフォルトのライブラリパスにある
ライブラリはスキップされる。
.IP o
.\"O In the default path
.\"O .IR /lib ,
.\"O and then
.\"O .IR /usr/lib .
デフォルトパスである
.IR /lib 、
次いで
.I /usr/lib
を用いる。
.\"O If the binary was linked with the
.\"O .B \-z nodeflib
.\"O linker option, this step is skipped.
バイナリがリンカオプション
.B \-z nodeflib
でリンクされている場合、このステップはスキップされる。
.\"O .SS $ORIGIN and rpath
.SS $ORIGIN と rpath
.PP
.\"O .B ld.so
.\"O understands the string
.\"O .I $ORIGIN
.\"O (or equivalently
.\"O .IR ${ORIGIN} )
.\"O in an rpath specification (DT_RPATH or DT_RUNPATH) to mean
.\"O the directory containing the application executable.
.B ld.so
では、rpath 指定 (DT_RPATH や DT_RUNPATH) 中に
.I $ORIGIN
という文字列
.RI ( ${ORIGIN}
も等価) を使うことができる。
.I $ORIGIN
はアプリケーションの実行ファイルが入っているディレクトリを表す。
.\"O Thus, an application located in
.\"O .I somedir/app
.\"O could be compiled with
.\"O .I gcc -Wl,-rpath,\(aq$ORIGIN/../lib\(aq
.\"O so that it finds an associated shared library in
.\"O .I somedir/lib
.\"O no matter where
.\"O .I somedir
.\"O is located in the directory hierarchy.
これを使って
.I somedir/app
に置かれたアプリケーションを
.I gcc -Wl,-rpath,'$ORIGIN/../lib'
でコンパイルすると、
.I somedir
がディレクトリ階層のどこにあっても、アプリケーションは
.I somedir/lib
にある対応する共有ライブラリを見つけることができる。
.\"O This facilitates the creation of "turn-key" applications that
.\"O do not need to be installed into special directories,
.\"O but can instead be unpacked into any directory
.\"O and still find their own shared libraries.
この機能を使うと、
特別なディレクトリではなく任意のディレクトリにインストールしても
"ややこしい設定なしで"
独自の共有ライブラリを使えるアプリケーションを作成することができる。
.\" ld.so also understands $LIB, with the same meaning as $ORIGIN/lib,
.\" it appears.
.\"
.\" There is also $PLATFORM.  This is a kind of wildcard
.\" of directories related at AT_HWCAP.  To get an idea of the
.\" places that $PLATFORM would match, look at the output of the
.\" following:
.\"
.\" mkdir /tmp/d
.\" LD_LIBRARY_PATH=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $O will work for $ORIGIN;
.\" Don't do this!!
.\"O .SH OPTIONS
.SH オプション
.TP
.B \-\-list
.\"O List all dependencies and how they are resolved.
全ての依存関係とその解決法をリストする。
.TP
.B \-\-verify
.\"O Verify that program is dynamically linked and this dynamic linker can handle
.\"O it.
プログラムが動的にリンクされているかと、
動的リンカがそのプログラムを扱えるかを検証する。
.TP
.B \-\-library\-path PATH
.\"O Override
.\"O .B LD_LIBRARY_PATH
.\"O environment variable setting (see below).
.B LD_LIBRARY_PATH
環境変数の設定を上書きする (下記参照)。
.TP
.B \-\-inhibit\-rpath LIST
.\"O Ignore RPATH and RUNPATH information in object names in LIST.
.\"O This option is ignored if
.\"O .B ld.so
.\"O is set-user-ID or set-group-ID.
LIST にあるオブジェクト名の RPATH と RUNPATH の情報を無視する。
.B ld.so
が set-user-ID か set-group-ID されている場合、
このオプションは無視される。
.\"O .SH ENVIRONMENT
.SH 環境変数
.\"O There are four important environment variables.
4 つの重要な環境変数がある。
.TP
.B LD_BIND_NOW
.\"O (libc5; glibc since 2.1.1)
.\"O If set to a nonempty string,
.\"O causes the dynamic linker to resolve all symbols
.\"O at program startup instead of deferring function call resolution to the point
.\"O when they are first referenced.
.\"O This is useful when using a debugger.
(libc5; glibc 2.1.1 以降)
空文字列でない場合、
動的リンカはプログラムの開始時に全てのシンボルを解決する。
空文字列の場合、解決しなければならない関数呼び出しが
最初に参照された時点で解決する。
デバッガを使っているときに役立つ。
.TP
.B LD_LIBRARY_PATH
.\"O A colon-separated list of directories in which to search for
.\"O ELF libraries at execution-time.
.\"O Similar to the
.\"O .B PATH
.\"O environment variable.
コロン区切りのディレクトリリスト。
実行時に ELF ライブラリを検索するディレクトリを指定する。
.B PATH
環境変数と同じように指定する。
.TP
.B LD_PRELOAD
.\"O A whitespace-separated list of additional, user-specified, ELF shared
.\"O libraries to be loaded before all others.
.\"O This can be used to selectively override functions in other shared libraries.
スペース区切りで ELF 共有ライブラリを指定する。
これはユーザーが指定でき、すべてのライブラリに先立ってロードされる。
他の共有ライブラリにある関数を選択的に置き換えるために用いることができる。
.\"O For set-user-ID/set-group-ID ELF binaries,
.\"O only libraries in the standard search
.\"O directories that are also set-user-ID will be loaded.
set-user-ID/set-group-ID された ELF バイナリに対して、
標準的な検索パスにあるライブラリのうち set-user-ID されているものはロードしない。
.TP
.B LD_TRACE_LOADED_OBJECTS
.\"O (ELF only)
.\"O If set to a nonempty string, causes the program to list its dynamic library
.\"O dependencies, as if run by
.\"O .BR ldd (1),
.\"O instead of running normally.
(ELF のみ)
空文字列でない場合、
プログラムを普通に実行するのではなく、
.BR ldd (1)
を実行したときのように動的ライブラリの依存関係をリスト表示させる。
.LP
.\"O Then there are lots of more or less obscure variables,
.\"O many obsolete or only for internal use.
そして、それほど知られていない環境変数もある。
多くは廃れてしまったものか内部でのみ使用される環境変数である。
.TP
.B LD_AOUT_LIBRARY_PATH
(libc5)
.\"O Version of
.\"O .B LD_LIBRARY_PATH
.\"O for a.out binaries only.
.\"O Old versions of ld\-linux.so.1 also supported
.\"O .BR LD_ELF_LIBRARY_PATH .
a.out バイナリにのみ使われる環境変数で、
.B LD_LIBRARY_PATH
と同じ役割をする。
ld\-linux.so.1 の古いバージョンでは
.B LD_ELF_LIBRARY_PATH
もサポートしていた。
.TP
.B LD_AOUT_PRELOAD
(libc5)
.\"O Version of
.\"O .B LD_PRELOAD
.\"O for a.out binaries only.
.\"O Old versions of ld\-linux.so.1 also supported
.\"O .BR LD_ELF_PRELOAD .
a.out バイナリにのみ使われる環境変数で、
.B LD_PRELOAD
と同じ役割をする。
ld\-linux.so.1 の古いバージョンでは
.B LD_ELF_PRELOAD
もサポートしていた。
.TP
.B LD_AUDIT
.\"O (glibc since 2.4)
(glibc 2.4 以降)
.\"O A colon-separated list of user-specified, ELF shared objects
.\"O to be loaded before all others in a separate linker namespace
.\"O (i.e., one that does not intrude upon the normal symbol bindings that
.\"O would occur in the process).
.\"O These libraries can be used to audit the operation of the dynamic linker.
.\"O .B LD_AUDIT
.\"O is ignored for set-user-ID/set-group-ID binaries.
他のオブジェクトよりも前に、別のリンカ名前空間 (そのプロセスで行われる
通常のシンボル結合 (symbol bindigns) には関与しない名前空間) で
ロードされる、ユーザ指定の ELF 共有オブジェクトのコロン区切りのリスト。
これらのライブラリを使って、動的リンカの動作を監査することができる。
set-user-ID/set-group-ID されたバイナリでは、
.B LD_AUDIT
は無視される。

.\"O The dynamic linker will notify the audit
.\"O libraries at so-called auditing checkpoints\(emfor example,
.\"O loading a new library, resolving a symbol,
.\"O or calling a symbol from another shared object\(emby
.\"O calling an appropriate function within the audit library.
動的リンカは、いわゆる監査チェックポイント (auditing checkpoints)
において、監査 (audit) ライブラリの適切な関数を呼び出すことで、
監査ライブラリへの通知を行う。監査チェックポイントの例としては、
新たなライブラリのロード、シンボルの解決、別の共有オブジェクト
からのシンボルの呼び出し、などがある。
.\"O For details, see
.\"O .BR rtld-audit (7).
.\"O The auditing interface is largely compatible with that provided on Solaris,
.\"O as described in its
.\"O .IR "Linker and Libraries Guide" ,
.\"O in the chapter
.\"O .IR "Runtime Linker Auditing Interface" .
詳細は
.BR rtld-audit (7)
を参照してほしい。
audit インタフェースは、Solaris で提供されているものと
大部分は互換性がある。Solaris の audit インタフェースについては、
.I "Linker and Libraries Guide"
の
.I "Runtime Linker Auditing Interface"
の章に説明がある。
.TP
.B LD_BIND_NOT
.\"O (glibc since 2.1.95)
.\"O Do not update the GOT (global offset table) and PLT (procedure linkage table)
.\"O after resolving a symbol.
(glibc 2.1.95 以降)
シンボルを解決した後、GOT (global offset table) と
PLT (procedure linkage table) を更新しない。
.TP
.B LD_DEBUG
.\"O (glibc since 2.1)
.\"O Output verbose debugging information about the dynamic linker.
.\"O If set to
.\"O .B all
.\"O prints all debugging information it has, if set to
.\"O .B help
.\"O prints a help message about which categories can be specified in this
.\"O environment variable.
.\"O Since glibc 2.3.4,
.\"O .B LD_DEBUG
.\"O is ignored for set-user-ID/set-group-ID binaries.
(glibc 2.1 以降)
動的リンカの詳細なデバッグ情報を出力する。
.B all
に設定した場合、全ての動的リンカが持つデバッグ情報を表示する。
.B help
に設定した場合、この環境変数で指定されるカテゴリのヘルプ情報を表示する。
glibc 2.3.4 以降、
set-user-ID/set-group-ID されたバイナリでは
.B LD_DEBUG
は無視される。
.TP
.B LD_DEBUG_OUTPUT
.\"O (glibc since 2.1)
.\"O File where
.\"O .B LD_DEBUG
.\"O output should be fed into, default is standard output.
.\"O .B LD_DEBUG_OUTPUT
.\"O is ignored for set-user-ID/set-group-ID binaries.
(glibc 2.1 以降)
.B LD_DEBUG
の出力を書き込むファイル。
デフォルトは標準出力である。
set-user-ID/set-group-ID されたバイナリでは、
.B LD_DEBUG_OUTPUT
は無視される。
.TP
.B LD_DYNAMIC_WEAK
.\"O (glibc since 2.1.91)
.\"O Allow weak symbols to be overridden (reverting to old glibc behavior).
.\"O For security reasons, since glibc 2.3.4,
.\"O .B LD_DYNAMIC_WEAK
.\"O is ignored for set-user-ID/set-group-ID binaries.
(glibc 2.1.19 以降)
上書きされる弱いシンボル (昔の glibc の挙動を逆にする)。
セキュリティ上の理由から、glibc 2.3.4 以降、
set-user-ID/set-group-ID されたバイナリでは
.B LD_DYNAMIC_WEAK
は無視される。
.TP
.B LD_HWCAP_MASK
.\"O (glibc since 2.1)
.\"O Mask for hardware capabilities.
(glibc 2.1 以降)
ハードウェア機能のマスク。
.TP
.B LD_KEEPDIR
.\"O (a.out only)(libc5)
.\"O Don't ignore the directory in the names of a.out libraries to be loaded.
.\"O Use of this option is strongly discouraged.
(a.out のみ)(libc5)
ロードする a.out ライブラリの名前において、ディレクトリを無視しない。
このオプションは用いるべきではない。
.TP
.B LD_NOWARN
.\"O (a.out only)(libc5)
.\"O Suppress warnings about a.out libraries with incompatible minor
.\"O version numbers.
(a.out のみ)(libc5)
a.out ライブラリにおけるマイナーバージョン番号の非互換に
対する警告メッセージを抑制する。
.TP
.B LD_ORIGIN_PATH
.\"O (glibc since 2.1)
.\"O Path where the binary is found (for non-set-user-ID programs).
.\"O For security reasons, since glibc 2.4,
.\"O .B LD_ORIGIN_PATH
.\"O is ignored for set-user-ID/set-group-ID binaries.
(glibc 2.1 以降)
バイナリへのパス (set-user-ID されていないプログラムについて)。
セキュリティ上の理由から、glibc 2.3.4 以降、
set-user-ID/set-group-ID されたバイナリでは
.B LD_ORIGIN_PATH
は無視される。
.\" Only used if $ORIGIN can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
.TP
.B LD_POINTER_GUARD
.\"O (glibc since 2.4)
(glibc 2.4 以降)
.\"O Set to 0 to disable pointer guarding.
.\"O Any other value enables pointer guarding, which is also the default.
.\"O Pointer guarding is a security mechanism whereby some pointers to code
.\"O stored in writable program memory (return addresses saved by
.\"O .BR setjmp (3)
.\"O or function pointers used by various glibc internals) are mangled
.\"O semi-randomly to make it more difficult for an attacker to hijack
.\"O the pointers for use in the event of a buffer overrun or
.\"O stack-smashing attack.
0 に設定すると、ポインタ保護 (pointer guarding) が無効になる。
それ以外の値の場合はポインタ保護が有効になる。
デフォルトはポインタ保護有効である。
ポインタ保護はセキュリティ機構の一つで、書き込み可能なプログラムメモリ
に格納されたコードへのポインタをほぼランダム化することで、
攻撃者がバッファオーバーランやスタック破壊 (stack-smashing) 攻撃の際に
ポインタを乗っ取ることを困難にするものである。
.TP
.B LD_PROFILE
.\"O (glibc since 2.1)
.\"O Shared object to be profiled,
.\"O specified either as a pathname or a soname.
.\"O Profiling output is written to the file whose name is:
.\"O "\fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP.profile".
(glibc 2.1 以降)
プロファイルを行う共有オブジェクト。
パス名か共有オブジェクト名 (soname) で指定される。
プロフィールの出力は
"\fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP.profile" という名前の
ファイルに書き込まれる。
.TP
.B LD_PROFILE_OUTPUT
.\"O (glibc since 2.1)
.\"O Directory where
.\"O .B LD_PROFILE
.\"O output should be written.
.\"O If this variable is not defined, or is defined as an empty string,
.\"O then the default is
.\"O .IR /var/tmp .
.\"O .B LD_PROFILE_OUTPUT
.\"O is ignored for set-user-ID and set-group-ID programs,
.\"O which always use
.\"O .IR /var/profile .
(glibc 2.1 以降)
.B LD_PROFILE
の出力が書き込まれるディレクトリ。
この変数が定義されていないか、空の文字列が定義されている場合、
デフォルト値は
.I /var/tmp
となる。
set-user-ID/set-group-ID されたプログラムでは、
LD_PROFILE_OUTPUT は無視される。
出力ファイルは常に
.I /var/profile
が使用される。
.TP
.B LD_SHOW_AUXV
.\"O (glibc since 2.1)
.\"O Show auxiliary array passed up from the kernel.
.\"O For security reasons, since glibc 2.3.5,
.\"O .B LD_SHOW_AUXV
.\"O is ignored for set-user-ID/set-group-ID binaries.
(glibc 2.1 以降)
カーネルから渡される補助的な (パラメータの) 配列を表示する。
セキュリティ上の理由から、glibc 2.3.4 以降、
set-user-ID/set-group-ID されたバイナリでは
.B LD_SHOW_AUXV
は無視される。
.\" FIXME
.\" Document LD_TRACE_PRELINKING (e.g.: LD_TRACE_PRELINKING=libx1.so ./prog)
.\" Since glibc 2.3
.\" Also enables DL_DEBUG_PRELINK
.TP
.B LD_USE_LOAD_BIAS
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" Subject: [PATCH] Support LD_USE_LOAD_BIAS
.\" Jakub Jelinek
.\"O By default (i.e., if this variable is not defined)
.\"O executables and prelinked
.\"O shared objects will honor base addresses of their dependent libraries
.\"O and (nonprelinked) position-independent executables (PIEs)
.\"O and other shared objects will not honor them.
デフォルトでは (つまり、この変数が定義されていない場合)、
実行ファイルと prelink された共有オブジェクトでは、それらが依存する
ライブラリのベースアドレスが尊重される一方、
(prelink されていない) position-independent executables (PIEs) と
他の共有オブジェクトでは依存するライブラリのベースアドレスは
尊重されない。
.\"O If
.\"O .B LD_USE_LOAD_BIAS
.\"O is defined wit the value, both executables and PIEs
.\"O will honor the base addresses.
.B LD_USE_LOAD_BIAS
に値が定義された場合、実行ファイルと PIE のどちらでも
ベースアドレスが尊重される。
.\"O If
.\"O .B LD_USE_LOAD_BIAS
.\"O is defined with the value 0,
.\"O neither executables nor PIEs will honor the base addresses.
.B LD_USE_LOAD_BIAS
が値 0 で定義された場合、実行ファイルと PIE のどちらでも
ベースアドレスは尊重されない。
.\"O This variable is ignored by set-user-ID and set-group-ID programs.
set-user-ID や set-group-ID されたプログラムでは、
この変数は無視される。
.TP
.B LD_VERBOSE
.\"O (glibc since 2.1)
.\"O If set to a nonempty string,
.\"O output symbol versioning information about the
.\"O program if querying information about the program (i.e., either
.\"O .B LD_TRACE_LOADED_OBJECTS
.\"O has been set, or
.\"O .B \-\-list
.\"O or
.\"O .B \-\-verify
.\"O options have been given to the dynamic linker).
(glibc 2.1 以降)
空文字列でない場合に、
.RB ( LD_TRACE_LOADED_OBJECTS
を設定するか、
.B \-\-list
または
.B \-\-verify
オプションを動的リンカに指定することにより)
プログラムについての情報を問い合わせると、
プログラムのシンボルバージョン情報を表示する。
.TP
.B LD_WARN
.\"O (ELF only)(glibc since 2.1.3)
.\"O If set to a nonempty string, warn about unresolved symbols.
(ELF のみ)(glibc 2.1.3 以降)
空文字列でない場合、解決されていないシンボルがあれば警告を出す。
.TP
.B LDD_ARGV0
(libc5)
.\"O .IR argv [0]
.\"O to be used by
.\"O .BR ldd (1)
.\"O when none is present.
.BR ldd (1)
の引き数がない場合に、
.IR argv [0]
として使われる値。
.\"O .TP
.\"O .SH FILES
.SH ファイル
.PD 0
.TP
.I /lib/ld.so
.\"O a.out dynamic linker/loader
a.out の動的リンカ/ローダ
.TP
.IR /lib/ld\-linux.so. { 1 , 2 }
.\"O ELF dynamic linker/loader
ELF の動的リンカ/ローダ
.TP
.I /etc/ld.so.cache
.\"O File containing a compiled list of directories in which to search for
.\"O libraries and an ordered list of candidate libraries.
ライブラリを検索するディレクトリを集めたリストと、
共有ライブラリの候補の整列リストを含むファイル。
.TP
.I /etc/ld.so.preload
.\"O File containing a whitespace separated list of ELF shared libraries to
.\"O be loaded before the program.
プログラムの前にロードすべき ELF 共有ライブラリを
スペースで区切ったリストが書かれているファイル。
.TP
.B lib*.so*
.\"O shared libraries
共有ライブラリ
.PD
.\"O .SH NOTES
.SH 注意
.\"O The
.\"O .B ld.so
.\"O functionality is available for executables compiled using libc version
.\"O 4.4.3 or greater.
.B ld.so
の機能は libc のバージョン 4.4.3 以上を用いてコンパイルされた
実行ファイルで使用可能である。
.\"O ELF functionality is available since Linux 1.1.52 and libc5.
ELF の機能は Linux 1.1.52 以降と libc5 以降で使用可能である。
.\"O .SH SEE ALSO
.SH 関連項目
.BR ldd (1),
.BR rtld-audit (7),
.BR ldconfig (8)
.\"O .\" .SH AUTHORS
.\" .SH 著者
.\" ld.so: David Engel, Eric Youngdale, Peter MacDonald, Hongjiu Lu, Linus
.\"  Torvalds, Lars Wirzenius and Mitch D'Souza
.\"O .\" ld-linux.so: Roland McGrath, Ulrich Drepper and others.
.\" ld-linux.so: Roland McGrath, Ulrich Drepper, その他の人々
.\"
.\"O .\" In the above, (libc5) stands for David Engel's ld.so/ld-linux.so.
.\" 上記の説明において、(libc5) は David Engel の
.\" ld.so/ld-linux.so を表している。
