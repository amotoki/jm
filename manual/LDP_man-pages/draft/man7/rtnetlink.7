'\" t
.\" Don't remove the line above, it tells man that tbl is needed.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" Based on the original comments from Alexey Kuznetsov, written with
.\" help from Matthew Wilcox.
.\" $Id: rtnetlink.7,v 1.10 2001/04/04 08:02:19 ysato Exp $
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated Mon 6 Dec 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.\"WORD         queueing dicipline      キューイング(の)ルール
.\"WORD         permanent               永続的な
.\"WORD         neighbor                近傍
.\"
.TH RTNETLINK  7 2008-08-08 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O rtnetlink, NETLINK_ROUTE \- Linux IPv4 routing socket
.SH 名前
rtnetlink, NETLINK_ROUTE \- Linux IPv4 ルーティングソケット
.\"O .SH SYNOPSIS
.SH 書式
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.br
.B #include <linux/rtnetlink.h>
.br
.B #include <sys/socket.h>
.sp
.BI "rtnetlink_socket = socket(AF_NETLINK, int " socket_type ", NETLINK_ROUTE);"
.\"O .SH DESCRIPTION
.SH 説明
.\"O Rtnetlink allows the kernel's routing tables to be read and altered.
.\"O It is used within the kernel to communicate between
.\"O various subsystems, though this usage is not documented here, and for
.\"O communication with user-space programs.
.\"O Network routes, ip addresses, link parameters, neighbor setups, queueing
.\"O disciplines, traffic classes and packet classifiers may all be controlled
.\"O through
.\"O .B NETLINK_ROUTE
.\"O sockets.
.\"O It is based on netlink messages, see
.\"O .BR netlink (7)
.\"O for more information.
.B rtnetlink
はカーネルのルーティングテーブルを読んだり変更したり
するためのものである。これはカーネルが内部のサブシステムと
通信するためにも用いられているが、それはここでは記述しない。
この man ページではユーザー空間のプログラムとの通信に関してのみ述べる。
ネットワーク経路・IP アドレス・リンクパラメータ・
近傍設定 (neighbor setup)・キューイングルール (queueing dicipline)・
トラフィッククラス・パケットのクラス分類などが、すべて
.B NETLINK_ROUTE
ソケットを通して制御できる。
.B rtnetlink
は netlink メッセージをベースにしている。詳細は
.BR netlink (7)
を見ること。
.\" FIXME ? all these macros could be moved to rtnetlink(3)
.\"O .SS "Routing Attributes"
.SS ルーティング属性
.\"O Some rtnetlink messages have optional attributes after the initial header:
rtnetlink メッセージには、初期ヘッダの後に付加的な属性を
持つものがある。

.in +4n
.nf
struct rtattr {
    unsigned short rta_len;    /* Length of option */
    unsigned short rta_type;   /* Type of option */
    /* Data follows */
};
.fi
.in

.\"O These attributes should be only manipulated using the RTA_* macros
.\"O or libnetlink, see
.\"O .BR rtnetlink (3).
これらの属性の操作は、 RTA_* マクロか libnetlink を通してのみ
行うべきである。
.BR rtnetlink (3)
を見よ。
.\"O .SS Messages
.SS メッセージ
.\"O Rtnetlink consists of these message types
.\"O (in addition to standard netlink messages):
rtnetlink は (標準的な netlink メッセージに加えて)
以下のメッセージタイプから構成される。
.TP
.BR RTM_NEWLINK ", " RTM_DELLINK ", " RTM_GETLINK
.\"O Create, remove or get information about a specific network interface.
.\"O These messages contain an
.\"O .I ifinfomsg
.\"O structure followed by a series of
.\"O .I rtattr
.\"O structures.
指定したネットワークインターフェースの情報を、生成・削除・取得する。
これらのメッセージは
.I ifinfomsg
構造体と、それに続いていくつかの
.I rtattr
構造体を伴う。

.nf
struct ifinfomsg {
    unsigned char  ifi_family; /* AF_UNSPEC */
    unsigned short ifi_type;   /* Device type */
    int            ifi_index;  /* Interface index */
    unsigned int   ifi_flags;  /* Device flags  */
    unsigned int   ifi_change; /* change mask */
};
.fi

.\" FIXME ifi_type
.\"O .I ifi_flags
.\"O contains the device flags, see
.\"O .BR netdevice (7);
.\"O .I ifi_index
.\"O is the unique interface index,
.\"O .I ifi_change
.\"O is reserved for future use and should be always set to 0xFFFFFFFF.
.I ifi_flags
はデバイスのフラグである。
.BR netdevice (7)
を見よ。
.I ifi_index
は他と重ならないインターフェースの index である。
.I ifi_change
は将来の利用のために予約されており、常に
0xFFFFFFFF にセットすべきである。
.TS
tab(:);
c
l l l.
.\"O Routing attributes
.\"O rta_type:value type:description
.\"O _
.\"O IFLA_UNSPEC:-:unspecified.
.\"O IFLA_ADDRESS:hardware address:interface L2 address
.\"O IFLA_BROADCAST:hardware address:L2 broadcast address.
.\"O IFLA_IFNAME:asciiz string:Device name.
.\"O IFLA_MTU:unsigned int:MTU of the device.
.\"O IFLA_LINK:int:Link type.
.\"O IFLA_QDISC:asciiz string:Queueing discipline.
.\"O IFLA_STATS:T{
.\"O see below
.\"O T}:Interface Statistics.
ルーティング属性
rta_type:値の型:説明
_
IFLA_UNSPEC:-:指定されていない。
IFLA_ADDRESS:hardware address:T{
インターフェース L2 アドレス
T}
IFLA_BROADCAST:hardware address:T{
L2 ブロードキャストアドレス
T}
IFLA_IFNAME:asciiz string:デバイス名
IFLA_MTU:unsigned int:デバイスの MTU
IFLA_LINK:int:リンクタイプ
IFLA_QDISC:asciiz string:キューイングのルール
IFLA_STATS:T{
下記参照
T}:インターフェースの統計
.TE
.sp
.\"O The value type for IFLA_STATS is \fIstruct net_device_stats\fP.
IFLA_STATS の値の型は \fIstruct net_device_stats\fP である。
.TP
.BR RTM_NEWADDR ", " RTM_DELADDR ", " RTM_GETADDR
.\"O Add, remove or receive information about an IP address associated with
.\"O an interface.
.\"O In Linux 2.2 an interface can carry multiple IP addresses,
.\"O this replaces the alias device concept in 2.0.
.\"O In Linux 2.2 these messages
.\"O support IPv4 and IPv6 addresses.
.\"O They contain an
.\"O .I ifaddrmsg
.\"O structure, optionally followed by
.\"O .I rtaddr
.\"O routing attributes.
インターフェースの IP アドレスの情報を追加・削除・取得する。
Linux 2.2 では、一つのインターフェースに複数の IP アドレスを
保持させることができ、これは 2.0 の別名デバイスの概念を置き換える。
Linux 2.2 では、これらのメッセージは
IPv4 と IPv6 の両方のアドレスをサポートしている。
これらは
.I ifaddrmsg
構造体を伴う。そのあとに
.I rtaddr
ルーティング属性が続くこともある。

.nf
struct ifaddrmsg {
    unsigned char ifa_family;    /* Address type */
    unsigned char ifa_prefixlen; /* Prefixlength of address */
    unsigned char ifa_flags;     /* Address flags */
    unsigned char ifa_scope;     /* Address scope */
    int           ifa_index;     /* Interface index */
};
.fi

.\"O .I ifa_family
.\"O is the address family type (currently
.\"O .B AF_INET
.\"O or
.\"O .BR AF_INET6 ),
.\"O .I ifa_prefixlen
.\"O is the length of the address mask of the address if defined for the
.\"O family (like for IPv4),
.\"O .I ifa_scope
.\"O is the address scope,
.\"O .I ifa_index
.\"O is the interface index of the interface the address is associated with.
.\"O .I ifa_flags
.\"O is a flag word of
.\"O .B IFA_F_SECONDARY
.\"O for secondary address (old alias interface),
.\"O .B IFA_F_PERMANENT
.\"O for a permanent address set by the user and other undocumented flags.
.I ifa_family
はアドレスファミリーのタイプである (現在は
.B AF_INET
または
.BR AF_INET6 )。
.I ifa_prefixlen
はアドレスのアドレスマスクの長さである (IPv4 のように、
そのファミリーで定義されている場合)。
.I ifa_scope
はアドレスのスコープである。
.I ifa_index
はアドレスが関連づけられているインターフェースの index である。
.I ifa_flags
はフラグワードで、
二つめのアドレス (古い別名インターフェース) の場合は
.B IFA_F_SECONDARY
に、永続的なアドレスの場合は
.B IFA_F_PERMANENT
に適用される。ユーザーによってセットされるフラグと、
undocumented なフラグがある。
.TS
tab(:);
c
l l l.
.\"O Attributes
.\"O rta_type:value type:description
.\"O _
.\"O IFA_UNSPEC:-:unspecified.
.\"O IFA_ADDRESS:raw protocol address:interface address
.\"O IFA_LOCAL:raw protocol address:local address
.\"O IFA_LABEL:asciiz string:name of the interface
.\"O IFA_BROADCAST:raw protocol address:broadcast address.
.\"O IFA_ANYCAST:raw protocol address:anycast address
.\"O IFA_CACHEINFO:struct ifa_cacheinfo:Address information.
属性
rta_type:値の型:説明
_
IFA_UNSPEC:-:指定されていない
IFA_ADDRESS:raw protocol address:インターフェースアドレス
IFA_LOCAL:raw protocol address:ローカルアドレス
IFA_LABEL:asciiz string:インターフェースの名前
IFA_BROADCAST:raw protocol address:ブロードキャストアドレス
IFA_ANYCAST:raw protocol address:anycast アドレス
IFA_CACHEINFO:struct ifa_cacheinfo:アドレス情報
.TE
.\" FIXME struct ifa_cacheinfo
.TP
.BR RTM_NEWROUTE ", " RTM_DELROUTE ", " RTM_GETROUTE
.\"O Create, remove or receive information about a network route.
.\"O These messages contain an
.\"O .I rtmsg
.\"O structure with an optional sequence of
.\"O .I rtattr
.\"O structures following.
.\"O For
.\"O .B RTM_GETROUTE
.\"O setting
.\"O .I rtm_dst_len
.\"O and
.\"O .I rtm_src_len
.\"O to 0 means you get all entries for the specified routing table.
ネットワーク経路の情報を生成・削除・取得する。
これらのメッセージは
.I rtmsg
構造体を伴う。そのあとにいくつかの
.I rtattr
構造体を続けることもできる。
.B RTM_GETROUTE
で
.I rtm_dst_len
と
.I rtm_src_len
に 0 をセットすると、
指定されたルーティングテーブルの全てのエントリを所得する。
.\"O For the other fields except
.\"O .I rtm_table
.\"O and
.\"O .I rtm_protocol
.\"O 0 is the wildcard.
.I rtm_table
と
.I rtm_protocol
以外の他のフィールドに 0 を入れると、ワイルドカードを意味する。

.nf
struct rtmsg {
    unsigned char rtm_family;   /* Address family of route */
    unsigned char rtm_dst_len;  /* Length of destination */
    unsigned char rtm_src_len;  /* Length of source */
    unsigned char rtm_tos;      /* TOS filter */

    unsigned char rtm_table;    /* Routing table ID */
    unsigned char rtm_protocol; /* Routing protocol; see below */
    unsigned char rtm_scope;    /* See below */
    unsigned char rtm_type;     /* See below */

    unsigned int  rtm_flags;
};
.fi
.TS
tab(:);
l l.
.\"O rtm_type:Route type
.\"O _
.\"O RTN_UNSPEC:unknown route
.\"O RTN_UNICAST:a gateway or direct route
.\"O RTN_LOCAL:a local interface route
.\"O RTN_BROADCAST:T{
.\"O a local broadcast route (sent as a broadcast)
.\"O T}
.\"O RTN_ANYCAST:T{
.\"O a local broadcast route (sent as a unicast)
.\"O T}
.\"O RTN_MULTICAST:a multicast route
.\"O RTN_BLACKHOLE:a packet dropping route
.\"O RTN_UNREACHABLE:an unreachable destination
.\"O RTN_PROHIBIT:a packet rejection route
.\"O RTN_THROW:continue routing lookup in another table
.\"O RTN_NAT:a network address translation rule
.\"O RTN_XRESOLVE:T{
.\"O refer to an external resolver (not implemented)
.\"O T}
rtm_type:経路のタイプ
_
RTN_UNSPEC:未知の経路
RTN_UNICAST:ゲートウェイまたはダイレクトな経路
RTN_LOCAL:ローカルインターフェースの経路
RTN_BROADCAST:T{
ローカルなブロードキャスト経路
(ブロードキャストとして送信される)
T}
RTN_ANYCAST:T{
ローカルなブロードキャスト経路
(ユニキャストとして送信される)
T}
RTN_MULTICAST:マルチキャスト経路
RTN_BLACKHOLE:パケットを捨てる経路
RTN_UNREACHABLE:到達できない行き先
RTN_PROHIBIT:パケットを拒否する経路
RTN_THROW:経路探索を別のテーブルで継続
RTN_NAT:ネットワークアドレスの変換ルール
RTN_XRESOLVE:T{
外部レゾルバを参照 (実装されていない)
T}
.TE
.TS
tab(:);
l l.
.\"O rtm_protocol:Route origin.
.\"O _
.\"O RTPROT_UNSPEC:unknown
.\"O RTPROT_REDIRECT:T{
.\"O by an ICMP redirect (currently unused)
.\"O T}
.\"O RTPROT_KERNEL:by the kernel
.\"O RTPROT_BOOT:during boot
.\"O RTPROT_STATIC:by the administrator
rtm_protocol:経路の情報源
_
RTPROT_UNSPEC:不明
RTPROT_REDIRECT:T{
ICMP リダイレクトによる (現在は用いられない)
T}
RTPROT_KERNEL:カーネルによる
RTPROT_BOOT:ブート時
RTPROT_STATIC:管理者による
.TE

.\"O Values larger than
.\"O .B RTPROT_STATIC
.\"O are not interpreted by the kernel, they are just for user information.
.\"O They may be used to tag the source of a routing information or to
.\"O distingush between multiple routing daemons.
.\"O See
.\"O .I <linux/rtnetlink.h>
.\"O for the routing daemon identifiers which are already assigned.
.B RTPROT_STATIC
よりも大きな値はカーネルによって解釈されない。これは
単なるユーザーへの情報である。これらは経路情報の情報源を
タグ付けしたり、複数のルーティングデーモンからの情報を
区別するために用いることができる。
既に割り当てられているルーティングデーモンの識別子については
.I <linux/rtnetlink.h>
を見よ。

.\"O .I rtm_scope
.\"O is the distance to the destination:
.I rtm_scope
は行き先への距離である。

.TS
tab(:);
l l.
.\"O RT_SCOPE_UNIVERSE:global route
.\"O RT_SCOPE_SITE:T{
.\"O interior route in the local autonomous system
.\"O T}
.\"O RT_SCOPE_LINK:route on this link
.\"O RT_SCOPE_HOST:route on the local host
.\"O RT_SCOPE_NOWHERE:destination doesn't exist
RT_SCOPE_UNIVERSE:グローバルな経路
RT_SCOPE_SITE:T{
ローカルな自律システムにおける内部経路
T}
RT_SCOPE_LINK:このリンク上の経路
RT_SCOPE_HOST:ローカルホスト上の経路
RT_SCOPE_NOWHERE:行き先が存在しない
.TE

.\"O The values between
.\"O .B RT_SCOPE_UNIVERSE
.\"O and
.\"O .B RT_SCOPE_SITE
.\"O are available to the user.
ユーザーは
.B RT_SCOPE_UNIVERSE
と
.B RT_SCOPE_SITE
の間の値を用いることができる。

.\"O The
.\"O .I rtm_flags
.\"O have the following meanings:
.I rtm_flags
は以下の意味を持つ:
.TS
tab(:);
l l.
.\"O RTM_F_NOTIFY:T{
.\"O if the route changes, notify the user via rtnetlink
.\"O T}
.\"O RTM_F_CLONED:route is cloned from another route
.\"O RTM_F_EQUALIZE:a multipath equalizer (not yet implemented)
RTM_F_NOTIFY:T{
経路が変更されると、 rtnetlink を通してユーザーに通知が行く。
T}
RTM_F_CLONED:経路は他の経路によって複製された。
RTM_F_EQUALIZE:マルチパスイコライザ (まだ実装されていない)
.TE

.\"O .I rtm_table
.\"O specifies the routing table
.I rtm_table
ではルーティングテーブルを指定する。
.TS
tab(:);
l l.
.\"O RT_TABLE_UNSPEC:an unspecified routing table
.\"O RT_TABLE_DEFAULT:the default table
.\"O RT_TABLE_MAIN:the main table
.\"O RT_TABLE_LOCAL:the local table
RT_TABLE_UNSPEC:指定されていないルーティングテーブル
RT_TABLE_DEFAULT:デフォルトのテーブル
RT_TABLE_MAIN:メインのテーブル
RT_TABLE_LOCAL:ローカルテーブル
.TE

.\"O The user may assign arbitrary values between
.\"O .B RT_TABLE_UNSPEC
.\"O and
.\"O .BR RT_TABLE_DEFAULT .
ユーザーは
.B RT_TABLE_UNSPEC
と
.BR RT_TABLE_DEFAULT .
の間の任意の値を用いることができる。
.TS
tab(:);
c
l l l.
.\"O Attributes
.\"O rta_type:value type:description
.\"O _
.\"O RTA_UNSPEC:-:ignored.
.\"O RTA_DST:protocol address:Route destination address.
.\"O RTA_SRC:protocol address:Route source address.
.\"O RTA_IIF:int:Input interface index.
.\"O RTA_OIF:int:Output interface index.
.\"O RTA_GATEWAY:protocol address:The gateway of the route
.\"O RTA_PRIORITY:int:Priority of route.
.\"O RTA_PREFSRC::
.\"O RTA_METRICS:int:Route metric
.\"O RTA_MULTIPATH::
.\"O RTA_PROTOINFO::
.\"O RTA_FLOW::
.\"O RTA_CACHEINFO::
属性
rta_type:値の型:説明
_
RTA_UNSPEC:-:無視される
RTA_DST:protocol address:経路の行き先アドレス
RTA_SRC:protocol address:経路の発信元アドレス
RTA_IIF:int:入力インターフェースの index
RTA_OIF:int:出力インターフェースの index
RTA_GATEWAY:protocol address:経路のゲートウェイ
RTA_PRIORITY:int:経路の優先度
RTA_PREFSRC::
RTA_METRICS:int:経路のメトリック
RTA_MULTIPATH::
RTA_PROTOINFO::
RTA_FLOW::
RTA_CACHEINFO::
.TE

.\"O .B Fill these values in!
.B (これらの値を埋めること!)
.TP
.BR RTM_NEWNEIGH ", " RTM_DELNEIGH  ", " RTM_GETNEIGH
.\"O Add, remove or receive information about a neighbor table
.\"O entry (e.g., an ARP entry).
.\"O The message contains an
.\"O .I ndmsg
.\"O structure.
近傍テーブル (neighbor table) のエントリ
(例えば ARP エントリ) の情報を追加・削除・取得する。
このメッセージは
.I ndmsg
構造体を伴う。

.nf
struct ndmsg {
    unsigned char ndm_family;
    int           ndm_ifindex;  /* Interface index */
    __u16         ndm_state;    /* State */
    __u8          ndm_flags;    /* Flags */
    __u8          ndm_type;
};

struct nda_cacheinfo {
    __u32         ndm_confirmed;
    __u32         ndm_used;
    __u32         ndm_updated;
    __u32         ndm_refcnt;
};
.fi

.\"O .I ndm_state
.\"O is a bit mask of the following states:
.I ndm_state
は以下の状態のビットマスクである:
.TS
tab(:);
l l.
.\"O NUD_INCOMPLETE:a currently resolving cache entry
.\"O NUD_REACHABLE:a confirmed working cache entry
.\"O NUD_STALE:an expired cache entry
.\"O NUD_DELAY:an entry waiting for a timer
.\"O NUD_PROBE:a cache entry that is currently reprobed
.\"O NUD_FAILED:an invalid cache entry
.\"O NUD_NOARP:a device with no destination cache
.\"O NUD_PERMANENT:a static entry
NUD_INCOMPLETE:現在レゾルブ中のキャッシュエントリ
NUD_REACHABLE:動作確認済みのキャッシュエントリ
NUD_STALE:期限切れのキャッシュエントリ
NUD_DELAY:タイマ待ちのキャッシュエントリ
NUD_PROBE:再確認中のキャッシュエントリ
NUD_FAILED:不正なキャッシュエントリ
NUD_NOARP:行き先キャッシュのないデバイス
NUD_PERMANENT:静的なエントリ
.TE

.\"O Valid
.\"O .I ndm_flags
.\"O are:
有効な
.I ndm_flags
は以下の通り:
.TS
tab(:);
l l.
.\"O NTF_PROXY:a proxy arp entry
.\"O NTF_ROUTER:an IPv6 router
NTF_PROXY:プロクシ arp エントリ
NTF_ROUTER:IPv6 ルータ
.TE

.\" FIXME
.\" document the members of the struct better
.\"O The
.\"O .I rtaddr
.\"O struct has the following meanings for the
.\"O .I rta_type
.\"O field:
.I rtaddr
構造体は、
.I rta_type
フィールドに応じてそれぞれ以下の意味を持つ:
.TS
tab(:);
l l.
.\"O NDA_UNSPEC:unknown type
.\"O NDA_DST:a neighbor cache n/w layer destination address
.\"O NDA_LLADDR:a neighbor cache link layer address
.\"O NDA_CACHEINFO:cache statistics.
NDA_UNSPEC:未知のタイプ
NDA_DST:近傍キャッシュネットワーク層の行き先アドレス
NDA_LLADDR:近傍キャッシュリンク層のアドレス
NDA_CACHEINFO:キャッシュの統計
.TE

.\"O If the
.\"O .I rta_type
.\"O field is
.\"O .B NDA_CACHEINFO
.\"O then a
.\"O .I struct nda_cacheinfo
.\"O header follows
.I rta_type
フィールドが
.B NDA_CACHEINFO
の場合には、
.I struct nda_cacheinfo
ヘッダが続く。
.TP
.BR RTM_NEWRULE ", " RTM_DELRULE ", " RTM_GETRULE
.\"O Add, delete or retrieve a routing rule.
.\"O Carries a
.\"O .I struct rtmsg
ルーティングルールを追加・削除・取得する。
.I struct rtmsg
を伴う。
.\"O
.TP
.BR RTM_NEWQDISC ", " RTM_DELQDISC ", " RTM_GETQDISC
.\"O Add, remove or get a queueing discipline.
.\"O The message contains a
.\"O .I struct tcmsg
.\"O and may be followed by a series of
.\"O attributes.
キューイングルールを追加・削除・取得する。
このメッセージは
.I struct tcmsg
を伴い、またそのあとに属性がいくつか続くこともある。

.nf
struct tcmsg {
    unsigned char    tcm_family;
    int              tcm_ifindex;   /* interface index */
    __u32            tcm_handle;    /* Qdisc handle */
    __u32            tcm_parent;    /* Parent qdisc */
    __u32            tcm_info;
};
.fi
.TS
tab(:);
c
l l l.
.\"O Attributes
.\"O rta_type:value type:Description
.\"O _
.\"O TCA_UNSPEC:-:unspecified
.\"O TCA_KIND:asciiz string:Name of queueing discipline
.\"O TCA_OPTIONS:byte sequence:Qdisc-specific options follow
.\"O TCA_STATS:struct tc_stats:Qdisc statistics.
.\"O TCA_XSTATS:qdisc specific:Module-specific statistics.
.\"O TCA_RATE:struct tc_estimator:Rate limit.
属性
rta_type:値の型:説明
_
TCA_UNSPEC:-:指定されていない
TCA_KIND:asciiz string:キューイングルールの名前
TCA_OPTIONS:byte sequence:Qdisc 特有のオプションが続く
TCA_STATS:struct tc_stats:Qdisc の統計
TCA_XSTATS:qdisc specific:モジュール特有の統計
TCA_RATE:struct tc_estimator:レート制限
.TE

.\"O In addition various other qdisc module specific attributes are allowed.
.\"O For more information see the appropriate include files.
さらに、 qdisc モジュール特有の様々な属性を指定できる。
詳細な情報は適切なインクルードファイルを見よ。
.TP
.BR RTM_NEWTCLASS ", " RTM_DELTCLASS ", " RTM_GETTCLASS
.\"O Add, remove or get a traffic class.
.\"O These messages contain a
.\"O .I struct tcmsg
.\"O as described above.
トラフィッククラスを追加・削除・取得する。
これらのメッセージは、上述の
.I struct tcmsg
を伴う。
.TP
.BR RTM_NEWTFILTER ", " RTM_DELTFILTER ", " RTM_GETTFILTER
.\"O Add, remove or receive information about a traffic filter.
.\"O These messages contain a
.\"O .I struct tcmsg
.\"O as described above.
トラフィックフィルターの情報を追加・削除・取得する。
これらのメッセージは、上述の
.I struct tcmsg
を伴う。
.\"O .SH VERSIONS
.SH バージョン
.\"O .B rtnetlink
.\"O is a new feature of Linux 2.2.
.B rtnetlink
は Linux 2.2 の新機能である。
.\"O .SH BUGS
.SH バグ
.\"O This manual page is incomplete.
この man ページは不完全である。
.\"O .SH SEE ALSO
.SH 関連項目
.BR cmsg (3),
.BR rtnetlink (3),
.BR ip (7),
.BR netlink (7)
