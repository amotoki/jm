.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 2006, Michael Kerrisk
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2006 Akihiro MOTOKI all rights reserved.
.\" Translated 2006-07-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-09-08, Akihiro MOTOKI, LDP v2.64
.\" Updated 2009-04-23, Akihiro MOTOKI, LDP v3.21
.\"
.\"WORD:	feature test macro	機能検査マクロ
.\"WORD:	feature test macro requirements	機能検査マクロの要件
.\"
.TH FEATURE_TEST_MACROS 7 2010-09-10 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O feature_test_macros \- feature test macros
feature_test_macros \- 機能検査マクロ
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <features.h>
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O Feature test macros allow the programmer to control the definitions that
.\"O are exposed by system header files when a program is compiled.
機能検査マクロ (feature test macro) により、プログラマは
プログラムがコンパイルされる際にシステムのヘッダファイルにより
公開される定義を制御することができる。

.\"O .B NOTE:
.B 注意:
.\"O In order to be effective, a feature test macro
.\"O .IR "must be defined before including any header files" .
.\"O This can be done either in the compilation command
.\"O .RI ( "cc \-DMACRO=value" )
.\"O or by defining the macro within the source code before
.\"O including any headers.
機能検査マクロを機能させるには、機能検査マクロの定義を
「どのヘッダファイルのインクルードよりも前で」行わなければならない。
これを実現するには、
コンパイルコマンドで指定する方法
.RI ( "cc \-DMACRO=value" )
と、ソースコード内で必要なマクロの定義を
どのヘッダのインクルードよりも前で行う方法がある。

.\"O Some feature test macros are useful for creating portable applications,
.\"O by preventing nonstandard definitions from being exposed.
.\"O Other macros can be used to expose nonstandard definitions that
.\"O are not exposed by default.
.\"O The precise effects of each of the feature test macros described below
.\"O can be ascertained by inspecting the
.\"O .I <features.h>
.\"O header file.
機能検査マクロを使うと、非標準の定義が公開されないようにでき、
移植性のあるアプリケーションを作成するのに役立つ。
他のマクロを使うと、デフォルトでは公開されない非標準の定義を
公開することができる。
以下で説明する機能検査マクロのそれぞれの正確な影響を確認するには、
ヘッダファイル
.I <features.h>
を調べればよい。

.\"O .SS Specification of feature test macro requirements in manual pages
.SS マニュアルページでの機能検査マクロの要件の規定
.\"O When a function requires that a feature test macro is defined,
.\"O the manual page SYNOPSIS typically includes a note of the following form
.\"O (this example from the
.\"O .BR acct (2)
.\"O manual page):
関数が機能検査マクロの定義を必要とする場合、
マニュアルページの書式 (SYNOPSIS) の節に
以下の形式の注釈を入れる
(以下の例は
.BR acct (2)
のマニュアルページからの引用である)。
.RS 8
.sp
.B #include <unistd.h>
.sp
.BI "int acct(const char *" filename );
.sp
.nf
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.fi
.in
.sp
.BR acct ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PP
.\"O The \fB||\fP means that in order to obtain the declaration of
.\"O .BR acct (2)
.\"O from
.\"O .IR <unistd.h> ,
.\"O \fIeither\fP of the following macro
.\"O definitions must be made before including any header files:
\fB||\fP は、
.BR acct (2)
の定義を
.I <unistd.h>
から得るには、以下のマクロの定義のいずれかを、どのヘッダファイルの
インクルードよりも前で行わなければならないことを意味する。
.RS
.nf

#define _BSD_SOURCE
#define _XOPEN_SOURCE        /* or any value < 500 */
.fi
.RE
.PP
.\"O Alternatively, equivalent definitions can be included in the
.\"O compilation command:
別の方法としては、等価な定義をコンパイル用のコマンドで
指定することもできる。
.RS
.nf

cc \-D_BSD_SOURCE
cc \-D_XOPEN_SOURCE           # Or any value < 500
.fi
.RE
.PP
.\"O Note that, as described below,
.\"O .BR "some feature test macros are defined by default" ,
.\"O so that it may not always be necessary to
.\"O explicitly specify the feature test macro(s) shown in the
.\"O SYNOPSIS.
後で述べるが、
.B 「いくつかの機能検査マクロはデフォルトで定義される」
点に注意すること。
このため、「書式」に記載された機能検査マクロを常に
明示的に指定する必要があるわけではない。

.\"O In a few cases, manual pages use a shorthand for expressing the
.\"O feature test macro requirements (this example from
.\"O .BR readahead (2)):
あまり多くないが、マニュアルページによっては、
機能検査マクロの要件を以下のように簡単な表現で記載する場合がある。
(以下の例は
.BR readahead (2)
のマニュアルページからの引用である)。
.RS
.nf

.B #define _GNU_SOURCE
.B #include <fcntl.h>
.sp
.BI "ssize_t readahead(int " fd ", off64_t *" offset ", size_t " count );
.fi
.RE
.PP
.\"O This format is employed in cases where only a single
.\"O feature test macro can be used to expose the function
.\"O declaration, and that macro is not defined by default.
関数定義の公開に使える機能検査マクロが一つだけで、
デフォルトではそのマクロが定義されない場合に、
この形式の表現を利用する。
.\"O .SS Feature test macros understood by glibc
.SS glibc が解釈する機能検査マクロ
.\"O The following paragraphs explain how feature test macros are handled
.\"O in Linux glibc 2.\fIx\fP, \fIx\fP > 0.
以下では、Linux glibc 2.\fIx\fP (\fIx\fP > 0) において、
機能検査マクロがどのように扱われるかを説明する。
.\" The details in glibc 2.0 are simpler, but combining a
.\" a description of them with the details in later glibc versions
.\" would make for a complicated description.

.\"O Linux glibc understands the following feature test macros:
Linux/glibc は以下の機能検査マクロを解釈する:
.TP
.B __STRICT_ANSI__
.\"O ISO Standard C.
.\"O This macro is implicitly defined by
.\"O .BR gcc (1)
.\"O when invoked with, for example, the
.\"O .I -std=c99
.\"O or
.\"O .I -ansi
.\"O flag.
ISO 標準の C。
.BR gcc (1)
を
.I -std=c99
や
.I -ansi
などのフラグを付けて起動した場合、
このマクロは暗黙のうちに定義される。
.TP
.B _POSIX_C_SOURCE
.\"O Defining this macro causes header files to expose definitions as follows:
このマクロを定義すると、ヘッダファイルで
以下の定義が公開される。
.RS
.IP \(bu 3
.\"O The value 1 exposes definitions conforming to POSIX.1-1990 and
.\"O ISO C (1990).
値が 1 の場合、POSIX.1-1990 と ISO C (1990) に準拠する定義が公開される。
.IP \(bu
.\"O The value 2 or greater additionally exposes
.\"O definitions for POSIX.2-1992.
値が 2 以上の場合、
POSIX.2-1992 関連の定義も追加で公開される。
.IP \(bu
.\"O The value 199309L or greater additionally exposes
.\"O definitions for POSIX.1b (real-time extensions).
値が 199309 以上の場合、
POSIX.1b (リアルタイム拡張) 関連の定義が追加で公開される。
.\" 199506L functionality is only available since glibc 2.1
.IP \(bu
.\"O The value 199506L or greater additionally exposes
.\"O definitions for POSIX.1c (threads).
値が 199506 以上の場合、
POSIX.1c (スレッド) 関連の定義が追加で公開される。
.IP \(bu
.\"O (Since glibc 2.3.3)
.\"O The value 200112L or greater exposes definitions corresponding
.\"O to the POSIX.1-2001 base specification (excluding the XSI extension).
(glibc 2.3.3 以降)
値が 200112L 以上の場合、
(XSI 拡張を除く) POSIX.1-2001 基本仕様に対応する定義が公開される。
.IP \(bu
.\"O (Since glibc 2.10)
.\"O The value 200809L or greater exposes definitions corresponding
.\"O to the POSIX.1-2008 base specification (excluding the XSI extension).
(glibc 2.10 以降)
値が 200809L 以上の場合、
(XSI 拡張を除く) POSIX.1-2008 基本仕様に対応する定義が公開される。
.RE
.TP
.B _POSIX_SOURCE
.\"O Defining this obsolete macro with any value is equivalent to defining
.\"O .B _POSIX_C_SOURCE
.\"O with the value 1.
このマクロは廃止予定である。
このマクロが定義されると、値に関わらず、
.B _POSIX_C_SOURCE
を値 1 で定義するのと等価となる。
.TP
.B _XOPEN_SOURCE
.\"O Defining this macro causes header files to expose definitions as follows:
このマクロを定義すると、ヘッダファイルで以下の定義が公開される。
.RS
.IP \(bu 3
.\"O Defining with any value exposes
.\"O definitions conforming to POSIX.1, POSIX.2, and XPG4.
どんな値でも、ヘッダファイルで
POSIX.1, POSIX.2, XPG4 に準拠する定義が公開される。
.IP \(bu
.\"O The value 500 or greater additionally exposes
.\"O definitions for SUSv2 (UNIX 98).
値が 500 以上の場合、
SUSv2 (UNIX 98) 関連の定義が追加で公開される。
.IP \(bu
.\"O (Since glibc 2.2) The value 600 or greater additionally exposes
.\"O definitions for SUSv3 (UNIX 03; i.e., the POSIX.1-2001 base specification
.\"O plus the XSI extension) and C99 definitions.
(glibc 2.2 以降)
値が 600 以上の場合、
SUSv3 (UNIX 03; POSIX.1-2001 基本仕様 + XSI 拡張と同じ)
関連の定義と C99 での定義が追加で公開される。
.IP \(bu
.\"O (Since glibc 2.10) The value 700 or greater additionally exposes
.\"O definitions for SUSv4 (i.e., the POSIX.1-2008 base specification
.\"O plus the XSI extension).
(glibc 2.10 以降)
値が 700 以上の場合、
SUSv4 (POSIX.1-2008 基本仕様 + XSI 拡張と同じ)
関連の定義が追加で公開される。
.RE
.TP
.B _XOPEN_SOURCE_EXTENDED
.\"O If this macro is defined, and
.\"O .B _XOPEN_SOURCE
.\"O is defined, then expose definitions corresponding to the XPG4v2
.\"O (SUSv1) UNIX extensions (UNIX 95).
.\"O This macro is also implicitly defined if
.\"O .B _XOPEN_SOURCE
.\"O is defined with a value of 500 or more.
このマクロが定義され、さらに
.B _XOPEN_SOURCE
が定義されていると、XPG4v2 (SUSv1) UNIX 拡張 (UNIX 95)
に対応する定義が公開される。
.B _XOPEN_SOURCE
が 500 以上の値で定義された場合、このマクロは暗黙のうちに定義される。
.TP
.B _ISOC99_SOURCE
.\"O Exposes C99 extensions to ISO C (1990).
ISO C (1990) の C99 拡張を公開する。
.\"O This macro is recognized since glibc 2.1.3;
このマクロは glibc 2.1.3 以降で認識される。
.\"O earlier glibc 2.1.x versions recognized an equivalent macro named
.\"O .B _ISOC9X_SOURCE
.\"O (because the C99 standard had not then been finalized).
.\"O Although the use of the latter macro is obsolete, glibc continues
.\"O to recognize it for backward compatibility.
初期のバージョン 2.1.x の glibc では、これと等価な
.B _ISOC9X_SOURCE
という名前のマクロが使われていた
(なぜなら、C99 標準はまだ確定していなかったからである)。
.B _ISOC9X_SOURCE
マクロの使用は廃止されているが、
glibc は過去との互換性のため今でもこのマクロを認識する。
.TP
.B _LARGEFILE64_SOURCE
.\"O Expose definitions for the alternative API specified by the
.\"O LFS (Large File Summit) as a "transitional extension" to the
.\"O Single UNIX Specification.
.\"O (See http://opengroup.org/platform/lfs.html.)
LFS (Large File Summit) により
"暫定拡張 (transitional extension)" Single UNIX Specification
として規定された代替 API (alternative API) に関する定義を公開する
(http://opengroup.org/platform/lfs.html 参照)。
.\"O The alternative API consists of a set of new objects
.\"O (i.e., functions and types) whose names are suffixed with "64"
.\"O (e.g.,
.\"O .I off64_t
.\"O versus
.\"O .IR off_t ,
.\"O .BR lseek64 ()
.\"O versus
.\"O .BR lseek (),
.\"O etc.).
代替 API は新規オブジェクト (関数と型) の集合で構成され、
その名前は "64" で終わる (例えば、
.I off_t
に対応するのは
.IR off64_t 、
.BR lseek ()
に対応するのは
.BR lseek64 ()
である)。
.\"O New programs should not employ this interface; instead
.\"O .I _FILE_OFFSET_BITS=64
.\"O should be employed.
新しいプログラムではこのインタフェースを利用しないこと。
代わりに
.I _FILE_OFFSET_BITS=64
を利用すること。
.TP
.B _FILE_OFFSET_BITS
.\"O Defining this macro with the value 64
.\"O automatically converts references to 32-bit functions and data types
.\"O related to file I/O and file system operations into references to
.\"O their 64-bit counterparts.
.\"O This is useful for performing I/O on large files (> 2 Gigabytes)
.\"O on 32-bit systems.
.\"O (Defining this macro permits correctly written programs to use
.\"O large files with only a recompilation being required.)
.\"O 64-bit systems naturally permit file sizes greater than 2 Gigabytes,
.\"O and on those systems this macro has no effect.
このマクロを値 64 で定義すると、ファイル I/O とファイルシステム操作に
関連する 32 ビット版の関数とデータタイプは自動的に 64 ビット版に
変換される。
これは、32 ビットシステムで大きなファイル (> 2 ギガバイト) の I/O
を実行する際に役立つ
(このマクロを定義すると、コンパイルし直すだけで大きなファイルを
扱えるプログラムを書くことができる)。
64 ビットシステムは、もともと 2 ギガバイトより大きなファイルを
扱えるので、64 ビットシステムではこのマクロは効果を持たない。
.TP
.B _BSD_SOURCE
.\"O Defining this macro with any value causes header files to expose
.\"O BSD-derived definitions.
.\"O Defining this macro also causes BSD definitions to be preferred in
.\"O some situations where standards conflict, unless one or more of
.\"O .BR _SVID_SOURCE ,
.\"O .BR _POSIX_SOURCE ,
.\"O .BR _POSIX_C_SOURCE ,
.\"O .BR _XOPEN_SOURCE ,
.\"O .BR _XOPEN_SOURCE_EXTENDED ,
.\"O or
.\"O .B _GNU_SOURCE
.\"O is defined, in which case BSD definitions are disfavored.
このマクロを定義すると (値に関わらず) ヘッダファイルで
BSD 由来の定義が公開される。
また、このマクロを定義すると、相容れない標準が存在する状況において
BSD 由来の定義を優先するようになる。
ただし、
.BR _SVID_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.B _GNU_SOURCE
が一つでも定義された場合には、BSD 由来の定義は優先されなくなる。
.TP
.B _SVID_SOURCE
.\"O Defining this macro with any value causes header files to expose
.\"O System V-derived definitions.
.\"O (SVID == System V Interface Definition; see
.\"O .BR standards (7).)
このマクロを定義すると (値に関わらず) ヘッダファイルで
System V 由来の定義が公開される
(SVID == System V Interface Definition;
.BR standards (7)
参照)。
.TP
.\"O .BR _ATFILE_SOURCE " (since glibc 2.4)"
.BR _ATFILE_SOURCE " (glibc 2.4 以降)"
.\"O Defining this macro with any value causes header files to expose
.\"O declarations of a range of functions with the suffix "at";
.\"O see
.\"O .BR openat (2).
.\"O Since glibc 2.10, this macro is also implicitly defined if
.\"O .BR _POSIX_C_SOURCE
.\"O is defined with a value greater than or equal to 200809L.
このマクロを定義すると (値に関わらず) ヘッダファイルで
名前の末尾が "at" の各種の関数の定義が公開される。
.BR openat (2)
参照。
glibc 2.10 以降では、
.B _POSIX_C_SOURCE
が 200809L 以上の値で定義された場合には、
このマクロも暗黙のうちに定義される。
.TP
.B _GNU_SOURCE
.\"O Defining this macro (with any value) is equivalent to defining
.\"O .BR _BSD_SOURCE ,
.\"O .BR _SVID_SOURCE ,
.\"O .BR _ATFILE_SOURCE ,
.\"O .BR _LARGEFILE64_SOURCE ,
.\"O .BR _ISOC99_SOURCE ,
.\"O .BR _XOPEN_SOURCE_EXTENDED ,
.\"O .BR _POSIX_SOURCE ,
.\"O .B _POSIX_C_SOURCE
.\"O with the value 200809L
.\"O (200112L in glibc versions before 2.10;
.\"O 199506L in glibc versions before 2.5;
.\"O 199309L in glibc versions before 2.1)
.\"O and
.\"O .B _XOPEN_SOURCE
.\"O with the value 700
.\"O (600 in glibc versions before 2.10;
.\"O 500 in glibc versions before 2.2).
.\"O In addition, various GNU-specific extensions are also exposed.
.\"O Where standards conflict, BSD definitions are disfavored.
このマクロを定義すると (値に関わらず) 以下のマクロを定義するのと
等価になる:
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _ATFILE_SOURCE ,
.BR _LARGEFILE64_SOURCE ,
.BR _ISOC99_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _POSIX_SOURCE ,
値 200809L の
.B _POSIX_C_SOURCE
(バージョン 2.10 より前の glibc では値は 200112L、
バージョン 2.5 より前の glibc では値は 199506L、
バージョン 2.1 より前の glibc では値は 199309L),
値 700 の
.B _XOPEN_SOURCE
(バージョン 2.10 より前の glibc では値は 600、
バージョン 2.2 より前の glibc では値は 500)。
さらに、各種の GNU 固有の拡張も公開される。
指定された標準に矛盾があった場合は、
BSD 由来の定義が優先されなくなる。
.TP
.B _REENTRANT
.\"O Defining this macro exposes definitions of certain reentrant functions.
.\"O For multithreaded programs, use
.\"O .I "cc\ \-pthread"
.\"O instead.
このマクロを定義すると、いくつかのリエントラント (再入可能) な関数
定義が公開される。マルチスレッド・プログラムでは、この代わりに
.I "cc\ \-pthread"
を使用すること。
.TP
.B _THREAD_SAFE
.\"O Synonym for
.\"O .BR _REENTRANT ,
.\"O provided for compatibility with some other implementations.
.B _REENTRANT
の同義語。
他のいくつかの実装との互換性を提供するためのもの。
.TP
.\"O .BR _FORTIFY_SOURCE " (since glibc 2.3.4)"
.BR _FORTIFY_SOURCE " (glibc 2.3.4 以降)"
.\" For more detail, see:
.\" http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
.\" [PATCH] Object size checking to prevent (some) buffer overflows
.\" * From: Jakub Jelinek <jakub at redhat dot com>
.\" * To: gcc-patches at gcc dot gnu dot org
.\" * Date: Tue, 21 Sep 2004 04:16:40 -0400
.\"O Defining this macro causes some lightweight checks to be performed
.\"O to detect some buffer overflow errors when employing
.\"O various string and memory manipulation functions.
.\"O Not all buffer overflows are detected, just some common cases.
このマクロを定義すると、文字列やメモリの操作を行う様々な関数を
使用する際にバッファオーバーフローを検出するための軽めのチェックが
実行されるようになる。すべてのバッファオーバーフローが検出される
わけではなく、あくまでよくある例についてだけである。
.\"O In the current implementation checks are added for
.\"O calls to
現在の実装では、以下の関数にチェックが追加されている:
.BR memcpy (3),
.BR mempcpy (3),
.BR memmove (3),
.BR memset (3),
.BR stpcpy (3),
.BR strcpy (3),
.BR strncpy (3),
.BR strcat (3),
.BR strncat (3),
.BR sprintf (3),
.BR snprintf (3),
.BR vsprintf (3),
.BR vsnprintf (3),
.\"O and
.BR gets (3).
.\"O If
.\"O .B _FORTIFY_SOURCE
.\"O is set to 1, with compiler optimization level 1
.\"O .RI ( "gcc\ \-O1" )
.\"O and above, checks that shouldn't change the behavior of
.\"O conforming programs are performed.
.\"O With
.\"O .B _FORTIFY_SOURCE
.\"O set to 2 some more checking is added, but
.\"O some conforming programs might fail.
.B _FORTIFY_SOURCE
が 1 に設定された場合、コンパイラの最適化レベルが 1
.RI ( "gcc\ \-O1" )
かそれ以上であれば、規格に準拠するプログラムの振る舞いを
変化させないようなチェックが実行される。
.B _FORTIFY_SOURCE
が 2 に設定された場合、さらなるチェックが追加されるが、
規格に準拠するプログラムのいくつかが失敗する可能性がある。
.\"O Some of the checks can be performed at compile time,
.\"O and result in compiler warnings;
.\"O other checks take place at run time,
.\"O and result in a run-time error if the check fails.
いくつかのチェックはコンパイル時に実行でき、コンパイラの警告として
表示される。他のチェックは実行時に行われ、チェックに失敗した場合
には実行時エラーとなる。
.\"O Use of this macro requires compiler support, available with
.\"O .BR gcc (1)
.\"O since version 4.0.
このマクロを使用するにはコンパイラの対応が必要であり、
バージョン 4.0 以降の
.BR gcc (1)
で利用できる。
.\"O .SS Default definitions, implicit definitions, and combining definitions
.SS デフォルトの定義、暗黙の定義、組み合わせ定義
.PP
.\"O If no feature test macros are explicitly defined,
.\"O then the following feature test macros are defined by default:
.\"O .BR _BSD_SOURCE ,
.\"O .BR _SVID_SOURCE ,
.\"O .BR _POSIX_SOURCE ,
.\"O and
.\"O .BR _POSIX_C_SOURCE =200809L
.\"O (200112L in glibc versions before 2.10;
.\"O 199506L in glibc versions before 2.4;
.\"O 199309L in glibc versions before 2.1).
機能検査マクロが一つも明示的に定義されなかった場合、
デフォルトで機能検査マクロ
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE =200809L
が定義される
(バージョン 2.10 より前の glibc では値は 200112L、
バージョン 2.4 より前の glibc では値は 199506L、
バージョン 2.1 より前の glibc では値は 199309L)。
.PP
.\"O If any of
.\"O .BR __STRICT_ANSI__ ,
.\"O .BR _ISOC99_SOURCE ,
.\"O .BR _POSIX_SOURCE ,
.\"O .BR _POSIX_C_SOURCE  ,
.\"O .BR _XOPEN_SOURCE ,
.\"O .BR _XOPEN_SOURCE_EXTENDED ,
.\"O .BR _BSD_SOURCE ,
.\"O or
.\"O .B _SVID_SOURCE
.\"O is explicitly defined, then
.\"O .BR _BSD_SOURCE ,
.\"O and
.\"O .B _SVID_SOURCE
.\"O are not defined by default.
.BR __STRICT_ANSI__ ,
.BR _ISOC99_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE  ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _BSD_SOURCE ,
.B _SVID_SOURCE
のいずれかが明示的に定義された場合、
.B _BSD_SOURCE
と
.B _SVID_SOURCE
はデフォルトでは定義されない。

.\"O If
.\"O .B _POSIX_SOURCE
.\"O and
.\"O .B _POSIX_C_SOURCE
.\"O are not explicitly defined,
.\"O and either
.\"O .B __STRICT_ANSI__
.\"O is not defined or
.\"O .B _XOPEN_SOURCE
.\"O is defined with a value of 500 or more, then
.B _POSIX_SOURCE
と
.B _POSIX_C_SOURCE
が明示的に定義されない場合で、
.B __STRICT_ANSI__
が定義されない、もしくは
.B _XOPEN_SOURCE
が 500 以上の値で定義されたときには、
.RS 3
.IP * 3
.\"O .B _POSIX_SOURCE
.\"O is defined with the value 1; and
.B _POSIX_SOURCE
が値 1 で定義され、かつ
.IP *
.\"O .B _POSIX_C_SOURCE
.\"O is defined with one of the following values:
.B _POSIX_C_SOURCE
は以下の値のいずれか一つで定義される。
.RS 6
.IP \(bu 3
.\"O 2,
.\"O if
.\"O .B XOPEN_SOURCE
.\"O is defined with a value less than 500;
2
.RB ( _XOPEN_SOURCE
が 500 未満の値で定義された場合)
.IP \(bu
.\"O 199506L,
.\"O if
.\"O .B XOPEN_SOURCE
.\"O is defined with a value greater than or equal to 500 and less than 600;
.\"O or
199506L
.RB ( _XOPEN_SOURCE
が 500 以上 600 未満の値で定義された場合)
.IP \(bu
.\"O (since glibc 2.4) 200112L,
.\"O if
.\"O .B XOPEN_SOURCE
.\"O is defined with a value greater than or equal to 600 and less than 700.
(glibc 2.4 以降)
200112L
.RB ( XOPEN_SOURCE
が 600 以上 700 未満の値で定義された場合)
.IP \(bu
.\"O (Since glibc 2.10)
.\"O 200809L,
.\"O if
.\"O .B XOPEN_SOURCE
.\"O is defined with a value greater than or equal to 700.
(glibc 2.10 以降)
200809L
.RB ( XOPEN_SOURCE
が 700 以上の値で定義された場合)
.IP \(bu
.\"O Older versions of glibc do not know about the values
.\"O 200112L and 200809L for
.\"O .BR _POSIX_C_SOURCE ,
.\"O and the setting of this macro will depend on the glibc version.
古いバージョンの glibc では
.B _POSIX_C_SOURCE
の値として 200112L や 200809L は存在せず、
.B _POSIX_C_SOURCE
の値がどうなるかは glibc のバージョンにより異なる。
.IP \(bu
.\"O If
.\"O .B _XOPEN_SOURCE
.\"O is undefined, then the setting of
.\"O .B _POSIX_C_SOURCE
.\"O depends on the glibc version:
.\"O 199506L, in glibc versions before 2.4;
.\"O 200112L, in glibc 2.4 to 2.9; and
.\"O 200809L, since glibc 2.10.
.B _XOPEN_SOURCE
が未定義の場合、
.B _POSIX_C_SOURCE
の値は glibc のバージョンにより異なる。
バージョン 2.4 より前の glibc では 199506L、
バージョン 2.4 以降 2.9 未満では 200112L、
glibc 2.10 以降では 200809L となる。
.RE
.RE
.PP
.\"O Multiple macros can be defined; the results are additive.
また、複数のマクロを定義することもできる。
この場合、定義したマクロはすべて有効になる。
.\"O .SH CONFORMING TO
.SH 準拠
.\"O POSIX.1 specifies
.\"O .BR _POSIX_C_SOURCE ,
.\"O .BR _POSIX_SOURCE ,
.\"O and
.\"O .BR _XOPEN_SOURCE .
.\"O .B _XOPEN_SOURCE_EXTENDED
.\"O was specified by XPG4v2 (aka SUSv1).
POSIX.1 では
.BR _POSIX_C_SOURCE ,
.BR _POSIX_SOURCE ,
.B _XOPEN_SOURCE
が規定されている。
.B _XOPEN_SOURCE_EXTENDED
は XPG4v2 (別名 SUSv1) で規定されていた。

.\"O .B _FILE_OFFSET_BITS
.\"O is not specified by any standard,
.\"O but is employed on some other implementations.
.B _FILE_OFFSET_BITS
はどの標準でも規定されていないが、
他のいくつかの実装で採用されている。

.\"O .BR _BSD_SOURCE ,
.\"O .BR _SVID_SOURCE ,
.\"O .BR _ATFILE_SOURCE ,
.\"O .BR _GNU_SOURCE ,
.\"O .BR _FORTIFY_SOURCE ,
.\"O .BR _REENTRANT ,
.\"O and
.\"O .B _THREAD_SAFE
.\"O are specific to Linux (glibc).
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _ATFILE_SOURCE ,
.BR _GNU_SOURCE ,
.BR _FORTIFY_SOURCE ,
.BR _REENTRANT ,
.B _THREAD_SAFE
は Linux (glibc) 固有である。
.\"O .SH NOTES
.SH 注意
.\"O .I <features.h>
.\"O is a Linux/glibc-specific header file.
.\"O Other systems have an analogous file, but typically with a different name.
.\"O This header file is automatically included by other header files as
.\"O required: it is not necessary to explicitly include it in order to
.\"O employ feature test macros.
.I <features.h>
は Linux/glibc 固有のヘッダファイルである。
他のシステムにも同様の目的のファイルがあるが、普通は違う名前である。
このヘッダファイルは、他のヘッダファイルにより必要に応じて
自動的にインクルードされる。機能検査マクロを利用するために
明示的にインクルードする必要はない。

.\"O According to which of the above feature test macros are defined,
.\"O .I <features.h>
.\"O internally defines various other macros that are checked by
.\"O other glibc header files.
.\"O These macros have names prefixed by two underscores (e.g.,
.\"O .BR __USE_MISC ).
.\"O Programs should \fInever\fP define these macros directly:
.\"O instead, the appropriate feature test macro(s) from the
.\"O list above should be employed.
上記の機能検査マクロのうちどれが定義されたかにしたがって、
.I <features.h>
は、他の glibc ヘッダファイルでチェックされる各種の他のマクロを、
内部で定義する。これらのマクロの名前はアンダースコア 2つで始まる
(例えば
.BR __USE_MISC )。
ユーザプログラムはこれらのマクロを \fI決して\fP 直接定義すべきではない。
代わりに、上記のリストにある適切な機能検査マクロを利用すべきである。
.\"O .SH EXAMPLE
.SH 例
.\"O The program below can be used to explore how the various
.\"O feature test macros are set depending on the glibc version
.\"O and what feature test macros are explicitly set.
.\"O The following shell session, on a system with glibc 2.10,
.\"O shows some examples of what we would see:
下記のプログラムを使うと、各種の機能検査マクロが glibc のバージョン
に応じてどのように設定されるかや、どの機能検査マクロが明示的に
設定されるか、を調べることができる。
以下に示すシェル・セッションは、
glibc 2.10 のシステムでの実行結果の例である。
.in +4n
.nf

$ \fBcc ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
$ \fBcc -D_XOPEN_SOURCE=500 ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 199506L
_XOPEN_SOURCE defined: 500
$ \fBcc -D_GNU_SOURCE ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_ISOC99_SOURCE defined
_XOPEN_SOURCE defined: 700
_XOPEN_SOURCE_EXTENDED defined
_LARGEFILE64_SOURCE defined
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
_GNU_SOURCE defined
.fi
.in
.SS Program source
\&
.nf
/* ftm.c */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
#ifdef _POSIX_SOURCE
    printf("_POSIX_SOURCE defined\\n");
#endif

#ifdef _POSIX_C_SOURCE
    printf("_POSIX_C_SOURCE defined: %ldL\\n", (long) _POSIX_C_SOURCE);
#endif

#ifdef _ISOC99_SOURCE
    printf("_ISOC99_SOURCE defined\\n");
#endif

#ifdef _XOPEN_SOURCE
    printf("_XOPEN_SOURCE defined: %d\\n", _XOPEN_SOURCE);
#endif

#ifdef _XOPEN_SOURCE_EXTENDED
    printf("_XOPEN_SOURCE_EXTENDED defined\\n");
#endif

#ifdef _LARGEFILE64_SOURCE
    printf("_LARGEFILE64_SOURCE defined\\n");
#endif

#ifdef _FILE_OFFSET_BITS
    printf("_FILE_OFFSET_BITS defined: %d\\n", _FILE_OFFSET_BITS);
#endif

#ifdef _BSD_SOURCE
    printf("_BSD_SOURCE defined\\n");
#endif

#ifdef _SVID_SOURCE
    printf("_SVID_SOURCE defined\\n");
#endif

#ifdef _ATFILE_SOURCE
    printf("_ATFILE_SOURCE defined\\n");
#endif

#ifdef _GNU_SOURCE
    printf("_GNU_SOURCE defined\\n");
#endif

#ifdef _REENTRANT
    printf("_REENTRANT defined\\n");
#endif

#ifdef _THREAD_SAFE
    printf("_THREAD_SAFE defined\\n");
#endif

#ifdef _FORTIFY_SOURCE
    printf("_FORTIFY_SOURCE defined\\n");
#endif

    exit(EXIT_SUCCESS);
}
.fi
.\"O .SH SEE ALSO
.SH 関連項目
.BR libc (7),
.BR standards (7)
.sp
.\"O The section "Feature Test Macros" under
.\"O .IR "info libc" .
.I "info libc"
の "Feature Test Macros" の節。
.\" But beware: the info libc document is out of date (Jul 07, mtk)
.sp
.I /usr/include/features.h
