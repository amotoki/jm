'\" t
.\" Don't change the first line, it tells man that we need tbl.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: raw.7,v 1.6 1999/06/05 10:32:08 freitag Exp $
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2007-01-05, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.43
.\"
.\"WORD         link level header(s)    リンクレベルヘッダ
.\"WORD         effective user ID       実効ユーザー ID
.\"WORD         capability              権限
.\"WORD         route                   (パケットの) 経路
.\"
.TH RAW  7 2008-11-20 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O raw, SOCK_RAW \- Linux IPv4 raw sockets
.SH 名前
raw, SOCK_RAW \- Linux の IPv4 raw ソケット
.\"O .SH SYNOPSIS
.SH 書式
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.BI "raw_socket = socket(AF_INET, SOCK_RAW, int " protocol );
.\"O .SH DESCRIPTION
.SH 説明
.\"O Raw sockets allow new IPv4 protocols to be implemented in user space.
.\"O A raw socket receives or sends the raw datagram not
.\"O including link level headers.
raw ソケットを使うと、新しい IPv4 プロトコルをユーザ空間で
実装できるようになる。 raw ソケットは、リンクレベルヘッダを
含まない raw データグラムの送受信ができる。

.\"O The IPv4 layer generates an IP header when sending a packet unless the
.\"O .B IP_HDRINCL
.\"O socket option is enabled on the socket.
.\"O When it is enabled, the packet must contain an IP header.
.\"O For receiving the IP header is always included in the packet.
IPv4 レイヤは、扱っているソケットで
.B IP_HDRINCL
ソケットオプションが有効になっていなければ、
パケットを送信するときに IP ヘッダを生成する。
.B IP_HDRINCL
オプションが有効になっているときは、パケットには
IP ヘッダが含まれていなければならない。
受信時には、 IP ヘッダは常にパケットに含まれている。

.\"O Only processes with an effective user ID of 0 or the
.\"O .B CAP_NET_RAW
.\"O capability are allowed to open raw sockets.
実効ユーザー ID が 0 のプロセスか、
.B CAP_NET_RAW
権限を持つプロセスだけが raw ソケットをオープンすることができる。

.\"O All packets or errors matching the
.\"O .I protocol
.\"O number specified
.\"O for the raw socket are passed to this socket.
.\"O For a list of the allowed protocols see RFC\ 1700 assigned numbers and
.\"O .BR getprotobyname (3).
この raw ソケットに指定された
.I protocol
番号にマッチする全てのパケットとエラーとが、このソケットに渡される。
許可されているプロトコルのリストは RFC\ 1700 の割り当て番号と
.BR getprotobyname (3)
を見よ。

.\"O A protocol of
.\"O .B IPPROTO_RAW
.\"O implies enabled
.\"O .B IP_HDRINCL
.\"O and is able to send any IP protocol that is specified in the passed
.\"O header.
.\"O Receiving of all IP protocols via
.\"O .B IPPROTO_RAW
.\"O is not possible using raw sockets.
.B IPPROTO_RAW
のプロトコルは暗黙のうちに
.B IP_HDRINCL
を有効にするので、
渡されたヘッダで指定された、あらゆる IP プロトコルを送信できる。
.B IPPROTO_RAW
経由でのあらゆる IP プロトコルの受信は、
raw ソケットを用いては行えない。
.\"O
.TS
tab(:) allbox;
c s
l l.
.\"O IP Header fields modified on sending by \fBIP_HDRINCL\fP
.\"O IP Checksum:Always filled in.
.\"O Source Address:Filled in when zero.
.\"O Packet Id:Filled in when zero.
.\"O Total Length:Always filled in.
IP ヘッダフィールド。 \fBIP_HDRINCL\fP によって送信時に変更される。
IP チェックサム:常に変更される。
ソースアドレス:元の値が 0 の時に変更される。
パケット ID:元の値が 0 の時に変更される。
全体の長さ:常に埋められる。
.TE
.\"O.RE
.sp
.PP
.\"NAKANO Aloways filled in. とは?
.\"O If
.\"O .B IP_HDRINCL
.\"O is specified and the IP header has a nonzero destination address then
.\"O the destination address of the socket is used to route the packet.
.\"O When
.\"O .B MSG_DONTROUTE
.\"O is specified, the destination address should refer to a local interface,
.\"O otherwise a routing table lookup is done anyway but gatewayed routes
.\"O are ignored.
.B IP_HERINCL
が指定されていて、 IP ヘッダに
0 でない送信先アドレスが記入されていた場合は、
その送信先アドレスがパケットの経路を決めるのに用いられる。
.B MSG_DONTROUTE
が指定されている時には、
送信先アドレスはローカルなインターフェースを参照するものでなければならない。
さもないと、ルーティングテーブルの参照はいずれにせよ行われるが、
ゲートウェイが必要な経路は無視される。
.\"NAKANO ローカルなネットなのかインターフェースなのか？

.\"O If
.\"O .B IP_HDRINCL
.\"O isn't set, then IP header options can be set on raw sockets with
.\"O .BR setsockopt (2);
.\"O see
.\"O .BR ip (7)
.\"O for more information.
.B IP_HDRINCL
がセットされていなければ、
raw ソケットの IP ヘッダオプションを
.BR setsockopt (2)
を用いて設定することができる。詳細な情報は
.BR ip (7)
を見よ。

.\"O In Linux 2.2, all IP header fields and options can be set using
.\"O IP socket options.
.\"O This means raw sockets are usually only needed for new
.\"O protocols or protocols with no user interface (like ICMP).
Linux 2.2 では、 IP ヘッダの全てのフィールドとオプションとを
IP ソケットオプションによって設定できる。したがって
raw ソケットが必要になるのは、新しいプロトコルを設計する場合か、
ユーザーインターフェースを持たないプロトコル (ICMP など) を扱う場合に
限られる。

.\"O When a packet is received, it is passed to any raw sockets which have
.\"O been bound to its protocol before it is passed to other protocol handlers
.\"O (e.g., kernel protocol modules).
パケットは、受信されるとまずプロトコルにバインドしている
raw ソケットに渡され、
その後で他のプロトコルハンドラ (カーネルのプロトコルモジュールなど)
に渡される。
.\"O .SS Address Format
.SS アドレスのフォーマット
.\"O Raw sockets use the standard
.\"O .I sockaddr_in
.\"O address structure defined in
.\"O .BR ip (7).
.\"O The
.\"O .I sin_port
.\"O field could be used to specify the IP protocol number,
.\"O but it is ignored for sending in Linux 2.2 and should be always
.\"O set to 0 (see BUGS).
.\"O For incoming packets,
.\"O .I sin_port
.\"O is set to the protocol of the packet.
.\"O See the
.\"O .I <netinet/in.h>
.\"O include file for valid IP protocols.
raw ソケットは標準の
.I sockaddr_in
アドレス構造体を用いる。定義は
.BR ip (7)
でなされている。
.I sin_port
フィールドを IP プロトコル番号の指定に用いることができるが、
Linux 2.2 ではこれは送信時には無視され、常に 0 にされる
(バグ の項を参照)。
受信パケットに対しては、
.I sin_port
はそのパケットのプロトコルにセットされる。
用いることのできる IP プロトコルは、インクルードファイル
.I <netinet/in.h>
を見よ。
.\"O .SS Socket Options
.SS ソケットオプション
.\"O Raw socket options can be set with
.\"O .BR setsockopt (2)
.\"O and read with
.\"O .BR getsockopt (2)
.\"O by passing the
.\"O .B IPPROTO_RAW
.\"O .\" Or SOL_RAW on Linux
.\"O family flag.
raw ソケットのオプションは、
.B IPPROTO_RAW
.\" もしくは Linux では .I SOL_RAW
ファミリーフラグを与えて
.BR setsockopt (2)
を呼べば設定でき、
.BR getsockopt (2)
を呼べば取得できる。
.TP
.B ICMP_FILTER
.\"O Enable a special filter for raw sockets bound to the
.\"O .B IPPROTO_ICMP
.\"O protocol.
.\"O The value has a bit set for each ICMP message type which
.\"O should be filtered out.
.\"O The default is to filter no ICMP messages.
.B IPPROTO_ICMP
プロトコルにバインドされた raw ソケットのための特殊なフィルタを有効にする。
この値は ICMP メッセージのタイプそれぞれに対して、どれをフィルターアウト
するかを表したビットセットである。デフォルトでは
ICMP メッセージは全くフィルターしない。
.PP
.\"O In addition, all
.\"O .BR ip (7)
.\"O .B IPPROTO_IP
.\"O socket options valid for datagram sockets are supported.
さらに、データグラムソケットに使える全ての
.BR ip (7)
.B SOL_IP
ソケットオプションがサポートされている。
.\"O .SS Error Handling
.SS エラー処理
.\"O Errors originating from the network are only passed to the user when the
.\"O socket is connected or the
.\"O .B IP_RECVERR
.\"O flag is enabled.
.\"O For connected sockets, only
.\"O .B EMSGSIZE
.\"O and
.\"O .B EPROTO
.\"O are passed for compatibility.
.\"O With
.\"O .BR IP_RECVERR ,
.\"O all network errors are saved in the error queue.
ネットワークで生じたエラーがユーザに渡されるのは、
ソケットが接続済みの場合か
.B IP_RECVERR
フラグが有効になっている場合に限られる。
接続済みのソケットに対しては、
.B EMSGSIZE
および
.B EPROTO
だけが渡される (互換性のため)。
.B IP_RECVERR
を設定すると、全てのネットワークエラーがエラーキューに保存される。
.\"O .SH ERRORS
.SH エラー
.TP
.B EACCES
.\"O User tried to send to a broadcast address without having the
.\"O broadcast flag set on the socket.
ユーザーが broadcast フラグを設定していないソケットを用いて
ブロードキャストアドレスに送信を行おうとした。
.TP
.B EFAULT
.\"O An invalid memory address was supplied.
不正なメモリアドレスが与えられた。
.TP
.B EINVAL
.\"O Invalid argument.
引数が正しくない。
.TP
.B EMSGSIZE
.\"O Packet too big.
.\"O Either Path MTU Discovery is enabled (the
.\"O .B IP_MTU_DISCOVER
.\"O socket flag) or the packet size exceeds the maximum allowed IPv4
.\"O packet size of 64KB.
パケットが大きすぎる。 Path MTU Discoverry が有効になっている
.RB ( IP_MTU_DISCOVER
ソケットフラグ) か、パケットのサイズが IPv4 で許されている
パケットサイズの最大値 64KB を越えている。
.TP
.B EOPNOTSUPP
.\"O Invalid flag has been passed to a socket call (like
.\"O .BR MSG_OOB ).
ソケット呼び出しに不正なフラグ
.RB ( MSG_OOB
など) が渡された。
.TP
.B EPERM
.\"O The user doesn't have permission to open raw sockets.
.\"O Only processes with an effective user ID of 0 or the
.\"O .B CAP_NET_RAW
.\"O attribute may do that.
ユーザーは raw ソケットをオープンする権限を持っていない。
実行ユーザー ID が 0 のプロセスか、
.B CAP_NET_RAW
属性を持つプロセスだけがこれを行うことができる。
.TP
.B EPROTO
.\"O An ICMP error has arrived reporting a parameter problem.
パラメータの問題を報告する ICMP エラーを受け取った。
.\"O .SH VERSIONS
.SH バージョン
.\"O .B IP_RECVERR
.\"O and
.\"O .B ICMP_FILTER
.\"O are new in Linux 2.2.
.\"O They are Linux extensions and should not be used in portable programs.
.B IP_RECVERR
と
.B ICMP_FILTER
は Linux 2.2 で登場した。これらは Linux での拡張であり、
移植性の必要なプログラムでは用いるべきでない。

.\"O Linux 2.0 enabled some bug-to-bug compatibility with BSD in the
.\"O raw socket code when the
.\"O .B SO_BSDCOMPAT
.\"O socket option was set \(em since Linux 2.2,
.\"O this option no longer has that effect.
Linux 2.0 では
.B SO_BSDCOMPAT
ソケットオプションをセットすると、
BSD の raw ソケットにあるバグに互換性を取ることができた \(em
Linux 2.2 以降では、このオプションはもはや効力を持たない。
.\"O .SH NOTES
.SH 注意
.\"O By default, raw sockets do path MTU (Maximum Transmission Unit) discovery.
.\"O This means the kernel
.\"O will keep track of the MTU to a specific target IP address and return
.\"O .B EMSGSIZE
.\"O when a raw packet write exceeds it.
.\"O When this happens, the application should decrease the packet size.
.\"O Path MTU discovery can be also turned off using the
.\"O .B IP_MTU_DISCOVER
.\"O socket option or the
.\"O .I /proc/sys/net/ipv4/ip_no_pmtu_disc
.\"O file, see
.\"O .BR ip (7)
.\"O for details.
.\"O When turned off, raw sockets will fragment outgoing packets
.\"O that exceed the interface MTU.
.\"O However, disabling it is not recommended
.\"O for performance and reliability reasons.
デフォルトでは、raw ソケットは Path MTU Discovery を行う。
つまり、カーネルは特定の宛先 IP アドレスの MTU (Maximum Transmission Unit;
最大転送単位) を記録し、raw パケットの書き込みが MTU を超えた場合
.B EMSGSIZE
を返す。
.B EMSGSIZE
を返された場合、アプリケーションはパケットサイズを小さくすべきである。
ソケットオプション
.B IP_MTU_DISCOVER
または
.I /proc/sys/net/ipv4/ip_no_pmtu_disc
ファイルを使って Path MTU Discovery を無効にすることもできる
(詳細は
.BR ip (7)
を参照)。
Path MTU Discovery を無効にした場合は、パケットサイズが
インタフェースの MTU よりも大きいと raw ソケットはそのパケットを
フラグメント化して送出する。
しかしながら、性能と信頼性の理由から Path MTU Discovery を
無効にするのは推奨できない。

.\"O A raw socket can be bound to a specific local address using the
.\"O .BR bind (2)
.\"O call.
.\"O If it isn't bound, all packets with the specified IP protocol are received.
.\"O In addition, a RAW socket can be bound to a specific network device using
.\"O .BR SO_BINDTODEVICE ;
.\"O see
.\"O .BR socket (7).
.BR bind (2)
システムコールを用いると、
raw ソケットを
特定のローカルアドレスにバインドさせることができる。
このバインドがされていない場合は、指定した IP プロトコルの
すべてのパケットが受信される。
さらに、
.B SO_BINDTODEVICE
を用いれば raw ソケットを特定のネットワークデバイスに
バインドさせることもできる。
.BR socket (7)
を見よ。

.\"O An
.\"O .B IPPROTO_RAW
.\"O socket is send only.
.\"O If you really want to receive all IP packets, use a
.\"O .BR packet (7)
.\"O socket with the
.\"O .B ETH_P_IP
.\"O protocol.
.\"O Note that packet sockets don't reassemble IP fragments,
.\"O unlike raw sockets.
.B IPPROTO_RAW
ソケットは送信専用である。もしどうしてもすべての IP パケットを
受信したい場合は、
.BR packet (7)
ソケットを
.B ETH_P_IP
プロトコルで用いること。
packet ソケットは raw ソケットのように
IP フラグメントを再構成しないことに注意。

.\"O If you want to receive all ICMP packets for a datagram socket,
.\"O it is often better to use
.\"O .B IP_RECVERR
.\"O on that particular socket; see
.\"O .BR ip (7).
datagram ソケットに対するすべての ICMP パケットを受信したい場合は、
特定のソケットに対して
.B IP_RECVERR
を用いるほうが良い場合が多い。
.BR ip (7)
を見よ。

.\"O Raw sockets may tap all IP protocols in Linux, even
.\"O protocols like ICMP or TCP which have a protocol module in the kernel.
.\"O In this case, the packets are passed to both the kernel module and the raw
.\"O socket(s). This should not be relied upon in portable programs, many other BSD
.\"O socket implementation have limitations here.
raw ソケットは、 Linux のすべての IP プロトコルを受信することができる。
ICMP や TCP のように、カーネル内部にプロトコルモジュールを持つような
ものも可能である。この場合には、パケットはカーネルモジュールと
raw ソケットの両方に渡される (raw ソケットが複数あればそれぞれに渡される)。
移植性の必要なプログラムではこの機能に依存するべきではない。
他の多くの BSD におけるソケットの実装ではこの点において制限がある。

.\"O Linux never changes headers passed from the user (except for filling
.\"O in some zeroed fields as described for
.\"O .BR IP_HDRINCL ).
.\"O This differs from many other implementations of raw sockets.
Linux はユーザーから渡されたヘッダを決して変更しない (ただし
.B IP_HDRINCL
の説明にあるように、 0 をいくつか埋める場合を除く)。
これは他の多くの raw ソケットの実装では異なる。

.\"O RAW sockets are generally rather unportable and should be avoided in
.\"O programs intended to be portable.
一般に raw ソケットは移植性がないことが多いので、
移植性が必要なプログラムでは避けるべきである。

.\"O Sending on raw sockets should take the IP protocol from
.\"O .IR sin_port ;
.\"O this ability was lost in Linux 2.2.
.\"O The workaround is to use
.\"O .BR IP_HDRINCL .
raw ソケットへの送信では、 IP プロトコルを
.I sin_port
から取得できなければならない。この機能は Linux 2.2 では使えなくなった。
.B IP_HDRINCL
を用いれば同様のことが実現できる。
.\"O .SH BUGS
.SH バグ
.\"O Transparent proxy extensions are not described.
透過プロクシ (transparent proxy) 拡張については記述していない。

.\"O When the
.\"O .B IP_HDRINCL
.\"O option is set, datagrams will not be fragmented and are limited to
.\"O the interface MTU.
.B IP_HDRINCL
オプションがセットされているとデータグラムはフラグメント化されず、
インターフェースの MTU の大きさに制限される。

.\"O Setting the IP protocol for sending in
.\"O .I sin_port
.\"O got lost in Linux 2.2.
.\"O The protocol that socket was bound to or that
.\"O was specified in the initial
.\"O .BR socket (2)
.\"O call is always used.
送信用の IP プロトコルの設定を
.I sin_port
にしておく機能は Linux 2.2 から使えなくなった。
ソケットにバインドされているプロトコルか、最初の
.BR socket (2)
コールによって指定されたプロトコルが常に用いられる。
.\"O .\" .SH AUTHORS
.\" .SH 著者
.\"O .\" This man page was written by Andi Kleen.
.\" この man ページは Andi Kleen が書いた。
.\"O .SH SEE ALSO
.SH 関連項目
.BR recvmsg (2),
.BR sendmsg (2),
.BR capabilities (7),
.BR ip (7),
.BR socket (7)

.\"O .B RFC\ 1191
.\"O for path MTU discovery.
パス MTU 発見に関する情報は
.B RFC\ 1191
にある

.\"O .B RFC\ 791
.\"O and the
.\"O .I <linux/ip.h>
.\"O include file for the IP protocol.
IP プロトコルに関しては
.B RFC\ 791
とインクルードファイル
.I <linux/ip.h>
を参照。
