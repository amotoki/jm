'\" t
.\" This man page is Copyright (C) 1999 Matthew Wilcox <willy@bofh.ai>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" Modified June 1999 Andi Kleen
.\" $Id: arp.7,v 1.9 2001/03/12 08:45:27 nakano Exp $
.\"
.\" Japanese Version Copyright (c) 1999-2001 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified 2001-02-16, NAKANO Takeo
.\" Updated 2008-12-26, Akihiro MOTOKI, LDP v3.14
.\"
.\"WORD		permanent		保存
.\"WORD		neighbor cache entry	近傍キャッシュエントリ
.\"WORD		stale			古くなった
.\"WORD		proxy arp		代理 arp
.\"WORD		garbage collect (-or)	ガベージ・コレクト(コレクタ)
.\"WORD		capability		権限
.\"WORD		neighbor soliciation message	近傍要請メッセージ
.\"WORD		network flooding	ネットワーク・フラッディング
.\"WORD		thrashing		スラッシング
.\"WORD		connection oriented	接続指向
.\"WORD		forward progress	フォワードプログレス
.\"
.TH ARP 7 2008-11-25 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O arp \- Linux ARP kernel module.
.SH 名前
arp \- Linux ARP カーネルモジュール
.\"O .SH DESCRIPTION
.SH 説明
.\"O This kernel protocol module implements the Address Resolution
.\"O Protocol defined in RFC\ 826.
.\"O It is used to convert between Layer2 hardware addresses
.\"O and IPv4 protocol addresses on directly connected networks.
.\"O The user normally doesn't interact directly with this module except to
.\"O configure it;
.\"O instead it provides a service for other protocols in the kernel.
このカーネルプロトコルモジュールは、
RFC\ 826 で定義されている Address Resolution Protocol を
実装したものである。 ARP は、ダイレクトに接続されたネットワーク上で、
第 2 層のハードウェアアドレスをIPv4 プロトコルアドレスに
変換するために用いられる。ユーザーは設定の場合を除いて
通常直接このモジュールに関ることはない。
これはカーネル内部の他のプロトコルにサービスを提供するものである。
.PP
.\"O A user process can receive ARP packets by using
.\"O .BR packet (7)
.\"O sockets.
.\"O There is also a mechanism for managing the ARP cache
.\"O in user-space by using
.\"O .BR netlink (7)
.\"O sockets.
.\"O The ARP table can also be controlled via
.\"O .BR ioctl (2)
.\"O on any
.\"O .B AF_INET
.\"O socket.
ユーザープロセスは、
.BR packet (7)
ソケットを用いれば ARP パケットを受信することができる。
ARP キャッシュをユーザー空間で管理することもできる。
これには
.BR netlink (7)
を用いる。 ARP テーブルも制御可能で、これには任意の
.B AF_INET
ソケットに
.BR ioctl (2)
を用いる。
.PP
.\"O The ARP module maintains a cache of mappings between hardware addresses
.\"O and protocol addresses.
.\"O The cache has a limited size so old and less
.\"O frequently used entries are garbage-collected.
.\"O Entries which are marked
.\"O as permanent are never deleted by the garbage-collector.
.\"O The cache can
.\"O be directly manipulated by the use of ioctls and its behavior can be
.\"O tuned by the
.\"O .I /proc
.\"O interfaces described below.
ARP モジュールはハードウェアアドレスからプロトコルアドレスへの
マッピングのキャッシュを管理する。キャッシュの大きさには制限が
あるので、古いエントリや利用されないエントリはガベージコレクト
される。 permanent (保存) マークがつけられたエントリは、
決してガベージコレクタによって消去されない。
ioctl を用いればキャッシュを直接操作することもできる。
また後述の
.I /proc
インタフェースによりキャッシュの振る舞いを調整できる。
.PP
.\"O When there is no positive feedback for an existing mapping after some
.\"O time (see the
.\"O .I /proc
.\"O interfaces below), a neighbor cache entry is considered stale.
.\"O Positive feedback can be gotten from a higher layer; for example from
.\"O a successful TCP ACK.
.\"O Other protocols can signal forward progress
.\"O using the
.\"O .B MSG_CONFIRM
.\"O flag to
.\"O .BR sendmsg (2).
.\"O When there is no forward progress, ARP tries to reprobe.
.\"O It first tries to ask a local arp daemon
.\"O .B app_solicit
.\"O times for an updated MAC address.
.\"O If that fails and an old MAC address is known, an unicast probe is send
.\"O .B ucast_solicit
.\"O times.
.\"O If that fails too, it will broadcast a new ARP
.\"O request to the network.
.\"O Requests are only sent when there is data queued
.\"O for sending.
存在しているマッピングに対して、
正のフィードバックが一定時間ない (後述の
.I /proc
インタフェースを見よ) と、
近傍キャッシュエントリ (neighbor cache entry) は
古くなった (stale) とみなされる。
正のフィードバックは高位のレイヤーからも取得できる
(例えば TCP ACK が成功した場合など)。
他のプロトコルは、
.BR sendmsg (2)
に
.B MSG_CONFIRM
フラグを用いることによって、
フォワードプログレス (forward progress) をシグナルできる。
フォワードプログレスがなければ、
ARP は再びプローブを試みる。
まずローカルな arp デーモンに問合わせを行い、
更新された MAC アドレスを取得しようとする。
このリクエストに
.B app_solicit
回失敗すると、古い MAC アドレスがわかっている場合は、
unicast のプローブが
.B ucaset_solicit
回送られる。これにも失敗すると、新しい ARP リクエスト
をネットワークにブロードキャストする。
リクエストは、データが送信キューになければ送られない。
.PP
.\"O Linux will automatically add a nonpermanent proxy arp entry when it
.\"O receives a request for an address it forwards to and proxy arp is
.\"O enabled on the receiving interface.
.\"O When there is a reject route for the target, no proxy arp entry is added.
Linux は、あるアドレスへのリクエストを受信・フォワードし、
受信したインターフェースで代理 arp が有効になっている場合には、
自動的にそのアドレスを nonpermanent な代理 arp エントリに追加する。
そのターゲットに reject route があった場合には、
代理 arp エントリは一切追加されない。
.\"O .SS Ioctls
.SS ioctl
.\"O Three ioctls are available on all
.\"O .B AF_INET
.\"O sockets.
.\"O They take a pointer to a
.\"O .I struct arpreq
.\"O as their argument.
すべての
.B AF_INET
ソケットでは、 3 つの ioctl が使用できる。
これらは
.I struct arpreq
へのポインタを引数に取る。

.in +4n
.nf
struct arpreq {
    struct sockaddr arp_pa;      /* protocol address */
    struct sockaddr arp_ha;      /* hardware address */
    int             arp_flags;   /* flags */
    struct sockaddr arp_netmask; /* netmask of protocol address */
    char            arp_dev[16];
};
.fi
.in

.\"O .BR SIOCSARP ", " SIOCDARP " and " SIOCGARP
.\"O respectively set, delete and get an ARP mapping.
.\"O Setting and deleting ARP maps are privileged operations and may
.\"O only be performed by a process with the
.\"O .B CAP_NET_ADMIN
.\"O capability or an effective UID of 0.
.BR SIOCSARP ", " SIOCDARP ", " SIOCGARP
は、それぞれ ARP マッピングを設定・削除・取得する。
ARP マップの設定と削除は特権が必要な操作であり、
.B CAP_NET_ADMIN
権限を持つプロセスか、実行ユーザー ID が 0 のプロセス
でなければ実行できない。
.PP
.\"O .I arp_pa
.\"O must be an
.\"O .B AF_INET
.\"O address and
.\"O .I arp_ha
.\"O must have the same type as the device which is specified in
.\"O .IR arp_dev .
.\"O .I arp_dev
.\"O is a zero-terminated string which names a device.
.I arp_pa
は
.B AF_INET
アドレスでなければならず、
.I arp_ha
は
.I arp_dev
で設定されたデバイスと同じタイプでなければならない。
.I arp_dev
はデバイスの名前を示す、ゼロで終端された文字列である。
.RS
.TS
tab(:) allbox;
c s
l l.
\fIarp_flags\fR
.\"O flag:meaning
.\"O ATF_COM:Lookup complete
.\"O ATF_PERM:Permanent entry
.\"O ATF_PUBL:Publish entry
.\"O ATF_USETRAILERS:Trailers requested
.\"O ATF_NETMASK:Use a netmask
.\"O ATF_DONTPUB:Don't answer
フラグ:意味
ATF_COM:参照完了
ATF_PERM:エントリを peramanent にする
ATF_PUBL:エントリを publish する
ATF_USETRAILERS:trailer が必要
ATF_NETMASK:netmask を用いる
ATF_DONTPUB:回答しない
.TE
.RE

.PP
.\"O If the
.\"O .B ATF_NETMASK
.\"O flag is set, then
.\"O .I arp_netmask
.\"O should be valid.
.\"O Linux 2.2 does not support proxy network ARP entries, so this
.\"O should be set to 0xffffffff, or 0 to remove an existing proxy arp entry.
.\"O .B ATF_USETRAILERS
.\"O is obsolete and should not be used.
.B ATF_NETMASK
フラグがセットされているときには、
.I arp_netmask
が有効でなければならない。
Linux 2.2 は代理ネットワーク ARP エントリをサポートしていないので、
これは 0xffffffff にセットしておくか、あるいは
現存の代理 arp エントリを削除したい場合には 0 にしておく必要がある。
.B ATF_USETRAILERS
は obsolete なので、用いるべきでない。
.\"O .SS /proc interfaces
.SS /proc インタフェース
.\"O ARP supports a range of
.\"O .I /proc
.\"O interfaces to configure parameters on a global or per-interface basis.
.\"O The interfaces can be accessed by reading or writing the
.\"O .I /proc/sys/net/ipv4/neigh/*/*
.\"O files.
.\"O Each interface in the system has its own directory in
.\"O .IR /proc/sys/net/ipv4/neigh/ .
.\"O The setting in the "default" directory is used for all newly created
.\"O devices.
.\"O Unless otherwise specified, time-related sysctls are specified
.\"O in seconds.
ARP では、グローバルなパラメータやインターフェースごとのパラメータを
.I /proc
インタフェースを通して設定することができる。
これらのインタフェースには、
.I proc/sys/net/ipv4/neigh/*/*
ファイルの読み書きによりアクセスできる。
システムにあるそれぞれのインターフェースには、
それぞれ対応するディレクトリが
.I /proc/sys/net/ipv4/neigh/
以下にある。
"default" ディレクトリに対して設定をすると、
それ以降生成されるデバイス全てに対してその設定が用いられる。
特に指定がなければ、時間に関る sysctl の単位は秒である。
.TP
.\"O .IR anycast_delay " (since Linux 2.2)"
.IR anycast_delay " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of jiffies to delay before replying to a
.\"O IPv6 neighbor solicitation message.
.\"O Anycast support is not yet implemented.
.\"O Defaults to 1 second.
IPv6 の近傍要請メッセージ (neighbor soliciation message)
に応答するまでの最大遅延時間 (jiffy 単位)。
anycast のサポートはまだ実装されていない。
デフォルトは 1 秒。
.TP
.\"O .IR app_solicit " (since Linux 2.2)"
.IR app_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of probes to send to the user space ARP daemon via
.\"O netlink before dropping back to multicast probes (see
.\"O .IR mcast_solicit ).
.\"O Defaults to 0.
ユーザー空間の ARP デーモンに netlink を用いて探索させる最大回数。
これを越えるとマルチキャストによる探索に移行する
.RI ( mcast_solicit
を見よ)。
.TP
.\"O .IR base_reachable_time " (since Linux 2.2)"
.IR base_reachable_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O Once a neighbor has been found, the entry is considered to be valid
.\"O for at least a random value between
.\"O .IR base_reachable_time "/2 and 3*" base_reachable_time /2.
.\"O An entry's validity will be extended if it receives positive feedback
.\"O from higher level protocols.
.\"O Defaults to 30 seconds.
近傍のホストがみつかると、そのエントリは
.IR base_reachable_time "/2 から 3*" base_reachable_time /2
の間のランダムな値の時間、有効であるとみなされる。
エントリの有効性は、高位のプロトコルからポジティブなフィードバックを
受け取ると延長される。デフォルトは 30 秒。
.\"O This file is now obsolete in favor of
.\"O .IR base_reachable_time_ms .
このファイルは現在は非推奨であり、代わりに
.I base_reachable_time_ms
を使うこと。
.TP
.\"O .IR base_reachable_time_ms " (since Linux 2.6.12)"
.IR base_reachable_time_ms " (Linux 2.6.12 以降)"
.\"O As for
.\"O .IR base_reachable_time ,
.\"O but measures time in milliseconds.
.\"O Defaults to 30000 milliseconds.
.I base_reachable_time
と同じだが、時間をミリ秒単位で測る。
デフォルトは 30000 ミリ秒である。
.TP
.\"O .IR delay_first_probe_time " (since Linux 2.2)"
.IR delay_first_probe_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O Delay before first probe after it has been decided that a neighbor
.\"O is stale.
.\"O Defaults to 5 seconds.
近傍ホストのエントリが古くなったと判断された後に
最初に探索を行うまでの遅延時間。デフォルトは 5 秒。
.TP
.\"O .IR gc_interval " (since Linux 2.2)"
.IR gc_interval " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O How frequently the garbage collector for neighbor entries
.\"O should attempt to run.
.\"O Defaults to 30 seconds.
ガベージ・コレクタを近傍ホストエントリに対して実行させる頻度。
デフォルトは 30 秒。
.TP
.\"O .IR gc_stale_time " (since Linux 2.2)"
.IR gc_stale_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O Determines how often to check for stale neighbor entries.
.\"O When a neighbor entry is considered stale, it is resolved again before
.\"O sending data to it.
.\"O Defaults to 60 seconds.
古くなった近傍ホストエントリに対してチェックを行う頻度。
近傍ホストエントリが古くなったとみなされると、そのエントリに
データを送る前には再度解決が行われる。
デフォルトは 60 秒。
.TP
.\"O .IR gc_thresh1 " (since Linux 2.2)"
.IR gc_thresh1 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The minimum number of entries to keep in the ARP cache.
.\"O The garbage collector will not run if there are fewer than
.\"O this number of entries in the cache.
.\"O Defaults to 128.
ARP キャッシュに保存するエントリ数の最小値。
この数より少ないエントリしかキャッシュになければ、
ガベージ・コレクタは実行されない。
デフォルトは 128。
.TP
.\"O .IR gc_thresh2 " (since Linux 2.2)"
.IR gc_thresh2 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The soft maximum number of entries to keep in the ARP cache.
.\"O The garbage collector will allow the number of entries to exceed
.\"O this for 5 seconds before collection will be performed.
.\"O Defaults to 512.
ARP キャッシュに保存されるエントリ数のソフトな最大値。
キャッシュのエントリがこの数を 5 秒間越えつづけると、
ガベージ・コレクタが実行される。
デフォルトは 512。
.TP
.\"O .IR gc_thresh3 " (since Linux 2.2)"
.IR gc_thresh3 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The hard maximum number of entries to keep in the ARP cache.
.\"O The garbage collector will always run if there are more than
.\"O this number of entries in the cache.
.\"O Defaults to 1024.
ARP キャッシュに保存されるエントリ数のハードな最大値。
キャッシュのエントリがこの数を越えると、
ガベージ・コレクタはただちに実行される。
デフォルトは 1024。
.TP
.\"O .IR locktime " (since Linux 2.2)"
.IR locktime " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The minimum number of jiffies to keep an ARP entry in the cache.
.\"O This prevents ARP cache thrashing if there is more than one potential
.\"O mapping (generally due to network misconfiguration).
.\"O Defaults to 1 second.
ARP エントリをキャッシュに保存する時間の最小値 (jiffy 単位)。
可能性のあるマッピングが一つ以上ある (たいていはネットワーク設定のミス)
場合に、 ARP キャッシュのスラッシングが起きることを防ぐ。
デフォルトは 1 秒。
.TP
.\"O .IR mcast_solicit " (since Linux 2.2)"
.IR mcast_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of attempts to resolve an address by
.\"O multicast/broadcast  before marking the entry as unreachable.
.\"O Defaults to 3.
エントリを unreachable マークする前に、
アドレスをマルチキャスト/ブロードキャストで解決しようとする
試行回数の最大値。
デフォルトは 3。
.TP
.\"O .IR proxy_delay " (since Linux 2.2)"
.IR proxy_delay " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O When an ARP request for a known proxy-ARP address is received, delay up to
.\"O .I proxy_delay
.\"O jiffies before replying.
.\"O This is used to prevent network flooding in some cases.
.\"O Defaults to 0.8 seconds.
既知の代理 ARP アドレスに対して ARP リクエストを受信した場合に、
応答前に最大
.I proxy_delay
jiffy まで遅延する。これは場合によって生じる
ネットワーク・フラッディング (network flooding) を避けるために用いる。
デフォルトは 0.8 秒。
.TP
.\"O .IR proxy_qlen " (since Linux 2.2)"
.IR proxy_qlen " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of packets which may be queued to proxy-ARP addresses.
.\"O Defaults to 64.
代理 ARP アドレスに対してキューイングできる最大のパケット数。
デフォルトは 64。
.TP
.\"O .IR retrans_time " (since Linux 2.2)"
.IR retrans_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The number of jiffies to delay before retransmitting a request.
.\"O Defaults to 1 second.
.\"O This file is now obsolete in favor of
.\"O .IR retrans_time_ms .
リクエストを再度送るまでの遅延時間 (jiffy 単位)。
デフォルトは 1 秒。
このファイルは現在は非推奨であり、代わりに
.I retrans_time_ms
を使うこと。
.TP
.\"O .IR retrans_time_ms " (since Linux 2.6.12)"
.IR retrans_time_ms " (Linux 2.6.12 以降)"
.\"O The number of milliseconds to delay before retransmitting a request.
.\"O Defaults to 1000 milliseconds.
リクエストを再度送るまでの遅延時間 (ミリ秒単位)。
デフォルトは 1000 ミリ秒。
.TP
.\"O .IR ucast_solicit " (since Linux 2.2)"
.IR ucast_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of attempts to send unicast probes before asking
.\"O the ARP daemon (see
.\"O .IR app_solicit ).
.\"O Defaults to 3.
ARP デーモンへの問い合わせを行う前に行う unicast 探索の最大試行数
.RI ( app_solicit
を見よ)。デフォルトは 3。
.TP
.\"O .IR unres_qlen " (since Linux 2.2)"
.IR unres_qlen " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
.\"O The maximum number of packets which may be queued for each unresolved
.\"O address by other network layers.
.\"O Defaults to 3.
解決されていないアドレスに対して、
他のネットワーク層からキューイングできる最大パケット数。
デフォルトは 3。
.\"O .SH VERSIONS
.SH バージョン
.\"O The
.\"O .I struct arpreq
.\"O changed in Linux 2.0 to include the
.\"O .I arp_dev
.\"O member and the ioctl numbers changed at the same time.
.\"O Support for the old ioctls was dropped in Linux 2.2.
Linux 2.0 で、
.I struct arpreq
に
.I arp_dev
メンバーが含まれるように変更があった。また同時に
ioctl 番号も変更された。古い ioctl は
Linux 2.2 で用いることができなくなった。

.\"O Support for proxy arp entries for networks (netmask not equal 0xffffffff)
.\"O was dropped in Linux 2.2.
.\"O It is replaced by automatic proxy arp setup by
.\"O the kernel for all reachable hosts on other interfaces (when
.\"O forwarding and proxy arp is enabled for the interface).
ネットワークに対する代理 arp エントリ (netmask が 0xffffffff でない)
は、 Linux 2.2 で用いることができなくなった。
これはカーネルによって設定される、別のインターフェースにおける
到達可能なすべてのホストに対する自動代理 arp によって置き換えられた
(そのインターフェースでフォワーディングと代理 arp が有効になっている場合)。

.\"O The
.\"O .I neigh/*
.\"O interfaces did not exist before Linux 2.2.
.I neigh/*
の各インタフェースは Linux 2.2 以前には存在しない。
.\"O .SH BUGS
.SH バグ
.\"O Some timer settings are specified in jiffies, which is architecture-
.\"O and kernel version-dependent; see
.\"O .BR time (7).
いくつかのタイマー設定は jiffy で指定されるが、
jiffy はアーキテクチャやカーネルのバージョンに依存する。
.BR time (7)
を参照のこと。
.PP
.\"O There is no way to signal positive feedback from user space.
.\"O This means connection-oriented protocols implemented in user space
.\"O will generate excessive ARP traffic, because ndisc will regularly
.\"O reprobe the MAC address.
.\"O The same problem applies for some kernel protocols (e.g., NFS over UDP).
ユーザー空間からポジティブなフィードバックを送る方法が存在しない。
つまり接続指向 (connection-oriented) のプロトコルをユーザー空間で
実装すると、余計な ARP トラフィックの原因となる。
なぜなら ndisc は定期的に MAC アドレスを再探索するからである。
同様の問題はいくつかのカーネルプロトコル (NFS over UDP など) にも存在する。
.PP
.\"O This man page mashes IPv4 specific and shared between IPv4 and IPv6
.\"O functionality together.
この man ページでは IPv4 特有の機能と
IPv4・IPv6 で共有される機能とがごっちゃになっている。
.\"O .SH SEE ALSO
.SH 関連項目
.BR capabilities (7),
.BR ip (7)
.PP
.\"O RFC\ 826 for a description of ARP.
.BR RFC\ 826 :
ARP に関する説明
.br
.\"O RFC\ 2461 for a description of IPv6 neighbor discovery and the base
.\"O algorithms used.
.BR RFC\ 2461 :
IPv6 neighbor discovery に関する説明と、
利用されている基礎アルゴリズム
.LP
.\"O Linux 2.2+ IPv4 ARP uses the IPv6 algorithms when applicable.
Linux 2.2 以降の IPv4 ARP は、
可能な場合は IPv6 のアルゴリズムを用いる。
