.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: udp.7,v 1.7 2000/01/22 01:55:05 freitag Exp $
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2005-10-09, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2007-01-05, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.43
.\" Updated 2008-12-29, Akihiro MOTOKI, LDP v3.14
.\" Updated 2010-04-10, Akihiro MOTOKI, LDP v3.24
.\"
.TH UDP  7 2009-09-30 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O udp \- User Datagram Protocol for IPv4
.SH 名前
udp \- IPv4 の ユーザーデータグラムプロトコル
.\"O .SH SYNOPSIS
.SH 書式
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.sp
.B udp_socket = socket(AF_INET, SOCK_DGRAM, 0);
.\"O .SH DESCRIPTION
.SH 説明
.\"O This is an implementation of the User Datagram Protocol
.\"O described in RFC\ 768.
.\"O It implements a connectionless, unreliable datagram packet service.
.\"O Packets may be reordered or duplicated before they arrive.
.\"O UDP generates and checks checksums to catch transmission errors.
これは RFC\ 768 で記述されている User Datagram Protocol の実装である。
UDP はコネクションレスの、信頼性の低いデータパケットサービスである。
パケットは到着前に並び替えられたり複製されたりする。
UDP は転送エラーを検出するためにチェックサムを生成・チェックする。

.\"O When a UDP socket is created,
.\"O its local and remote addresses are unspecified.
.\"O Datagrams can be sent immediately using
.\"O .BR sendto (2)
.\"O or
.\"O .BR sendmsg (2)
.\"O with a valid destination address as an argument.
.\"O When
.\"O .BR connect (2)
.\"O is called on the socket, the default destination address is set and
.\"O datagrams can now be sent using
.\"O .BR send (2)
.\"O or
.\"O .BR write (2)
.\"O without specifying a destination address.
UDP ソケットが生成されるとき、
ローカルアドレスやリモートアドレスは指定されない。
正しい行き先アドレスを引数として
.BR sendto (2)
や
.BR sendmsg (2)
を呼べば、データグラムはただちに送信される。
ソケットに対して
.BR connect (2)
を呼ぶと、デフォルトの行き先アドレスが設定され、
.BR send (2)
や
.BR write (2)
を使って、行き先アドレスの指定なしにデータグラムを送信できるようになる。
.\"O It is still possible to send to other destinations by passing an
.\"O address to
.\"O .BR sendto (2)
.\"O or
.\"O .BR sendmsg (2).
この場合でも、行き先アドレスを
.BR sendto (2)
や
.BR sendmsg (2)
に渡せば、デフォルト以外のアドレスに送信可能である。
.\"O In order to receive packets, the socket can be bound to a local
.\"O address first by using
.\"O .BR bind (2).
パケットを受信するために、まずソケットを
.BR bind (2)
を用いてローカルなアドレスにバインドさせることもできる。
.\"O Otherwise the socket layer will automatically assign
.\"O a free local port out of the range defined by
.\"O .I /proc/sys/net/ipv4/ip_local_port_range
.\"O and bind the socket to
.\"O .BR INADDR_ANY .
そうでない場合は、ソケット層は自動的に
.I /proc/sys/net/ipv4/ip_local_port_range
で定義されている範囲の外で空いているローカルなポートを割り当て、
ソケットを
.B INADDR_ANY
にバインドする。

.\"O All receive operations return only one packet.
.\"O When the packet is smaller than the passed buffer, only that much
.\"O data is returned, when it is bigger, the packet is truncated and the
.\"O .B MSG_TRUNC
.\"O flag is set.
受信動作はパケットを一つだけ返す。渡したバッファよりもパケットが
小さければ、そのパケットの大きさのデータだけが返される。
逆にバッファよりも大きい場合はパケットは丸められ、
.B MSG_TRUNC
フラグがセットされる。
.\"O .B MSG_WAITALL
.\"O is not supported.
.B MSG_WAITALL
はサポートしていない。

.\"O IP options may be sent or received using the socket options described in
.\"O .BR ip (7).
.\"O They are only processed by the kernel when the appropriate
.\"O .I /proc
.\"O parameter
.\"O is enabled (but still passed to the user even when it is turned off).
.\"O See
.\"O .BR ip (7).
IP オプションは、
.BR ip (7)
に記述されているソケットオプションを用いて読み書きできる。
これらは適切な
.I /proc
パラメータが有効な場合に限ってカーネルによって処理される
(しかし無効になっている場合でもユーザーには渡される)。
.BR ip (7)
を参照のこと。

.\"O When the
.\"O .B MSG_DONTROUTE
.\"O flag is set on sending, the destination address must refer to a local
.\"O interface address and the packet is only sent to that interface.
.B MSG_DONTROUTE
フラグが送信時にセットされている場合には、
行き先アドレスはローカルなインターフェースアドレスから
参照できなければならない。パケットはそのインターフェースにしか送られない。

.\"O By default, Linux UDP does path MTU (Maximum Transmission Unit) discovery.
.\"O This means the kernel
.\"O will keep track of the MTU to a specific target IP address and return
.\"O .B EMSGSIZE
.\"O when a UDP packet write exceeds it.
.\"O When this happens, the application should decrease the packet size.
.\"O Path MTU discovery can be also turned off using the
.\"O .B IP_MTU_DISCOVER
.\"O socket option or the
.\"O .I /proc/sys/net/ipv4/ip_no_pmtu_disc
.\"O file; see
.\"O .BR ip (7)
.\"O for details.
.\"O When turned off, UDP will fragment outgoing UDP packets
.\"O that exceed the interface MTU.
.\"O However, disabling it is not recommended
.\"O for performance and reliability reasons.
デフォルトでは、Linux の UDP は Path MTU Discovery を行う。
つまり、カーネルは特定の宛先 IP アドレスの MTU (Maximum Transmission Unit;
最大転送単位) を記録し、UDP パケットの書き込みが MTU を超えた場合
.B EMSGSIZE
を返す。
.B EMSGSIZE
を返された場合、アプリケーションはパケットサイズを小さくすべきである。
ソケットオプション
.B IP_MTU_DISCOVER
または
.I /proc/sys/net/ipv4/ip_no_pmtu_disc
ファイルを使って Path MTU Discovery を無効にすることもできる
(詳細は
.BR ip (7)
を参照)。
Path MTU Discovery を無効にした場合は、パケットサイズが
インタフェースの MTU よりも大きいと UDP はそのパケットを
フラグメント化して送出する。
しかしながら、性能と信頼性の理由から Path MTU Discovery を
無効にするのは推奨できない。
.\"O .SS Address Format
.SS アドレスのフォーマット
.\"O UDP uses the IPv4
.\"O .I sockaddr_in
.\"O address format described in
.\"O .BR ip (7).
UDP は IPv4 の
.I sockaddr_in
アドレスフォーマットを用いる。これは
.BR ip (7)
に記述されている。
.\"O .SS Error Handling
.SS エラー処理
.\"O All fatal errors will be passed to the user as an error return even
.\"O when the socket is not connected.
.\"O This includes asynchronous errors
.\"O received from the network.
.\"O You may get an error for an earlier packet
.\"O that was sent on the same socket.
致命的なエラーは、たとえソケットが接続されていなくても、
すべてエラー戻り値としてユーザーに渡される。
これにはネットワークから受け取る非同期エラーも含まれる。
同じソケットを使って送信した昔のパケットに関するエラーを受け取るかもしれない。
.\"O This behavior differs from many other BSD socket implementations
.\"O which don't pass any errors unless the socket is connected.
.\"O Linux's behavior is mandated by
.\"O .BR RFC\ 1122 .
この振る舞いは他の BSD ソケットの実装の多くとは異なる。
これらではソケットが接続されていない場合はエラーを全く返さない。
Linux の振る舞いは
.B RFC\ 1122
での指定に従ったものである。

.\"O For compatibility with legacy code, in Linux 2.0 and 2.2
.\"O it was possible to set the
.\"O .B SO_BSDCOMPAT
.\"O .B SOL_SOCKET
.\"O option to receive remote errors only when the socket has been
.\"O connected (except for
.\"O .B EPROTO
.\"O and
.\"O .BR EMSGSIZE ).
.\"O Locally generated errors are always passed.
.\"O Support for this socket option was removed in later kernels; see
.\"O .BR socket (7)
.\"O for further information.
Linux 2.0 と 2.2 では、古いコードとの互換性のために、
.B SO_BSDCOMPAT
.B SOL_SOCKET
オプションを設定すれば、ソケットが接続されている
場合に限ってリモートのエラーを受信するようにできた
.RB ( EPROTO " と " EMSGSIZE
を除く)。
ローカルで生成されたエラーは常に渡される。
このソケットオプションのサポートはそれ以降のバージョンの Linux で
削除された。詳細は
.BR socket (7)
を参照。

.\"O When the
.\"O .B IP_RECVERR
.\"O option is enabled, all errors are stored in the socket error queue
.\"O and can be received by
.\"O .BR recvmsg (2)
.\"O with the
.\"O .B MSG_ERRQUEUE
.\"O flag set.
.B IP_RECVERR
オプションが有効になっていると、
すべてのエラーはソケットのエラーキューに保存される。
これは
.B MSG_ERRQUEUE
フラグをセットして
.BR recvmsg (2)
を呼べば受信できる。
.\"O .SS /proc interfaces
.SS /proc インタフェース
.\"O System-wide UDP parameter settings can be accessed by files in the directory
.\"O .IR /proc/sys/net/ipv4/ .
システム全体の UDP パラメータ設定には、
.I /proc/sys/net/ipv4/
ディレクトリ内のファイルの読み書きでアクセスできる。
.TP
.\"O .IR udp_mem " (since Linux 2.6.25)"
.IR udp_mem " (Linux 2.6.25 以降)"
.\"O This is a vector of three integers governing the number
.\"O of pages allowed for queueing by all UDP sockets.
これは 3 つの整数からなるベクトル値で、
UDP の全ソケットのキューで利用可能なページ数を制御する。
.RS
.TP 10
.I min
.\"O Below this number of pages, UDP is not bothered about its
.\"O memory appetite.
.\"O When the amount of memory allocated by UDP exceeds
.\"O this number, UDP starts to moderate memory usage.
このページ数より少なければ、UDP はそのメモリ使用に関して
干渉されない。
UDP に割り当てられたメモリ総量がこの値を超過すると、
UDP はメモリ使用量を調整し始める。
.TP
.I pressure
.\"O This value was introduced to follow the format of
.\"O .IR tcp_mem
.\"O (see
.\"O .BR tcp (7)).
この値は
.I tcp_mem
の形式
.RB ( tcp (7)
参照) と合わせるために導入された
.TP
.I max
.\"O Number of pages allowed for queueing by all UDP sockets.
UDP の全ソケットのキューで利用可能なページ数。
.RE
.IP
.\"O Defaults values for these three items are
.\"O calculated at boot time from the amount of available memory.
これらの 3 つの値のデフォルト値は、
ブート時に利用可能なメモリ総量から計算される。
.TP
.\"O .IR udp_rmem_min " (integer; default value: PAGE_SIZE; since Linux 2.6.25)"
.IR udp_rmem_min " (integer; デフォルト値: PAGE_SIZE; Linux 2.6.25 以降)"
.\"O Minimal size, in bites, of receive buffers used by UDP sockets in moderation.
.\"O Each UDP socket is able to use the size for receiving data,
.\"O even if total pages of UDP sockets exceed
.\"O .I udp_mem
.\"O pressure.
メモリ使用量の調整中に、UDP ソケットが使用できる受信バッファの最小値
(バイト単位)。
UDP の全ソケットのページ使用量の合計が
.I udp_mem
pressure を超過している場合であっても、
各 UDP ソケットはデータの受信にこのサイズ分だけは使用することができる。
.TP
.\"O .IR udp_wmem_min " (integer; default value: PAGE_SIZE; since Linux 2.6.25)"
.IR udp_wmem_min " (integer; デフォルト値: PAGE_SIZE; Linux 2.6.25 以降)"
.\"O Minimal size, in bytes, of send buffer used by UDP sockets in moderation.
.\"O Each UDP socket is able to use the size for sending data,
.\"O even if total pages of UDP sockets exceed
.\"O .I udp_mem
.\"O pressure.
メモリ使用量の調整中に、UDP ソケットが使用できる送信バッファの最小値
(バイト単位)。
UDP の全ソケットのページ使用量の合計が
.I udp_mem
pressure を超過している場合であっても、
各 UDP ソケットはデータの送信にこのサイズ分だけは使用することができる。
.\"O \"O .SS "Socket Options"
.SS ソケットオプション
.\"O To set or get a UDP socket option, call
.\"O .BR getsockopt (2)
.\"O to read or
.\"O .BR setsockopt (2)
.\"O to write the option with the option level argument set to
.\"O .BR IPPROTO_UDP .
UDP ソケットオプションを設定または取得するには、
取得には
.BR getsockopt (2)
を、設定には
.BR setsockopt (2)
をオプションレベル引数に
.B IPPROTO_UDP
を指定して呼び出す。
.TP
.\"O .BR UDP_CORK " (since Linux 2.5.44)"
.BR UDP_CORK " (Linux 2.5.44 以降)"
.\"O If this option is enabled, then all data output on this socket
.\"O is accumulated into a single datagram that is transmitted when
.\"O the option is disabled.
.\"O This option should not be used in code intended to be
.\"O portable.
このオプションが指定されると、このソケットの全てのデータ出力は
一つのデータグラムに蓄積され、このオプションが無効化された時に
送信される。
このオプションは移植性を考慮したコードでは用いるべきではない。
.\" FIXME document UDP_ENCAP (new in kernel 2.5.67)
.\" From include/linux/udp.h:
.\" /* UDP encapsulation types */
.\" #define UDP_ENCAP_ESPINUDP_NON_IKE      1 /* draft-ietf-ipsec-nat-t-ike-00/01 */
.\" #define UDP_ENCAP_ESPINUDP      2 /* draft-ietf-ipsec-udp-encaps-06 */
.\" #define UDP_ENCAP_L2TPINUDP     3 /* rfc2661 */
.\"O .SS Ioctls
.SS ioctl
.\"O These ioctls can be accessed using
.\"O .BR ioctl (2).
以下に示す ioctl は
.BR ioctl (2)
を使ってアクセスできる。
.\"O The correct syntax is:
正しい文法は以下の通り。
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" udp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.TP
.BR FIONREAD " (" SIOCINQ )
.\"O Gets a pointer to an integer as argument.
.\"O Returns the size of the next pending datagram in the integer in bytes,
.\"O or 0 when no datagram is pending.
integer のポインタを引数として取る。
次に待機しているデータグラムのサイズをバイト単位の整数で返す。
待機しているデータグラムがない場合は 0 を返す。
.TP
.BR TIOCOUTQ " (" SIOCOUTQ )
.\"O Returns the number of data bytes in the local send queue.
.\"O Only supported with Linux 2.4 and above.
ローカル送信キューにあるデータサイズをバイト単位で返す。
Linux 2.4 以上でのみ対応している。
.PP
.\"O In addition all ioctls documented in
.\"O .BR ip (7)
.\"O and
.\"O .BR socket (7)
.\"O are supported.
さらに、
.BR ip (7)
と
.BR socket (7)
で述べられている全ての ioctl も対応している。
.\"O .SH ERRORS
.SH エラー
.\"O All errors documented for
.\"O .BR socket (7)
.\"O or
.\"O .BR ip (7)
.\"O may be returned by a send or receive on a UDP socket.
.BR socket (7)
や
.BR ip (7)
に記述されている全てのエラーが、
UDP ソケットの送受信で返される可能性がある。
.TP
.B ECONNREFUSED
.\"O No receiver was associated with the destination address.
.\"O This might be caused by a previous packet sent over the socket.
行き先アドレスに関連づけられている受信者がいない。
これは以前のパケットがそのパケットを
上書き送信してしまっているからであることが多い。
.\"O .SH VERSIONS
.SH バージョン
.\"O .B IP_RECVERR
.\"O is a new feature in Linux 2.2.
.B IP_RECVERR
は Linux 2.2 の新しい機能である。
.\"O .\" .SH CREDITS
.\" .SH 著者
.\"O .\" This man page was written by Andi Kleen.
.\" この man ページは Andi Kleen が書いた。
.\"O .SH SEE ALSO
.SH 関連項目
.BR ip (7),
.BR raw (7),
.BR socket (7),
.BR udplite (7)

.\"O RFC\ 768 for the User Datagram Protocol.
RFC\ 768 : User Datagram Protocol
.br
.\"O RFC\ 1122 for the host requirements.
RFC\ 1122 : ホストの必要条件
.br
.\"O RFC\ 1191 for a description of path MTU discovery.
RFC\ 1191 : path MTU discovery の記述
