.\" Copyright (c) 1996 Eric S. Raymond <esr@thyrsus.com>
.\" and Copyright (c) Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" This is combined from many sources, including notes by aeb and
.\" research by esr.  Portions derive from a writeup by Roman Czyborra.
.\"
.\" Changes also by David Starner <dstarner98@aasaa.ofe.org>.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996,1997,1998
.\"         ISHIKAWA Mutsumi, all rights reserved.
.\" Translated Mon Jul 21 03:46:21 JST 1997
.\"         by ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Updated Fri Dec  3 JST 1999 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated Fri Jan  4 JST 2002 by Kentaro Shirakata <argrath@ub32.org>
.\"
.TH CHARSETS 7 2020\-08\-13 Linux "Linux Programmer's Manual"
.SH 名前
charsets \- 文字集合の標準と国際化
.SH 説明
このマニュアルページでは、 様々な文字集合標準の概要と、 Unicode が広く使われるようになる前にこれらの文字集合が Linux
でどのように使われていたかを説明する。 この情報の中には、以前からあるシステムやドキュメントを扱う人々にとっては今も役立つことだろう。
.PP
ここで扱う標準としては ASCII, GB 2312, ISO 8859, JIS, KOI8\-R, KS, Unicode がある。
.PP
主な対象はロケール文字集合で実際に使用されていた文字集合についてであり、他のシステムで作成されたデータで使われていた無数の他の文字集合についてではない。
.SS ASCII
ASCII (American Standard Code For Information Interchange) は
7　ビット文字集合の元となったものであり、 もともとは米語 (American English) のためにデザインされた。 US\-ASCII
とも呼ばれる。 現在は、ISO 646:1991 IRV (International Reference Version) 標準で説明されている。
.PP
ドイツ語、フランス語、スペイン語などに 7 ビットで対応するため、 ASCII のドル記号を他の通貨記号に置き換え、
句読点を非英語文字のものに置き換えた様々な変種が登場した。 これらはすべて非推奨である。 glibc は ASCII
の完全なスーパーセットでない文字セットのロケールに対応していない。
.PP
UTF\-8 を使う場合、Unicode は ASCII と互換性があるので、 通常の ASCII テキストは新しい UTF\-8
を使ったシステムでもそのまま正しく表示することができる。
.SS "ISO 8859"
ISO 8859 is a series of 15 8\-bit character sets, all of which have ASCII in
their low (7\-bit) half, invisible control characters in positions 128 to
159, and 96 fixed\-width graphics in positions 160\(en255.
.PP
これらのうち、最も重要なのは ISO 8859\-1 ("Latin Alphabet No .1" / Latin\-1) である。 ISO 8859\-1
は広く採用され、様々なシステムでサポートされていたが、 徐々に Unicode で置き換えれている。 ISO 8859\-1 文字集合は Unicode
の最初の 256 文字でもある。
.PP
コンソールにおける、その他の 8859 文字集合のサポートは
(\fBsetfont\fP(8)) のようなユーザーモードユーティリティを利用する事で可能になる。
このようなユーティリティを利用することにより、コンソールドライバにおけ
るキーボードと EGA グラフィックテーブルの割り当てを変更し、
"ユーザー割り当て(user mapping)"フォントテーブルを使用することができる。
.PP
以下は、それぞれの集合の簡単な説明である。
.TP 
8859\-1 (Latin\-1)
Latin\-1 は アルバニア語 (Albanian)、バスク語 (Basque)、デンマーク語 (Danish)、英語 (English)、フェロー語
(Faroese)、ガリシア語 (Galician)、アイスランド語 (Icelandic)、アイルランド語 (Irish)、イタリア語
(Italian)、ノルウェー語 (Norwegian)、ポルトガル語 (Portuguese)、スペイン語 (Spanish)、スウェーデン語
(Swedish) といった多くの西ヨーロッパ言語をカバーする。 オランダ語の Ĳ/ĳ やフランス語の œ といった合字や古いスタイルの
„German“ 引用符が欠けている点は以前は許容範囲と考えられていた。
.TP 
8859\-2 (Latin\-2)
Latin\-2 は、ボスニア語 (Bosnian)、クロアチア語 (Croatian)、チェコ語 (Czech)、ドイツ語
(German)、ハンガリー語 (Hungarian)、ポーランド語 (Polish)、スロヴァキア語 (Slovak)、スロベニア語
(Slovene) といった、 ラテン文字を書き文字として使用する多くの中央、東ヨーロッパの言語をサポートする。 以前は、ルーマニア語の ș/ț を
ş/ţ で置き換えるのは許容範囲と考えられていた。
.TP 
8859\-3 (Latin\-3)
Latin\-3 は、エスペラント語 (Esperanto)、マルタ語 (Maltese)、トルコ語 (Turkish) に対応するために設計されたが、
トルコ語に関しては後に 8859\-9 に取って代わられた。
.TP 
8859\-4 (Latin\-4)
Latin\-4 は、エストニア語 (Estonian)、ラトビア語 (Latvian)、リトアニア語 (Lithuanian)
といった北ヨーロッパの言語の文字を提供していたが、 8859\-10 と 8859\-13 に取って代わられた。
.TP 
8859\-5
ブルガリア語 (Bulgarian)、ベラルーシ語 (Byelorussian)、マケドニア語 (Macedonian)、ロシア語
(Russian)、セルビア語 (Serbian) をサポートし、 ウクライナ語 (Ukrainian) を (ほぼ完全に)
サポートするキリル文字集合である。 この文字集合が広く使われたことはなかった。 下の KOI8\-R/KOI8\-U に関する議論を参照のこと。
.TP 
8859\-6
アラビア語 (Arabic) をサポートするために作成された。 8859\-6 のグリフテーブル (glyph table)
は文字の形態を分割した固定幅フォントである。 そのため、適切なディスプレイエンジンと組み合わせ、 正しい initial, medial, final
フォームに結合しなければならない。
.TP 
8859\-7
現代ギリシャ語用として 1987 年に作成され、 2003 年に更新された。
.TP 
8859\-8
niqud (句読点記号) のない現代ヘブライ語 (Hebrew) をサポートする。 niqud と完全な聖書風ヘブライ語 (Biblical
Hebrew) はこの文字セットの対象外である。
.TP 
8859\-9 (Latin\-5)
これは、Latin\-1 の変種で、アイスランド語の文字をトルコ語(Turkish)文字に
置き換えたものである。
.TP 
8859\-10 (Latin\-6)
Latin\-6 は、 北欧 (Nordic) 地域を完全にカバーするために Latin\-4 には含まれていないイヌイット語 (Inuit)
(グリーンランド語 (Greenlandic)) と サーメ語 (Sami) (ラップ語 (Lappish)) を追加していた。
.TP 
8859\-11
タイ語のアルファベットをサポートし、 TIS\-620 標準とほとんど同一である。
.TP 
8859\-12
この文字集合は存在しない。
.TP 
8859\-13 (Latin\-7)
バルト海諸国の言語をサポートする。
特に、Latin\-4 に存在しないラトビア語の文字を含む。
.TP 
8859\-14 (Latin\-8)
これは、 ケルト語の文字セットであり、古代アイルランド語 (Old Irish)、マン島語 (Manx)、ゲール語 (Gaelic)、ウェールズ語
(Welsh)、コーンウォール語 (Cornish)、ブルターニュ語 (Breton) に対応する。
.TP 
8859\-15 (Latin\-9)
Latin\-9 は、広く使用されている Latin\-1 に似ているが、 いくつかのあまり使用されないシンボルを、 ユーロ記号と Latin\-1
に入っていないフランス語とフィンランド語の文字に置き換えている。
.TP 
8859\-16 (Latin\-10)
この文字セットは多くの東南ヨーロッパの言語に対応しており、もっとも重要なのはルーマニア語にはより完全に対応している点である。
.SS "KOI8\-R / KOI8\-U"
KOI8\-R is a non\-ISO character set popular in Russia before Unicode.  The
lower half is ASCII; the upper is a Cyrillic character set somewhat better
designed than ISO 8859\-5.  KOI8\-U, based on KOI8\-R, has better support for
Ukrainian.  Neither of these sets are ISO\-2022 compatible, unlike the ISO
8859 series.
.PP
Linux での KOI8\-R のコンソールサポートは、
ユーザーモードのユーティリティで実現されている。
これはキーボードの割り当てと EGA グラフィックテーブルを変更し、
コンソールドライバのフォントテーブルに "ユーザー割り当て" を行う。
.SS "GB 2312"
GB 2312 は、簡体文字を表現するための中国の国定標準文字セットである。 JIS X 0208 と同様に、文字は 94x94 の 2
バイトマトリックスに配置され、 EUC\-CN に用いられる。 EUC\-CN は Linux において最も重要なエンコーディングであり、 ASCII と
GB 2312 を含んでいる。 EUC\-CN はしばしば GB, GB 2312, CN\-GN などと呼ばれる。
.SS Big5
.\" Thanks to Tomohiro KUBOTA for the following sections about
.\" national standards.
Big5 was a popular character set in Taiwan to express traditional Chinese.
(Big5 is both a character set and an encoding.)  It is a superset of ASCII.
Non\-ASCII characters are expressed in two bytes.  Bytes 0xa1\(en0xfe are
used as leading bytes for two\-byte characters.  Big5 and its extension were
widely used in Taiwan and Hong Kong.  It is not ISO 2022 compliant.
.SS "JIS X 0208"
JIS X 0208 is a Japanese national standard character set.  Though there are
some more Japanese national standard character sets (like JIS X 0201, JIS X
0212, and JIS X 0213), this is the most important one.  Characters are
mapped into a 94x94 two\-byte matrix, whose each byte is in the range
0x21\(en0x7e.  Note that JIS X 0208 is a character set, not an encoding.
This means that JIS X 0208 itself is not used for expressing text data.  JIS
X 0208 is used as a component to construct encodings such as EUC\-JP,
Shift_JIS, and ISO\-2022\-JP.  EUC\-JP is the most important encoding for Linux
and includes ASCII and JIS X 0208.  In EUC\-JP, JIS X 0208 characters are
expressed in two bytes, each of which is the JIS X 0208 code plus 0x80.
.SS "KS X 1001"
KS X 1001 は韓国の国定標準文字セットである。 JIS X 0208 と同様に、文字は 94x94 の 2 バイトマトリックスに配置される。
KS X 1001 は JIS X 0208 と同様に、 EUC\-KR, Johab, ISO\-2022\-KR
といったエンコーディングの部品として用いられる。 EUC\-KR は Linux において最も重要なエンコーディングであり、 ASCII と KS X
1001 を含んでいる。 KS C 5601 は KS X 1001 の古い名前である。
.SS "ISO 2022 and ISO 4873"
ISO 2022 と ISO 4873 標準では、 VT100 の動作に基づいたフォントコントロールモデルが規定されている。 このモデルは Linux
カーネルや \fBxterm\fP(1) において (部分的に) サポートされている。 日本語向けなど、ISO\-2022
をベースにした文字符号化がいくつか定義されてきた。
.PP
There are 4 graphic character sets, called G0, G1, G2, and G3, and one of
them is the current character set for codes with high bit zero (initially
G0), and one of them is the current character set for codes with high bit
one (initially G1).  Each graphic character set has 94 or 96 characters, and
is essentially a 7\-bit character set.  It uses codes either 040\(en0177
(041\(en0176) or 0240\(en0377 (0241\(en0376).  G0 always has size 94 and
uses codes 041\(en0176.
.PP
Switching between character sets is done using the shift functions \fB\(haN\fP
(SO or LS1), \fB\(haO\fP (SI or LS0), ESC n (LS2), ESC o (LS3), ESC N (SS2),
ESC O (SS3), ESC \(ti (LS1R), ESC } (LS2R), ESC | (LS3R).  The function
LS\fIn\fP makes character set G\fIn\fP the current one for codes with high bit
zero.  The function LS\fIn\fPR makes character set G\fIn\fP the current one for
codes with high bit one.  The function SS\fIn\fP makes character set G\fIn\fP
(\fIn\fP=2 or 3)  the current one for the next character only (regardless of
the value of its high order bit).
.PP
94 文字集合では、エスケープシーケンス ESC ( xx (G0 用), ESC ) xx (G1
用),  ESC * xx (G2 用), ESC + xx (G3 用) によって、G\fIn\fP 文字集合
を用いるように指示される。
xx は "ISO 2375 International Register of Coded Character Sets" で
決められている一文字、または二文字である。
たとえば ESC ( @ は ISO 646 文字集合を G0 として選び、ESC ( A
は(ナンバーサイン(＃)の代わりに、ポンド(£)を持つ) UK スタンダード文字集合を
選択する。ESC ( B は(通貨記号のかわりにダラー(＄)を持つ) ASCIIを選択する。
ESC ( M は アフリカ言語(African languages) を選択し、ESC
( ! A は キューバ語(Cuban)文字集合を選択する。などなど…
.PP
96\-文字集合では、エスケープシーケンス ESC
\- xx (G1 用), ESC . xx (G2 用), ECS / xx (G3 用)を用いることで、
G\fIn\fP 文字集合を使用するように指示される。
例えば、ESC \- G はヘブライアルファベット(Hebrew alphabet) を
G1 として選択する。
.PP
マルチバイト文字集合ではエスケープシーケンス E $ xx または ESC $ ( xx
(G0 用), ESC $ ) xx (G1 用), ESC $ * xx (G2 用), ESC$ + xx (G3 用) を
用いることで、 G\fIn\fP 文字集合を使用するように指示される。
例えば、ESC $ ( C は 韓国語(Korean)文字集合を G0 として選択する。
ESC $ B によって選択される日本語文字セットは、より最近のバージョンでは
ESC & @ ESC $ B によって選択されるようになった。
.PP
ISO 4873 stipulates a narrower use of character sets, where G0 is fixed
(always ASCII), so that G1, G2 and G3 can be invoked only for codes with the
high order bit set.  In particular, \fB\(haN\fP and \fB\(haO\fP are not used
anymore, ESC ( xx can be used only with xx=B, and ESC ) xx, ESC * xx, ESC +
xx are equivalent to ESC \- xx, ESC . xx, ESC / xx, respectively.
.SS TIS\-620
TIS\-620 is a Thai national standard character set and a superset of ASCII.
In the same fashion as the ISO 8859 series, Thai characters are mapped into
0xa1\(en0xfe.
.SS Unicode
Unicode (ISO10646) は、人間が用いる全ての言語の全ての文字を、 明確にあらわすことを目的とした規格である。 Unicode
の構造は各文字のエンコードに 20.1 ビットを与えている。 ほとんどのコンピューターは 20.1 ビットの整数を扱えないので、 Unicode
は普通内部データとして 32 ビット整数にエンコードされ、 16 ビット整数の列 (UTF\-16)(ある種の珍しい文字をエンコードする場合にだけ 2
つの 16 ビット整数が必要となる)か、 8 ビットバイトの列 (UTF\-8)として扱われる。
.PP
Linux は 8\-bit Unicode Transformation Form(UTF\-8) を用いて Unicode を
あらわす。 UTF\-8 は Unicode の可変長表現である。UTF\-8 は 7 ビットを
符号化するのに 1 バイトを、 11 ビットでは 2 バイトを、
16 ビットでは 3 バイトを、
21 ビットでは 4 バイトを、
26 ビットでは 5 バイトを、
31 ビットでは 6 バイトを用いる。
.PP
0,1,x をゼロ、１、任意のビットとすると、あるバイト 0xxxxxxx は Unicode では
00000000 0xxxxxxx とあらわされる。これは、ASCII の 0xxxxxxx と同じ
シンボルのコードである。このように、ASCII は変更なしに UTF\-8 に変換でき、
ASCII のみを使う場合は、コードにおいてもファイルサイズにおいても、
変更に関して何も気にしなくてよい。
.PP
110xxxxx というバイトは 2 バイトコードの始まりである、そして、110xxxxx
10yyyyyy は 00000xxx xxyyyyyy というように組み立てられる。また、
1110xxxx は 3 バイトコードの始まりであり、1110xxxx 10yyyyyy 10zzzzzz
は xxxxyyyy yyzzzzzz というように組み立てられる(UTF\-8 が 31 ビット
ISO 10646 コードを利用するときは、この工程は 6 バイトコードまで発展させられる)。
.PP
For most texts in ISO 8859 character sets, this means that the characters
outside of ASCII are now coded with two bytes.  This tends to expand
ordinary text files by only one or two percent.  For Russian or Greek texts,
this expands ordinary text files by 100%, since text in those languages is
mostly outside of ASCII.  For Japanese users this means that the 16\-bit
codes now in common use will take three bytes.  While there are algorithmic
conversions from some character sets (especially ISO 8859\-1) to Unicode,
general conversion requires carrying around conversion tables, which can be
quite large for 16\-bit codes.
.PP
UTF\-8 は自己同期的である。10xxxxxx は終端であり、ほかのバイトはコードの
先頭である。UTF\-8 の文字列における ASCII のバイトは、常にその文字自身を
表現することに注目してほしい。特に、幾つかの大きなコードのパートを形成
するために、NUL (\(aq\e0\(aq) や \(aq/\(aq を埋め込む必要はない。
.PP
ASCII と NUL と \(aq/\(aq は変更されないため、カーネルは UTF\-8 を
使用していることを特に意識しなくても良い。
カーネルはバイトが何をあらわしているかに注意する必要がない。
.PP
Unicode データ列のレンダリングは典型的には Unicode のサブセットからグリフへのマップである"サブフォント (subfont)"
テーブルを利用して行われる。 カーネル内部では、Unicode を使ってビデオ RAM 内部にロードされたサブフォントを記述している。 これは、
UTF\-8 モードの Linux コンソールでは 512 個の異なったシンボルを持った文字集合を利用できることを意味する。 これは、
日本語、中国語、韓国語では十分ではないが、 その他のほとんどの目的では十分である。
.SH 関連項目
\fBiconv\fP(1), \fBascii\fP(7), \fBiso_8859\-1\fP(7), \fBunicode\fP(7), \fButf\-8\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
