.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2005-01-26, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated and Modified 2005-10-27, Akihiro MOTOKI
.\" Updated and Modified 2005-11-04, Akihiro MOTOKI
.\"
.TH PATH_RESOLUTION 7 2009-12-05 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O path_resolution \- how a pathname is resolved to a file
path_resolution \- ファイルのパス名の解決方法
.\"O .SH DESCRIPTION
.SH 説明
.\"O Some UNIX/Linux system calls have as parameter one or more filenames.
.\"O A filename (or pathname) is resolved as follows.
いくつかの UNIX/Linux システムコールは、
1 つ以上のファイル名を引き数として持つ。
ファイル名 (またはパス名) は以下のようにして解決される。
.\"O .SS "Step 1: Start of the resolution process"
.SS "ステップ 1: 解決過程を開始する"
.\"O If the pathname starts with the \(aq/\(aq character,
.\"O the starting lookup directory
.\"O is the root directory of the calling process.
.\"O (A process inherits its
.\"O root directory from its parent.
.\"O Usually this will be the root directory
.\"O of the file hierarchy.
.\"O A process may get a different root directory
.\"O by use of the
.\"O .BR chroot (2)
.\"O system call.
.\"O A process may get an entirely private mount namespace in case
.\"O it \(em or one of its ancestors \(em was started by an invocation of the
.\"O .BR clone (2)
.\"O system call that had the
.\"O .B CLONE_NEWNS
.\"O flag set.)
.\"O This handles the \(aq/\(aq part of the pathname.
パス名が \(aq/\(aq 文字で始まっている場合、
ディレクトリ検索の開始点は呼び出し元のプロセスのルートディレクトリになる。
(プロセスはルートディレクトリを親プロセスから継承する。
通常は、これがファイル階層のルートディレクトリになる。
プロセスは
.BR chroot (2)
システムコールを使って別のルートディレクトリを取得することもできる。
この場合、そのプロセスと
.B CLONE_NEWNS
フラグを設定して
.BR clone (2)
を呼び出すことによって開始されたそのプロセスの子孫は、
完全にプライベートなマウント名前空間を取得できる。)
パス名の \(aq/\(aq の部分は、このようにして扱われる。

.\"O If the pathname does not start with the \(aq/\(aq character, the
.\"O starting lookup directory of the resolution process is the current working
.\"O directory of the process.
.\"O (This is also inherited from the parent.
.\"O It can be changed by use of the
.\"O .BR chdir (2)
.\"O system call.)
パス名が \(aq/\(aq 文字で始まっていない場合、
解決過程におけるディレクトリ検索の開始点は、
プロセスの現在の作業 (working) ディレクトリとなる。
(これも親プロセスから継承される。
これは
.BR chdir (2)
システムコールを使うことで変更できる。)

.\"O Pathnames starting with a \(aq/\(aq character are called absolute pathnames.
.\"O Pathnames not starting with a \(aq/\(aq are called relative pathnames.
\(aq/\(aq 文字で始まるパス名は絶対パス名と呼ばれ、
\(aq/\(aq 文字で始まらないパス名は相対パス名と呼ばれる。
.\"O .SS "Step 2: Walk along the path"
.SS "ステップ 2: パスを辿る"
.\"O Set the current lookup directory to the starting lookup directory.
.\"O Now, for each nonfinal component of the pathname, where a component
.\"O is a substring delimited by \(aq/\(aq characters, this component is looked up
.\"O in the current lookup directory.
現在の検索ディレクトリをディレクトリ検索の開始点とする。
そして、パス名の最後の構成要素 (component) でない各構成要素について、
現在の検索ディレクトリで検索を行う。
ここで構成要素は \(aq/\(aq で区切られた部分文字列である。

.\"O If the process does not have search permission on
.\"O the current lookup directory,
.\"O an
.\"O .B EACCES
.\"O error is returned ("Permission denied").
プロセスが現在の検索ディレクトリの検索許可を持たない場合、
.B EACCES
エラーが返される ("Permission denied")。

.\"O If the component is not found, an
.\"O .B ENOENT
.\"O error is returned
.\"O \"O ("No such file or directory").
構成要素が見つからない場合、
.B ENOENT
エラーが返される
("No such file or directory")。

.\"O If the component is found, but is neither a directory nor a symbolic link,
.\"O an
.\"O .B ENOTDIR
.\"O error is returned ("Not a directory").
構成要素は見つかったが、ディレクトリでもシンボリックリンクでもない場合、
.B ENOTDIR
エラーが返される ("Not a directory")。

.\"O If the component is found and is a directory, we set the
.\"O current lookup directory to that directory, and go to the
.\"O next component.
構成要素が見つかって、かつディレクトリである場合、
現在の検索ディレクトリをそのディレクトリに設定し、
次の構成要素に移動する。

.\"O If the component is found and is a symbolic link (symlink), we first
.\"O resolve this symbolic link (with the current lookup directory
.\"O as starting lookup directory).
.\"O Upon error, that error is returned.
構成要素が見つかって、かつシンボリックリンク (symlink) である場合、
(現在の検索ディレクトリをディレクトリ検索の開始点として)
最初にそのシンボリックリンクを解決する。
.\"O If the result is not a directory, an
.\"O .B ENOTDIR
.\"O error is returned.
結果がディレクトリでない場合、
.B ENOTDIR
エラーが返される。
.\"O If the resolution of the symlink is successful and returns a directory,
.\"O we set the current lookup directory to that directory, and go to
.\"O the next component.
シンボリックリンクの解決が成功してディレクトリが返された場合、
そのディレクトリを現在の検索ディレクトリとして設定し、
次の構成要素に移動する。
.\"O Note that the resolution process here involves recursion.
解決過程に再帰が含まれる点に注意すること。
.\"O In order to protect the kernel against stack overflow, and also
.\"O to protect against denial of service, there are limits on the
.\"O maximum recursion depth, and on the maximum number of symbolic links
.\"O followed.
.\"O An
.\"O .B ELOOP
.\"O error is returned when the maximum is
.\"O exceeded ("Too many levels of symbolic links").
カーネルをスタックオーバーフローや
サービス拒否 (denial of service) から守るため、
再帰の最大の深さとシンボリックリンクを辿る最大回数に制限がある。
最大値を超えた場合
.B ELOOP
エラーが返される
("Too many levels of symbolic links")。
.\"
.\"O .\" presently: max recursion depth during symlink resolution: 5
.\"O .\" max total number of symbolic links followed: 40
.\"O .\" _POSIX_SYMLOOP_MAX is 8
.\" 現在のところ: シンボリックリンク解決における再帰の最大の深さは 5 である。
.\" シンボリックリンクを辿る最大回数は 40 である。
.\" _POSIX_SYMLOOP_MAX は 8 である。
.\"O .SS "Step 3: Find the final entry"
.SS "ステップ 3: 最後のエントリを見つける"
.\"O The lookup of the final component of the pathname goes just like
.\"O that of all other components, as described in the previous step,
.\"O with two differences: (i) the final component need not be a
.\"O directory (at least as far as the path resolution process is concerned \(em
.\"O it may have to be a directory, or a nondirectory, because of
.\"O the requirements of the specific system call), and (ii) it
.\"O is not necessarily an error if the component is not found \(em
.\"O maybe we are just creating it.
.\"O The details on the treatment
.\"O of the final entry are described in the manual pages of the specific
.\"O system calls.
パス名の最後の構成要素の検索は、前のステップで説明した
他の全ての構成要素と同じように実行されるが、2 つの違いがある。
(i) 最後の構成要素はディレクトリである必要がない
(パス解決過程に関する限りはどちらでも構わない \(em
特定のシステムコールが要求するものによって、
ディレクトリでなければならない場合もあるし、
ディレクトリ以外でなければならない場合もある)。
(ii) 構成要素が見つからない場合にエラーにする必要はない \(em
その構成要素を作成するだけでよい場合もある。
最後のエントリの詳細な扱いは、
特定のシステムコールの man ページで説明されている。
.\"O .SS ". and .."
.SS ". と .."
.\"O By convention, every directory has the entries "." and "..",
.\"O which refer to the directory itself and to its parent directory,
.\"O respectively.
慣習として、全てのディレクトリはエントリ "." と ".." を持つ。
これらはそれぞれ、そのディレクトリ自身とその親ディレクトリを参照する。

.\"O The path resolution process will assume that these entries have
.\"O their conventional meanings, regardless of whether they are
.\"O actually present in the physical file system.
パス解決過程では、これらのエントリが物理的なファイルシステムに
実際に存在するか否かに関わらず、慣習的な意味を持つと仮定する。

.\"O One cannot walk down past the root: "/.." is the same as "/".
ルートより上に辿ることはできない: "/.." は "/" と同じである。
.\"O .SS "Mount points"
.SS "マウント位置"
.\"O After a "mount dev path" command, the pathname "path" refers to
.\"O the root of the file system hierarchy on the device "dev", and no
.\"O longer to whatever it referred to earlier.
"mount dev path" コマンドを実行した後、
パス名 "path" はデバイス "dev" 上のファイルシステム階層の
ルートディレクトリを参照するようになり、以前の位置を参照しない。

.\"O One can walk out of a mounted file system: "path/.." refers to
.\"O the parent directory of "path",
.\"O outside of the file system hierarchy on "dev".
マウントされたファイルシステムの外に出ることができる:
"path/.." は "dev" 上のファイルシステム階層の外である
"path" の親ディレクトリを参照する。
.\"O .SS "Trailing slashes"
.SS "末尾のスラッシュ"
.\"O If a pathname ends in a \(aq/\(aq, that forces resolution of the preceding
.\"O component as in Step 2: it has to exist and resolve to a directory.
.\"O Otherwise a trailing \(aq/\(aq is ignored.
.\"O (Or, equivalently, a pathname with a trailing \(aq/\(aq is equivalent to
.\"O the pathname obtained by appending \(aq.\(aq to it.)
パス名が \(aq/\(aq で終わっている場合、
ステップ 2 において、その前にある構成要素の解決法を次のように強制する:
その構成要素が存在しなければならず、ディレクトリとして解決される。
存在しない場合は、末尾の \(aq/\(aq が無視される。
(また同様に、末尾に \(aq/\(aq があるパス名は、
\(aq.\(aq を末尾に加えて得られるパス名と等しい。)
.\"O .SS "Final symlink"
.SS "最後がシンボリックリンクのとき"
.\"O If the last component of a pathname is a symbolic link, then it
.\"O depends on the system call whether the file referred to will be
.\"O the symbolic link or the result of path resolution on its contents.
パス名の最後の構成要素がシンボリックリンクである場合、
参照されるファイルをシンボリックリンクとするか、
その内容についてパスを解決した結果とするかは、
システムコールに依存する。
.\"O For example, the system call
.\"O .BR lstat (2)
.\"O will operate on the symlink, while
.\"O .BR stat (2)
.\"O operates on the file pointed to by the symlink.
たとえば、システムコール
.BR lstat (2)
はシンボリックリンクに作用する。
一方、
.BR stat (2)
はシンボリックリンクで指されたファイルに作用する。
.\"O .SS "Length limit"
.SS "長さの制限"
.\"O There is a maximum length for pathnames.
.\"O If the pathname (or some
.\"O intermediate pathname obtained while resolving symbolic links)
.\"O is too long, an
.\"O .B ENAMETOOLONG
.\"O error is returned ("File name too long").
パス名には最大長がある。
パス名 (またはシンボリックリンクを解決するときに得られる中間パス名) が
長すぎる場合、
.B ENAMETOOLONG
エラーが返される ("File name too long")。
.\"O .SS "Empty pathname"
.SS "空のパス名"
.\"O In the original UNIX, the empty pathname referred to the current directory.
.\"O Nowadays POSIX decrees that an empty pathname must not be resolved
.\"O successfully.
.\"O Linux returns
.\"O .B ENOENT
.\"O in this case.
元々の UNIX では、空のパス名は現在のディレクトリを参照していた。
最近、POSIX では空のパス名を解決するべきではないという決定がなされた。
この場合、Linux は
.B ENOENT
を返す。
.\"O .SS "Permissions"
.SS "許可"
.\"O The permission bits of a file consist of three groups of three bits, cf.\&
.\"O .BR chmod (1)
.\"O and
.\"O .BR stat (2).
ファイルの許可ビットは、3 組の 3 ビットから構成される。
.BR chmod (1)
と
.BR stat (2)
を参照すること。
.\"O The first group of three is used when the effective user ID of
.\"O the calling process equals the owner ID of the file.
.\"O The second group
.\"O of three is used when the group ID of the file either equals the
.\"O effective group ID of the calling process, or is one of the
.\"O supplementary group IDs of the calling process (as set by
.\"O .BR setgroups (2)).
.\"O When neither holds, the third group is used.
呼び出し元のプロセスの実効ユーザ ID がファイルの所有者 ID と等しい場合、
3 つのうち最初のグループが使われる。
ファイルのグループ ID が呼び出し元のプロセスの実効グループ ID または
.RB ( setgroups (2)
で設定される) 呼び出し元のプロセスの補助 (supplementary) グループ ID と
等しい場合、3 つのうち 2 番目のグループが使われる。
どちらにも当てはまらない場合、3 番目のグループが使われる。

.\"O Of the three bits used, the first bit determines read permission,
.\"O the second write permission, and the last execute permission
.\"O in case of ordinary files, or search permission in case of directories.
3 ビットが使われる場合、最初のビットは読み込み許可を決定し、
2 番目のビットは書き込み許可を決定する。
また 3 番目のビットは、通常のファイルの場合は実行許可を表し、
ディレクトリの場合は検索許可を表す。

.\"O Linux uses the fsuid instead of the effective user ID in permission checks.
.\"O Ordinarily the fsuid will equal the effective user ID, but the fsuid can be
.\"O changed by the system call
.\"O .BR setfsuid (2).
Linux は、許可のチェックにおいて、実効ユーザ ID ではなく fsuid を使う。
通常は fsuid は実効ユーザ ID と等しいが、fsuid はシステムコール
.BR setfsuid (2)
で変更することができる。

.\"O (Here "fsuid" stands for something like "file system user ID".
.\"O The concept was required for the implementation of a user space
.\"O NFS server at a time when processes could send a signal to a process
.\"O with the same effective user ID.
.\"O It is obsolete now.
.\"O Nobody should use
.\"O .BR setfsuid (2).)
(ここで "fsuid" は "file system user ID" を表している。
この概念は「プロセスが同じ実効ユーザ ID を持つプロセスに
同時にシグナルを送ることができる」というユーザ空間 NFS サーバを
実装する際に必要であった。
これは今では廃れてしまった。
.BR setfsuid (2)
を使うべきではない。

.\"O Similarly, Linux uses the fsgid ("file system group ID")
.\"O instead of the effective group ID.
.\"O See
.\"O .BR setfsgid (2).
同様に、Linux では実効グループ ID の代わりに
fsgid ("ファイルシステム・グループID") を使う。
.BR setfsgid (2)
を参照すること。
.\" FIXME say something about file system mounted read-only ?
.\"O .SS "Bypassing permission checks: superuser and capabilities"
.SS "許可の確認をスキップする: スーパーユーザとケーパビリティ"
.\"O On a traditional UNIX system, the superuser
.\"O .RI ( root ,
.\"O user ID 0) is all-powerful, and bypasses all permissions restrictions
.\"O when accessing files.
伝統的な UNIX システムでは、スーパーユーザ
.RI ( root ,
ユーザ ID 0) は非常に強力であり、ファイルアクセス時の
許可による制限を全てスキップする。
.\" (but for exec at least one x bit must be set) -- AEB
.\" but there is variation across systems on this point: for
.\" example, HP-UX and Tru64 are as described by AEB.  However,
.\" on some implementations (e.g., Solaris, FreeBSD),
.\" access(X_OK) by superuser will report success, regardless
.\" of the file's execute permission bits. -- MTK (Oct 05)

.\"O On Linux, superuser privileges are divided into capabilities (see
.\"O .BR capabilities (7)).
.\"O Two capabilities are relevant for file permissions checks:
.\"O \fBCAP_DAC_OVERRIDE\fP and \fBCAP_DAC_READ_SEARCH\fP.
.\"O (A process has these capabilities if its fsuid is 0.)
Linux では、スーパーユーザ権限が複数のケーパビリティに分割されている
.RB ( capabilities (7)
参照)。ファイルの許可の確認には、
.B CAP_DAC_OVERRIDE
と
.B CAP_DAC_READ_SEARCH
の 2つのケーパビリティが関係する
(プロセスの fsuid が 0 の場合、そのプロセスはこれらのケーパビリティを持つ)。

.\"O The \fBCAP_DAC_OVERRIDE\fP capability overrides all permission checking,
.\"O but only grants execute permission when at least one
.\"O of the file's three execute permission bits is set.
.B CAP_DAC_OVERRIDE
ケーパビリティは全ての許可チェックを上書きする。
実際には、対象となるファイルの 3 つの実行許可ビットのうちの
少なくとも 1 つが設定されていれば、実行を許可するだけである。

.\"O The \fBCAP_DAC_READ_SEARCH\fP capability grants read and search permission
.\"O on directories, and read permission on ordinary files.
.B CAP_DAC_READ_SEARCH
ケーパビリティは、ディレクトリに対して読み込みと検索を許可し、
通常のファイルに対して読み込みを許可する。
.\" FIXME say something about immutable files
.\" FIXME say something about ACLs
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR readlink (2),
.BR capabilities (7),
.BR credentials (7),
.BR symlink (7)
