'\" t
.\" Don't change the first line, it tells man that we need tbl.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and copyright (c) 1999 Matthew Wilcox.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\"
.\" 2002-10-30, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added description of SO_ACCEPTCONN
.\" 2004-05-20, aeb, added SO_RCVTIMEO/SO_SNDTIMEO text.
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"	A few small grammar fixes
.\" FIXME
.\" The following are not yet documented:
.\"	SO_PEERNAME
.\"	SO_TIMESTAMPNS
.\"	SO_MARK
.\"	SO_TIMESTAMPING
.\"	SO_PROTOCOL (2.6.32)
.\"	SO_DOMAIN (2.6.32)
.\"	SO_RXQ_OVFL (2.6.33)
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2003-01-20, Akihiro Motoki <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-02-23, Akihiro MOTOKI
.\" Updated 2005-10-05, Akihiro MOTOKI
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\" Updated 2005-12-26, Akihiro MOTOKI, Catch up to LDP man-pages 2.18
.\" Updated 2006-04-15, Akihiro MOTOKI, Catch up to LDP man-pages 2.29
.\" Updated 2007-01-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.43
.\"
.\"WORD         protocol family         プロトコルファミリー
.\"WORD         socket type             ソケットタイプ
.\"WORD         file descriptor         ファイルディスクリプタ
.\"WORD         anonymous socket        名前無しソケット
.\"WORD         asynchronous            非同期 (的)
.\"WORD         credential              信任状
.\"WORD         capability              権限
.\"WORD         ancillary data          補助データ
.\"
.TH SOCKET 7 2008-12-03 Linux "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O socket \- Linux socket interface
socket \- Linux のソケットインターフェース
.\"O .SH SYNOPSIS
.SH 書式
.B #include <sys/socket.h>
.sp
.IB sockfd " = socket(int " socket_family ", int " socket_type ", int " protocol );
.\"O .SH DESCRIPTION
.SH 説明
.\"O This manual page describes the Linux networking socket layer user
.\"O interface.
.\"O The BSD compatible sockets
.\"O are the uniform interface
.\"O between the user process and the network protocol stacks in the kernel.
.\"O The protocol modules are grouped into
.\"O .I protocol families
.\"O like
.\"O .BR AF_INET ", " AF_IPX ", " AF_PACKET
.\"O and
.\"O .I socket types
.\"O like
.\"O .B SOCK_STREAM
.\"O or
.\"O .BR SOCK_DGRAM .
.\"O See
.\"O .BR socket (2)
.\"O for more information on families and types.
このマニュアルページは Linux ネットワークのソケット層に対する
ユーザインターフェースを記述するものである。
BSD 互換ソケットは、ユーザプロセスとカーネル内部の
ネットワークプロトコルスタック群との間に、
統一的なインターフェースを提供するものである。
プロトコルモジュールは
.I "プロトコルファミリー (protocol familiy)"
(例：
.BR AF_INET ", " AF_IPX ", " AF_PACKET )
と
.I "ソケットタイプ (socket types)"
(例：
.BR SOCK_STREAM ", " SOCK_DGRAM )
に分類できる。
これらに関するより詳しい情報は
.BR socket (2)
を参照のこと。
.\"O .SS Socket Layer Functions
.SS ソケット層の関数群
.\"O These functions are used by the user process to send or receive packets
.\"O and to do other socket operations.
.\"O For more information see their respective manual pages.
これらの関数はユーザプロセスがパケットを送受信したり、その他のソケット操作を
行ったりするために用いられる。詳細はそれぞれのマニュアルページを
見てほしい。

.\"O .BR socket (2)
.\"O creates a socket,
.\"O .BR connect (2)
.\"O connects a socket to a remote socket address,
.\"O the
.\"O .BR bind (2)
.\"O function binds a socket to a local socket address,
.\"O .BR listen (2)
.\"O tells the socket that new connections shall be accepted, and
.\"O .BR accept (2)
.\"O is used to get a new socket with a new incoming connection.
.\"O .BR socketpair (2)
.\"O returns two connected anonymous sockets (only implemented for a few
.\"O local families like
.\"O .BR AF_UNIX )
.BR socket (2)
はソケットを生成する。
.BR connect (2)
はソケットをリモートのソケットアドレスに接続する。
.BR bind (2)
はソケットをローカルのソケットアドレスにバインドする。
.BR listen (2)
はソケットに新しい接続が来たら受信するように伝え、
.BR accept (2)
は外部からやってきた接続に対して新しいソケットを得るために用いられる。
.BR socketpair (2)
は互いに接続された二つの名前無しソケット (anonymous socket) を返す
.RB ( AF_UNIX
のような、いくつかのローカルなファミリーでしか実装されていない)。
.PP
.\"O .BR send (2),
.\"O .BR sendto (2),
.\"O and
.\"O .BR sendmsg (2)
.\"O send data over a socket, and
.\"O .BR recv (2),
.\"O .BR recvfrom (2),
.\"O .BR recvmsg (2)
.\"O receive data from a socket.
.\"O .BR poll (2)
.\"O and
.\"O .BR select (2)
.\"O wait for arriving data or a readiness to send data.
.\"O In addition, the standard I/O operations like
.\"O .BR write (2),
.\"O .BR writev (2),
.\"O .BR sendfile (2),
.\"O .BR read (2),
.\"O and
.\"O .BR readv (2)
.\"O can be used to read and write data.
.BR send (2),
.BR sendto (2),
.BR sendmsg (2)
はソケットを通してデータを送信し、
.BR recv (2)
.BR recvfrom (2),
.BR recvmsg (2)
はソケットからデータを受信する。
.BR poll (2)
と
.BR select (2)
はデータの到着を待ったり、データ送信の準備ができるまで待ったりする。
さらに、
.BR write (2),
.BR writev (2),
.BR sendfile (2),
.BR read (2),
.BR readv (2)
のような標準的な I/O 操作もデータの読み書きに用いることができる。
.PP
.\"O .BR getsockname (2)
.\"O returns the local socket address and
.\"O .BR getpeername (2)
.\"O returns the remote socket address.
.\"O .BR getsockopt (2)
.\"O and
.\"O .BR setsockopt (2)
.\"O are used to set or get socket layer or protocol options.
.\"O .BR ioctl (2)
.\"O can be used to set or read some other options.
.BR getsockbyname (2)
はローカルのソケットアドレスを返し、
.BR getpeername (2)
はリモートのソケットアドレスを返す。
.BR getsockopt (2)
と
.BR setsockopt (2)
はソケット層のオプションやプロトコルオプションの取得・設定に用いられる。
他のいくつかのオプションの取得・設定には
.BR ioctl (2)
を使うことができる。
.PP
.\"O .BR close (2)
.\"O is used to close a socket.
.\"O .BR shutdown (2)
.\"O closes parts of a full-duplex socket connection.
.BR close (2)
はソケットをクローズする。
.BR shutdown (2)
は全二重なソケット接続を部分的にクローズする。
.PP
.\"O Seeking, or calling
.\"O .BR pread (2)
.\"O or
.\"O .BR pwrite (2)
.\"O with a nonzero position is not supported on sockets.
シーク動作や、 0 以外の位置に対する
.BR pread (2)
や
.BR pwrite (2)
はソケットではサポートされていない。
.PP
.\"O It is possible to do nonblocking I/O on sockets by setting the
.\"O .B O_NONBLOCK
.\"O flag on a socket file descriptor using
.\"O .BR fcntl (2).
.\"O Then all operations that would block will (usually)
.\"O return with
.\"O .B EAGAIN
.\"O (operation should be retried later);
非ブロッキングな I/O をソケットで行うことは可能で、
.BR fcntl (2)
を使ってソケットのファイルディスクリプタに
.B O_NONBLOCK
フラグをセットすれば良い。
こうするとブロックされる操作は、 (通常)
.B EAGAIN
エラーで戻ることになる
(後で処理が再試行されることが期待されている)。
.\"O .BR connect (2)
.\"O will return
.\"O .B EINPROGRESS
.\"O error.
.BR connect (2)
では
.B EINPROGRESS
エラーが返される。
.\"O The user can then wait for various events via
.\"O .BR poll (2)
.\"O or
.\"O .BR select (2).
この場合、ユーザはさまざまなイベントを
.BR poll (2)
や
.BR select (2)
を使って待つことができる。
.TS
tab(:) allbox;
c s s
l l l.
.\"O I/O events
I/O イベント
.\"O Event:Poll flag:Occurrence
イベント:poll フラグ:内容
.\"O Read:POLLIN:T{
.\"O New data arrived.
.\"O T}
Read:POLLIN:T{
新しいデータが到着した。
T}
.\"O Read:POLLIN:T{
.\"O A connection setup has been completed
.\"O (for connection-oriented sockets)
.\"O T}
Read:POLLIN:T{
(接続志向のソケットで)
接続の設定が終了した。
T}
.\"O Read:POLLHUP:T{
.\"O A disconnection request has been initiated by the other end.
.\"O T}
Read:POLLHUP:T{
接続先で切断要求が生成された。
T}
.\"O Read:POLLHUP:T{
.\"O A connection is broken (only for connection-oriented protocols).
.\"O When the socket is written
.\"O .B SIGPIPE
.\"O is also sent.
.\"O T}
Read:POLLHUP:T{
接続が壊れた (接続志向のプロトコルのみ)。
この場合、ソケットに書き込みが行われると
.B SIGPIPE
も送信される。
T}
.\"O Write:POLLOUT:T{
.\"O Socket has enough send buffer space for writing new data.
.\"O T}
Write:POLLOUT:T{
ソケットには新しいデータを書き込むのに
充分なバッファ領域がある。
T}
.\"O Read/Write:T{
.\"O POLLIN|
.\"O .br
.\"O POLLOUT
.\"O T}:T{
.\"O An outgoing
.\"O .BR connect (2)
.\"O finished.
.\"O T}
Read/Write:T{
POLLIN|
.br
POLLOUT
T}:T{
外部向けの
.BR connect (2)
が終了した。
T}
.\"O Read/Write:POLLERR:An asynchronous error occurred.
Read/Write:POLLERR:T{
非同期的 (asynchronous) なエラーが起こった。
T}
.\"O Read/Write:POLLHUP:The other end has shut down one direction.
Read/Write:POLLHUP:接続先が片方向を切断した。
.\"O Exception:POLLPRI:T{
.\"O Urgent data arrived.
.\"O .B SIGURG
.\"O is sent then.
.\"O T}
Exception:POLLPRI:T{
緊急データ (urgent data) が到着した。
この場合は
.B SIGURG
が送信される。
T}
.\" FIXME . The following is not true currently:
.\" It is no I/O event when the connection
.\" is broken from the local end using
.\" .BR shutdown (2)
.\" or
.\" .BR close (2).
.TE

.PP
.\"O An alternative to
.\"O .BR poll (2)
.\"O and
.\"O .BR select (2)
.\"O is to let the kernel inform the application about events
.\"O via a
.\"O .B SIGIO
.\"O signal.
.\"O For that the
.\"O .B O_ASYNC
.\"O flag must be set on a socket file descriptor via
.\"O .BR fcntl (2)
.\"O and a valid signal handler for
.\"O .B SIGIO
.\"O must be installed via
.\"O .BR sigaction (2).
.\"O See the
.\"O .I Signals
.\"O discussion below.
.BR poll (2)
や
.BR select (2)
を使う代わりに、カーネルからアプリケーションに
イベントを通知させるのに
.B SIGIO
シグナルを使う方法もある。
この方法を使うには、
.BR fcntl (2)
を用いてソケットのファイルディスクリプタに
.B O_ASYNC
フラグをセットし、
.B SIGIO
に対する有効なシグナルハンドラを
.BR sigaction (2)
によって設定しておく必要がある。
後述の
.I シグナル
に関する議論も参考にすること。
.\"O .SS Socket Options
.SS ソケットオプション
.\"O These socket options can be set by using
.\"O .BR setsockopt (2)
.\"O and read with
.\"O .BR getsockopt (2)
.\"O with the socket level set to
.\"O .B SOL_SOCKET
.\"O for all sockets:
これらのソケットオプションは、
.BR setsockopt (2)
を用いれば設定でき、
.BR getsockopt (2)
を用いれば取得できる。
但し、どのソケットの場合も
ソケットレベルには
.B SOL_SOCKET
を指定すること。
.\"O .\" SO_ACCEPTCONN is in POSIX.1-2001, and its origin is explained in
.\"O .\" W R Stevens, UNPv1
.\" SO_ACCEPTCONN は POSIX.1-2001 で定義されており、元は
.\" W R Stevens の UNPv1 に書かれていた。
.TP
.B SO_ACCEPTCONN
.\"O Returns a value indicating whether or not this socket has been marked
.\"O to accept connections with
.\"O .BR listen (2).
.\"O The value 0 indicates that this is not a listening socket,
.\"O the value 1 indicates that this is a listening socket.
.\"O Can only be read
.\"O with
.\"O .BR getsockopt (2).
このソケットが
.BR listen (2)
によって接続待ち受け状態に設定されているかどうかを示す値を返す。
値 0 は listen 状態のソケットでないことを、
値 1 は listen 状態のソケットであることを示す。
.BR getsockopt (2)
からのみ読み出し可能である。
.TP
.B SO_BINDTODEVICE
.\"O Bind this socket to a particular device like \(lqeth0\(rq,
.\"O as specified in the passed interface name.
.\"O If the
.\"O name is an empty string or the option length is zero, the socket device
.\"O binding is removed.
.\"O The passed option is a variable-length null-terminated
.\"O interface name string with the maximum size of
.\"O .BR IFNAMSIZ .
このソケットを、引き数で渡したインターフェース名で指定される
(\(lqeth0\(rq のような) 特定のデバイスにバインドする。
名前が空文字列だったり、オプションの長さ (optlen) が 0 の場合には、
ソケットのバインドが削除される。渡すオプションは、インターフェース名が
入ったヌル文字で終端された可変長の文字列である。
文字列の最大のサイズは
.B IFNAMSIX
である。
.\"O If a socket is bound to an interface,
.\"O only packets received from that particular interface are processed by the
.\"O socket.
.\"O Note that this only works for some socket types, particularly
.\"O .B AF_INET
.\"O sockets.
.\"O It is not supported for packet sockets (use normal
.\"O .BR bind (8)
.\"O there).
ソケットがインターフェースにバインドされると、
その特定のインターフェースから受信されたパケットだけを処理する。
このオプションはいくつかのソケットタイプ、特に
.B AF_INET
に対してのみ動作する点に注意すること。
パケットソケットではサポートされていない (通常の
.BR bind (8)
を使うこと)。
.TP
.B SO_BROADCAST
.\"O Set or get the broadcast flag.
.\"O When enabled, datagram sockets
.\"O receive packets sent to a broadcast address and they are allowed to send
.\"O packets to a broadcast address.
.\"O This option has no effect on stream-oriented sockets.
ブロードキャストフラグを設定・取得する。有効になっていると、
データグラムソケットはブロードキャストアドレスに送られたパケットを受信したり、
ブロードキャストアドレスにパケットを送信したりできるようになる。
ストリーム指向のソケットには何の効果もない。
.TP
.B SO_BSDCOMPAT
.\"O Enable BSD bug-to-bug compatibility.
.\"O This is used by the UDP protocol module in Linux 2.0 and 2.2.
.\"O If enabled ICMP errors received for a UDP socket will not be passed
.\"O to the user program.
.\"O In later kernel versions, support for this option has been phased out:
.\"O Linux 2.4 silently ignores it, and Linux 2.6 generates a kernel warning
.\"O (printk()) if a program uses this option.
.\"O Linux 2.0 also enabled BSD bug-to-bug compatibility
.\"O options (random header changing, skipping of the broadcast flag) for raw
.\"O sockets with this option, but that was removed in Linux 2.2.
BSD のバグに対して互換性を取るための機能を有効にする。
この機能は Linux 2.0 と 2.2 の UDP プロトコルモジュールで使用されている。
有効になっていると、 UDP ソケットで受信された ICMP エラーは
ユーザプログラムに渡されない。
これ以降のバージョンのカーネルでは、このオプションのサポートは
段階的に廃止されてきた。
Linux 2.4 ではこのオプションは黙って無視され、
Linux 2.6 ではプログラムがこのオプションを使用すると (printk() を使って)
カーネルの警告メッセージが出力される。
Linux 2.0 では、このオプションを指定すると、
raw ソケットにおいても BSD のバグ (ランダムヘッダ変更、
ブロードキャストフラグのスキップ)
に対する互換機能が有効になっていた。
しかし、こちらは Linux 2.2 で削除された。
.TP
.B SO_DEBUG
.\"O Enable socket debugging.
.\"O Only allowed for processes with the
.\"O .B CAP_NET_ADMIN
.\"O capability or an effective user ID of 0.
ソケットのデバッグ機能を有効にする。
.B CAP_NET_ADMIN
権限を持つプロセスか、実効ユーザ ID が 0 のプロセスでしか
利用できない。
.TP
.B SO_ERROR
.\"O Get and clear the pending socket error.
.\"O Only valid as a
.\"O .BR getsockopt (2).
.\"O Expects an integer.
保留になっていたソケットエラーを取得してクリアする。
.BR getsockopt (2)
でのみ用いることができる。
整数値をとる。
.TP
.B SO_DONTROUTE
.\"O Don't send via a gateway, only send to directly connected hosts.
.\"O The same effect can be achieved by setting the
.\"O .B MSG_DONTROUTE
.\"O flag on a socket
.\"O .BR send (2)
.\"O operation.
.\"O Expects an integer boolean flag.
ゲートウェイを経由せず、直接接続されているホストに送信する。
.BR send (2)
操作で
.B MSG_DONTROUTE
フラグをセットした場合も同じ効果が得られる。
ブール整数のフラグを取る。
.TP
.B SO_KEEPALIVE
.\"O Enable sending of keep-alive messages on connection-oriented sockets.
.\"O Expects an integer boolean flag.
接続志向のソケットに対する keep-alive メッセージの送信を有効にする。
ブール値の整数フラグをとる。
.TP
.B SO_LINGER
.\"O Sets or gets the
.\"O .B SO_LINGER
.\"O option.
.\"O The argument is a
.\"O .I linger
.\"O structure.
.B SO_LINGER
オプションを取得・設定する。引き数には
.I linger
構造体を取る。
.sp
.in +4n
.nf
struct linger {
    int l_onoff;    /* linger active */
    int l_linger;   /* how many seconds to linger for */
};
.fi
.in
.IP
.\"O When enabled, a
.\"O .BR close (2)
.\"O or
.\"O .BR shutdown (2)
.\"O will not return until all queued messages for the socket have been
.\"O successfully sent or the linger timeout has been reached.
.\"O Otherwise,
.\"O the call returns immediately and the closing is done in the background.
.\"O When the socket is closed as part of
.\"O .BR exit (2),
.\"O it always lingers in the background.
有効になっていると、
.BR close (2)
や
.BR shutdown (2)
は、そのソケットにキューイングされたメッセージがすべて送信完了するか、
linger (居残り) タイムアウトになるまで返らない。無効になっていると、
これらのコールはただちに戻り、クローズ動作はバックグラウンドで行われる。
ソケットのクローズを
.BR exit (2)
の一部として行った場合には、残っているソケットの
クローズ動作は必ずバックグラウンドに送られる。
.TP
.B SO_OOBINLINE
.\"O If this option is enabled,
.\"O out-of-band data is directly placed into the receive data stream.
.\"O Otherwise out-of-band data is only passed when the
.\"O .B MSG_OOB
.\"O flag is set during receiving.
このオプションを有効にすると、帯域外データ (out-of-band data) は
受信データストリーム中に置かれる。有効にしなければ、
帯域外データは受信時に
.B MSG_OOB
フラグがセットされている場合に限って渡される。
.\"O .\" don't document it because it can do too much harm.
.\"O .\".B SO_NO_CHECK
.\" あまりに危険なことができるので、このオプションについては記載しないこと。
.\".B SO_NO_CHECK
.TP
.B SO_PASSCRED
.\"O Enable or disable the receiving of the
.\"O .B SCM_CREDENTIALS
.\"O control message.
.\"O For more information see
.\"O .BR unix (7).
.B SCM_CREDENTIALS
制御メッセージの受信を有効/無効にする。詳細は
.BR unix (7)
を参照のこと。
.\" FIXME Document SO_PASSSEC, added in 2.6.18; there is some info
.\" in the 2.6.18 ChangeLog
.TP
.B SO_PEERCRED
.\"O Return the credentials of the foreign process connected to this socket.
.\"O This is only possible for connected
.\"O .B AF_UNIX
.\"O stream sockets and
.\"O .B AF_UNIX
.\"O stream and datagram socket pairs created using
.\"O .BR socketpair (2);
.\"O see
.\"O .BR unix (7).
このソケットに接続してきた外部プロセスの信任状 (credential) を返す。
このソケットオプションが利用できるのは、
接続された
.B AF_UNIX
ストリームソケット間、および
.BR socketpair (2)
を使って作成された
.B AF_UNIX
のストリームソケットとデータグラムソケットのペアだけである。
.BR unix (7)
を参照のこと。
.\"O The returned credentials are those that were in effect at the time
.\"O of the call to
.\"O .BR connect (2)
.\"O or
.\"O .BR socketpair (2).
.\"O Argument is a
.\"O .I ucred
.\"O structure.
.\"O Only valid as a
.\"O .BR getsockopt (2).
.BR connect (2)
や
.BR socketpair (2)
が呼ばれた時に有効であった信任状が返される。
引き数は
.I ucred
構造体である。
.BR getsockopt (2)
でのみ用いることができる。
.TP
.B SO_PRIORITY
.\"O Set the protocol-defined priority for all packets to be sent on
.\"O this socket.
.\"O Linux uses this value to order the networking queues:
.\"O packets with a higher priority may be processed first depending
.\"O on the selected device queueing discipline.
.\"O For
.\"O .BR ip (7),
.\"O this also sets the IP type-of-service (TOS) field for outgoing packets.
.\"O Setting a priority outside the range 0 to 6 requires the
.\"O .B CAP_NET_ADMIN
.\"O capability.
プロトコルで定義された優先度を、このソケットから
送信される全てのパケットにセットする。 Linux はネットワークキュー内部の
整列にこの値を用いる。高い優先度を持っているパケットは先に処理される。
ただしそのデバイスのキュー処理のやり方に依存する。
.BR ip (7)
では、外向けパケットの IP type-of-service (TOS) フィールドにもこの値が設定される。
0 から 6 以外の優先度をセットするには
.B CAP_NET_ADMIN
ケーパビリティが必要である。
.TP
.B SO_RCVBUF
.\"O Sets or gets the maximum socket receive buffer in bytes.
.\"O The kernel doubles this value (to allow space for bookkeeping overhead)
.\"O when it is set using
.\"O .\" Most (all?) other implementations do not do this -- MTK, Dec 05
.\"O .BR setsockopt (2),
.\"O and this doubled value is returned by
.\"O .BR getsockopt (2).
.\"O The default value is set by the
.\"O .I /proc/sys/net/core/rmem_default
.\"O file, and the maximum allowed value is set by the
.\"O .I /proc/sys/net/core/rmem_max
.\"O file.
.\"O The minimum (doubled) value for this option is 256.
ソケットの受信バッファの最大サイズを設定・取得する (バイト単位)。
.BR setsockopt (2)
を使って値が設定されたときに (管理オーバヘッド用の領域を確保するために)
カーネルはこの値を 2倍し、
.\" 他のほとんどの (全ての?) 実装ではこんなことは行っていない -- MTK, Dec 05
.BR getsockopt (2)
はこの 2倍された値を返す。
デフォルトの値は
.I /proc/sys/net/core/rmem_default
ファイルで設定され、許容される最大の値は
.I /proc/sys/net/core/rmem_max
ファイルで設定される。
このオプションの最小値は (2倍した値で) 256 である。
.TP
.\"O .BR SO_RCVBUFFORCE " (since Linux 2.6.14)"
.BR SO_RCVBUFFORCE " (Linux 2.6.14 以降)"
.\"O Using this socket option, a privileged
.\"O .RB ( CAP_NET_ADMIN )
.\"O process can perform the same task as
.\"O .BR SO_RCVBUF ,
.\"O but the
.\"O .I rmem_max
.\"O limit can be overridden.
このソケットオプションを使うと、特権プロセス
.RB ( CAP_NET_ADMIN
を持つプロセス) は
.B SO_RCVBUF
と同じことを実行できる。
ただし、上限
.I rmem_max
を上書きすることができる。
.TP
.\"O .BR SO_RCVLOWAT " and " SO_SNDLOWAT
.BR SO_RCVLOWAT " と " SO_SNDLOWAT
.\"O Specify the minimum number of bytes in the buffer until the socket layer
.\"O will pass the data to the protocol
.\"O .RB ( SO_SNDLOWAT )
.\"O or the user on receiving
.\"O .RB ( SO_RCVLOWAT ).
.\"O These two values are initialized to 1.
.\"O .B SO_SNDLOWAT
.\"O is not changeable on Linux
.\"O .RB ( setsockopt (2)
.\"O fails with the error
.\"O .BR ENOPROTOOPT ).
.\"O .B SO_RCVLOWAT
.\"O is changeable
.\"O only since Linux 2.4.
バッファ中に溜めることのできるデータの最小値を指定する。
このサイズを越えると、ソケット層はそのデータをプロトコルに渡し
.RB ( SO_SNDLOWAT )、
受信時にはユーザに渡す
.RB ( SO_RCVLOWAT )。
これら二つの値は 1 に初期化される。
.B SO_SNDLOWAT
は Linux では変更できない
.RB ( setsockopt (2)
は
.B ENOPROTOOPT
エラーで失敗する)。
.B SO_RCVLOWAT
は Linux 2.4 以降でのみ変更可能である。
.\"O The
.\"O .BR select (2)
.\"O and
.\"O .BR poll (2)
.\"O system calls currently do not respect the
.\"O .B SO_RCVLOWAT
.\"O setting on Linux,
.\"O and mark a socket readable when even a single byte of data is available.
.\"O A subsequent read from the socket will block until
.\"O .B SO_RCVLOWAT
.\"O bytes are available.
.\"O .\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2
.\"O .\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05
現状、Linux ではシステムコール
.BR select (2)
と
.BR poll (2)
は
.B SO_RCVLOWAT
の設定を考慮に入れずに動作し、
データが1バイト利用可能になっただけでも、
ソケットは読み出し可能とのマークをつける。
一方、それに続けて行うソケットからの read は
.B SO_RCVLOWAT
バイトのデータが利用可能になるまで停止してしまう。
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2
.\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05
.TP
.\"O .BR SO_RCVTIMEO " and " SO_SNDTIMEO
.BR SO_RCVTIMEO " と " SO_SNDTIMEO
.\"O .\" Not implemented in 2.0.
.\"O .\" Implemented in 2.1.11 for getsockopt: always return a zero struct.
.\"O .\" Implemented in 2.3.41 for setsockopt, and actually used.
.\" 2.0 では実装されていない。
.\" getsockopt については 2.1.11 で実装された。常に 0 の構造体を返す。
.\" setsockopt については 2.3.41 で実装され、実際に使われている。
.\"O Specify the receiving or sending timeouts until reporting an error.
.\"O The argument is a
.\"O .IR "struct timeval" .
.\"O If an input or output function blocks for this period of time, and
.\"O data has been sent or received, the return value of that function
.\"O will be the amount of data transferred; if no data has been transferred
.\"O and the timeout has been reached then \-1 is returned with
.\"O .I errno
.\"O set to
.\"O .B EAGAIN
.\"O or
.\"O .B EWOULDBLOCK
.\"O .\" in fact to EAGAIN
.\"O just as if the socket was specified to be nonblocking.
.\"O If the timeout is set to zero (the default)
.\"O then the operation will never timeout.
送信・受信のタイムアウトを指定する。これを越えるとエラーを報告する。
引き数は
.I "struct timeval"
である。
入出力関数がタイムアウト時間の間ブロックされ、かつデータの送信または
受信が行われていた場合は、転送されたデータ量が関数の返り値となる。
何もデータが転送されずにタイムアウトに達した場合は、
\-1 を返し、
.I errno
に
.B EAGAIN
か
.B EWOULDBLOCK
を設定され、
.\" 実際には EAGAIN が設定される
あたかもソケットに非ブロッキングが指定されたように見える。
タイムアウト値に (デフォルト値である) 0 に設定すると、
操作は決してタイムアウトしなくなる。
.\"O Timeouts only have effect for system calls that perform socket I/O (e.g.,
.\"O .BR read (2),
.\"O .BR recvmsg (2),
.\"O .BR send (2),
.\"O .BR sendmsg (2));
.\"O timeouts have no effect for
.\"O .BR select (2),
.\"O .BR poll (2),
.\"O .BR epoll_wait (2),
.\"O etc.
タイムアウトが影響を及ぼすのは、
ソケット I/O を実行するシステムコールだけ
(例えば
.BR read (2),
.BR recvmsg (2),
.BR send (2),
.BR sendmsg (2))
である。
.BR select (2),
.BR poll (2),
.BR epoll_wait (2)
などにはタイムアウトは影響を及ぼさない。
.TP
.B SO_REUSEADDR
.\"O Indicates that the rules used in validating addresses supplied in a
.\"O .BR bind (2)
.\"O call should allow reuse of local addresses.
.\"O For
.\"O .B AF_INET
.\"O sockets this
.\"O means that a socket may bind, except when there
.\"O is an active listening socket bound to the address.
.\"O When the listening socket is bound to
.\"O .B INADDR_ANY
.\"O with a specific port then it is not possible
.\"O to bind to this port for any local address.
.\"O Argument is an integer boolean flag.
.BR bind (2)
コールに与えられたアドレスが正しいかを判断するルールで、
ローカルアドレスの再利用を可能にする。
つまり
.B AF_INET
ソケットなら、そのアドレスにバインドされたアクティブな listen
状態のソケットが存在しない限り、バインドが行える。
listen 状態のソケットがアドレス
.B INADDR_ANY
で特定のポートにバインドされている場合には、
このポートに対しては、どんなローカルアドレスでもバインドできない。
引き数はブール整数のフラグである。
.TP
.B SO_SNDBUF
.\"O Sets or gets the maximum socket send buffer in bytes.
.\"O The kernel doubles this value (to allow space for bookkeeping overhead)
.\"O when it is set using
.\"O .\" Most (all?) other implementations do not do this -- MTK, Dec 05
.\"O .BR setsockopt (2),
.\"O and this doubled value is returned by
.\"O .BR getsockopt (2).
.\"O The default value is set by the
.\"O .I /proc/sys/net/core/wmem_default
.\"O file and the maximum allowed value is set by the
.\"O .I /proc/sys/net/core/wmem_max
.\"O file.
.\"O The minimum (doubled) value for this option is 2048.
ソケットの送信バッファの最大サイズを設定・取得する (バイト単位)。
.BR setsockopt (2)
を使って値が設定されたときに (管理オーバヘッド用の領域を確保するために)
カーネルはこの値を 2倍し、
.\" 他のほとんどの (全ての?) 実装ではこんなことは行っていない -- MTK, Dec 05
.BR getsockopt (2)
はこの 2倍された値を返す。
デフォルトの値は
.I /proc/sys/net/core/wmem_default
ファイルで設定され、許容される最大の値は
.I /proc/sys/net/core/wmem_max
ファイルで設定される。
このオプションの最小値は (2倍した値で) 2048 である。
.TP
.\"O .BR SO_SNDBUFFORCE " (since Linux 2.6.14)"
.BR SO_SNDBUFFORCE " (Linux 2.6.14 以降)"
.\"O Using this socket option, a privileged
.\"O .RB ( CAP_NET_ADMIN )
.\"O process can perform the same task as
.\"O .BR SO_SNDBUF ,
.\"O but the
.\"O .I wmem_max
.\"O limit can be overridden.
このソケットオプションを使うと、特権プロセス
.RB ( CAP_NET_ADMIN
を持つプロセス) は
.B SO_SNDBUF
と同じことを実行できる。
ただし、上限
.I wmem_max
を上書きすることができる。
.TP
.B SO_TIMESTAMP
.\"O Enable or disable the receiving of the
.\"O .B SO_TIMESTAMP
.\"O control message.
.\"O The timestamp control message is sent with level
.\"O .B SOL_SOCKET
.\"O and the
.\"O .I cmsg_data
.\"O field is a
.\"O .I "struct timeval"
.\"O indicating the
.\"O reception time of the last packet passed to the user in this call.
.\"O See
.\"O .BR cmsg (3)
.\"O for details on control messages.
.B SO_TIMESTAMP
制御メッセージの受信を有効/無効にする。
タイムスタンプ制御メッセージはレベル
.B SOL_SOCKET
で送信され、
.I cmsg_data
フィールドはこのシステムコールでユーザに渡した
最後のパケットの受信時刻を示す
.I "struct timeval"
である。
制御メッセージの詳細については
.BR cmsg (3)
を参照。
.TP
.B SO_TYPE
.\"O Gets the socket type as an integer (like
.\"O .BR SOCK_STREAM ).
.\"O Can only be read
.\"O with
.\"O .BR getsockopt (2).
ソケットのタイプを整数で取得する (例:
.BR SOCK_STREAM )。
.BR getsockopt (2)
からのみ読み出し可能である。
.\"O .SS Signals
.SS シグナル
.\"O When writing onto a connection-oriented socket that has been shut down
.\"O (by the local or the remote end)
.\"O .B SIGPIPE
.\"O is sent to the writing process and
.\"O .B EPIPE
.\"O is returned.
.\"O The signal is not sent when the write call
.\"O specified the
.\"O .B MSG_NOSIGNAL
.\"O flag.
(ローカルもしくはリモート側で) 切断された
接続指向 (connection-oriented) のソケットに対して
書き込みを行うと、その書き込みを行ったプロセスに
.B SIGPIPE
が送られ、
.B EPIPE
が返される。 write 呼び出しに
.B MSG_NOSIGNAL
フラグを指定していた場合はシグナルは送られない。
.PP
.\"O When requested with the
.\"O .B FIOSETOWN
.\"O .BR fcntl (2)
.\"O or
.\"O .B SIOCSPGRP
.\"O .BR ioctl (2),
.\"O .B SIGIO
.\"O is sent when an I/O event occurs.
.\"O It is possible to use
.\"O .BR poll (2)
.\"O or
.\"O .BR select (2)
.\"O in the signal handler to find out which socket the event occurred on.
.B FIOSETOWN
.BR fcntl (2)
や
.B SIOCSPGRP
.BR ioctl (2)
をプロセスまたはプロセスグループに指定しておくと、
I/O イベントが起きたときに
.B SIGIO
が送られる。
.BR poll (2)
や
.BR select (2)
をシグナルハンドラ内で用いれば、どのソケットでイベントが起こったかを
知ることができる。
.\"O An alternative (in Linux 2.2) is to set a real-time signal using the
.\"O .B F_SETSIG
.\"O .BR fcntl (2);
.\"O the handler of the real time signal will be called with
.\"O the file descriptor in the
.\"O .I si_fd
.\"O field of its
.\"O .IR siginfo_t .
.\"O See
.\"O .BR fcntl (2)
.\"O for more information.
(Linux 2.2 における) 別の方法としては、
.B F_SETSIG
.BR fcntl (2)
を用いてリアルタイムシグナルを設定するやり方もある。
リアルタイムシグナルのハンドラは、
.I siginfo_t
の
.I si_fd
フィールドにファイルディスクリプタが入った状態で呼び出される。
詳細は
.BR fcntl (2)
を参照のこと。
.PP
.\"O Under some circumstances (e.g., multiple processes accessing a
.\"O single socket), the condition that caused the
.\"O .B SIGIO
.\"O may have already disappeared when the process reacts to the signal.
.\"O If this happens, the process should wait again because Linux
.\"O will resend the signal later.
状況によっては (例えば複数のプロセスが一つのソケットにアクセスしているなど)、
.B SIGIO
の原因となった状態は、プロセスがそのシグナルへの対応を行ったときには
消えてしまっているかもしれない。
この場合は、プロセスは再び待つようにすべきである。
Linux は同じシグナルを後で再送するからである。
.\" .SS Ancillary Messages
.\"O .SS /proc interfaces
.SS /proc インタフェース
.\"O The core socket networking parameters can be accessed
.\"O via files in the directory
.\"O .IR /proc/sys/net/core/ .
core のソケットのネットワーキングパラメータには、
.I /proc/sys/net/core/
ディレクトリ内のファイルを通してアクセスできる。
.TP
.I rmem_default
.\"O contains the default setting in bytes of the socket receive buffer.
ソケットの受信バッファサイズのデフォルト値 (バイト単位)。
.TP
.I rmem_max
.\"O contains the maximum socket receive buffer size in bytes which a user may
.\"O set by using the
.\"O .B SO_RCVBUF
.\"O socket option.
.B SO_RCVBUF
ソケットオプションを用いてユーザが設定できる
ソケットの受信バッファサイズの最大値 (バイト単位)。
.TP
.I wmem_default
.\"O contains the default setting in bytes of the socket send buffer.
ソケットの送信バッファサイズのデフォルト値 (バイト単位)。
.TP
.I wmem_max
.\"O contains the maximum socket send buffer size in bytes which a user may
.\"O set by using the
.\"O .B SO_SNDBUF
.\"O socket option.
.B SO_SNDBUF
ソケットオプションを用いてユーザが設定できる
ソケットの送信バッファサイズの最大値 (バイト単位)。
.TP
.\"O .IR message_cost " and " message_burst
.IR message_cost " と " message_burst
.\"O configure the token bucket filter used to load limit warning messages
.\"O caused by external network events.
トークン・バケット・フィルターを設定する。
これは外部のネットワークイベントによって引き起こされた
負荷限界の警告メッセージに用いられる。
.\"NAKANO "load limit" だと思うんだけど...
.TP
.I netdev_max_backlog
.\"O Maximum number of packets in the global input queue.
グローバルな入力キューにおける最大のパケット数。
.TP
.I optmem_max
.\"O Maximum length of ancillary data and user control data like the iovecs
.\"O per socket.
ソケットあたりの、補助データ (ancillary data) とユーザ制御データ
(iovecs のようなもの) との和の最大長。
.\" netdev_fastroute is not documented because it is experimental
.\"O .SS Ioctls
.SS ioctl
.\"O These operations can be accessed using
.\"O .BR ioctl (2):
以下に示す操作には
.BR ioctl (2)
を用いてアクセスできる。

.in +4n
.nf
.IB error " = ioctl(" ip_socket ", " ioctl_type ", " &value_result ");"
.fi
.in
.TP
.B SIOCGSTAMP
.\"O Return a
.\"O .I struct timeval
.\"O with the receive timestamp of the last packet passed to the user.
.\"O This is useful for accurate round trip time measurements.
.\"O See
.\"O .BR setitimer (2)
.\"O for a description of
.\"O .IR "struct timeval" .
最後にユーザに渡されたパケットの受信タイムスタンプを
.I struct timeval
に入れて返す。
これは round trip 時間を正確に測りたいときに便利である。
.I struct timeval
の説明は
.BR setitimer (2)
を見てほしい。
.\"
.\"O This ioctl should only be used if the socket option
.\"O .B SO_TIMESTAMP
.\"O is not set on the socket.
.\"O Otherwise, it returns the timestamp of the
.\"O last packet that was received while
.\"O .B SO_TIMESTAMP
.\"O was not set, or it fails if no such packet has been received,
.\"O (i.e.,
.\"O .BR ioctl (2)
.\"O returns \-1 with
.\"O .I errno
.\"O set to
.\"O .BR ENOENT ).
この ioctl は、ソケットオプション
.B SO_TIMESTAMP
がソケットにセットされていない場合にのみ使用すべきである。
さもなければ、この ioctl は
.B SO_TIMESTAMP
がセットされていなかった間に受信した最後のパケットの時刻を返すか、
そのようなパケットを受信していない場合には失敗する
(つまり、
.BR ioctl (2)
は \-1 を返し、
.I errno
に
.B ENOENT
をセットする)。
.TP
.B SIOCSPGRP
.\"O Set the process or process group to send
.\"O .B SIGIO
.\"O or
.\"O .B SIGURG
.\"O signals
.\"O to when an
.\"O asynchronous I/O operation has finished or urgent data is available.
.\"O The argument is a pointer to a
.\"O .IR pid_t .
.\"O If the argument is positive, send the signals to that process.
.\"O If the
.\"O argument is negative, send the signals to the process group with the ID
.\"O of the absolute value of the argument.
.\"O The process may only choose itself or its own process group to receive
.\"O signals unless it has the
.\"O .B CAP_KILL
.\"O capability or an effective UID of 0.
非同期 I/O 操作の終了時や緊急データの受信時に
.B SIGIO
や
.B SIGURG
シグナル群を送るプロセスやプロセスグループを設定する。
引き数は
.I pid_t
へのポインタである。
引き数が正だと、そのプロセスにシグナルが送られる。負だと、
引き数の絶対値を ID に持つプロセスグループにシグナルが送られる。
シグナル受信先には、自分自身のプロセス / 自分の所属するプロセスグループ
しか指定できない。但し、
.B CAP_KILL
ケーパビリティを持っている場合、及び実効ユーザ ID が 0 のプロセスの場合は
この限りではない。
.TP
.B FIOASYNC
.\"O Change the
.\"O .B O_ASYNC
.\"O flag to enable or disable asynchronous I/O mode of the socket.
.\"O Asynchronous I/O mode means that the
.\"O .B SIGIO
.\"O signal or the signal set with
.\"O .B F_SETSIG
.\"O is raised when a new I/O event occurs.
.B O_ASYNC
フラグを変更し、ソケットの非同期 (asynchronous) I/O モードを
有効/無効にする。非同期 I/O モードでは、
新しい I/O イベントが起きたときに、
.B SIGIO
シグナルや
.B F_SETSIG
で設定されたシグナル・セットが発行される。
.IP
.\"O Argument is an integer boolean flag.
引き数はブール整数のフラグである。
.\"O (This operation is synonymous with the use of
.\"O .BR fcntl (2)
.\"O to set the
.\"O .B O_ASYNC
.\"O flag.)
(この操作は
.BR fcntl (2)
を使って
.B O_ASYNC
フラグをセットするのと同じ意味である。)
.\"
.TP
.B SIOCGPGRP
.\"O Get the current process or process group that receives
.\"O .B SIGIO
.\"O or
.\"O .B SIGURG
.\"O signals,
.\"O or 0
.\"O when none is set.
.B SIGIO
や
.B SIGURG
を受信したカレントプロセス・プロセスグループを取得する。
ない場合は 0 が返る。
.PP
.\"O Valid
.\"O .BR fcntl (2)
.\"O operations:
有効な
.BR fcntl (2)
操作:
.TP
.B FIOGETOWN
.\"O The same as the
.\"O .B SIOCGPGRP
.\"O .BR ioctl (2).
.B SIOCGPGRP
.BR ioctl (2)
と同じ。
.TP
.B FIOSETOWN
.\"O The same as the
.\"O .B SIOCSPGRP
.\"O .BR ioctl (2).
.B SIOCSPGRP
.BR ioctl (2)
と同じ。
.\"O .SH VERSIONS
.SH バージョン
.\"O .B SO_BINDTODEVICE
.\"O was introduced in Linux 2.0.30.
.\"O .B SO_PASSCRED
.\"O is new in Linux 2.2.
.\"O The
.\"O .I /proc
.\"O interfaces was introduced in Linux 2.2.
.B SO_BINDTODEVICE
は Linux 2.0.30 で導入された。
.B SO_PASSCRED
は Linux 2.2 で登場した。
.I /proc
インタフェースは Linux 2.2 で導入された。
.\"O .B SO_RCVTIMEO
.\"O and
.\"O .B SO_SNDTIMEO
.\"O are supported since Linux 2.3.41.
.\"O Earlier, timeouts were fixed to
.\"O a protocol-specific setting, and could not be read or written.
.B SO_RCVTIMEO
と
.B SO_SNDTIMEO
は Linux 2.3.41 以降でサポートされている。
それ以前は、タイムアウトはプロトコル固有の固定の設定値で、
読み書きをすることはできなかった。
.\"O .SH NOTES
.SH 注意
.\"O Linux assumes that half of the send/receive buffer is used for internal
.\"O kernel structures; thus the values in the corresponding
.\"O .I /proc
.\"O files are twice what can be observed on the wire.
Linux は、送受信バッファの半分を内部のカーネル構造体で用いると仮定している。
したがって、対応する
.I /proc
ファイルはネットワーク回線上での大きさの 2 倍になる。

.\"O Linux will only allow port reuse with the
.\"O .B SO_REUSEADDR
.\"O option
.\"O when this option was set both in the previous program that performed a
.\"O .BR bind (2)
.\"O to the port and in the program that wants to reuse the port.
.\"O This differs from some implementations (e.g., FreeBSD)
.\"O where only the later program needs to set the
.\"O .B SO_REUSEADDR
.\"O option.
.\"O Typically this difference is invisible, since, for example, a server
.\"O program is designed to always set this option.
Linux では、
.B SO_REUSEADDR
オプションでポートの再利用が許可されるのは、
そのポートに対して
.BR bind (2)
を前に実行したプログラムとそのポートを再利用
しようとするプログラムの両方で
.B SO_REUSEADDR
がセットされた場合のみである。
この動作は (FreeBSD などの) いくつかの実装とは異なる。これらでは、
後でポートを再利用しようとするプログラムで
.B SO_REUSEADDR
オプションをセットするだけでよい。
たいていはこの違いは見えない。なぜなら、例えばサーバプログラムは
常にこのオプションをセットするように設計されるからである。
.\"O .SH BUGS
.SH バグ
.\"O The
.\"O .B CONFIG_FILTER
.\"O socket options
.\"O .B SO_ATTACH_FILTER
.\"O and
.\"O .B SO_DETACH_FILTER
.\" FIXME Document SO_ATTACH_FILTER and SO_DETACH_FILTER
.\"O are not documented.
.\"O The suggested interface to use them is via the libpcap
.\"O library.
.B CONFIG_FILTER
ソケットオプションである
.B SO_ATTACH_FILTER
と
.B SO_DETACH_FILTER
について記載されていない。これらは libpcap ライブラリを通して
用いる方が良い。
.\"O .\" .SH AUTHORS
.\" .SH 著者
.\"O .\" This man page was written by Andi Kleen.
.\" この man ページは Andi Kleen が書いた。
.\"O .SH SEE ALSO
.SH 関連項目
.BR getsockopt (2),
.BR setsockopt (2),
.BR socket (2),
.BR capabilities (7),
.BR ddp (7),
.BR ip (7),
.BR packet (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)
