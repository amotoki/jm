.\" Copyright (c) 1998 Andries Brouwer
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 2003-08-24 fix for / by John Kristoff + joey
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated Wed 12 Aug 1998 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2003-09-28 by NAKANO Takeo
.\"
.\"WORD:	wild card pattern	ワイルドカードパターン
.\"WORD:	character class		文字クラス
.\"WORD:	range			領域指定
.\"WORD:	complementation		補集合
.\"WORD:	regular expression	正規表現
.\"WORD:	bracket expression	ブラケット表現
.\"WORD:	collating sequence	照合順序
.\"WORD:	collating element	照合順序の要素
.\"WORD:	current locale		カレントロケール
.\"WORD:	equivalence class	等価クラス
.\"
.TH GLOB 7 2003-08-24 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O glob \- Globbing pathnames
glob \- パス名を glob する
.\"O .SH DESCRIPTION
.SH 説明
.\"O Long ago, in UNIX V6, there was a program
.\"O .I /etc/glob
.\"O that would expand wildcard patterns.
.\"O Soon afterward this became a shell built-in.
昔々 UNIX V6 では、ワイルドカードパターンを展開する
.I /etc/glob
と言うプログラムがあった。その後すぐに、
この機能はシェルに組み込まれるようになった。

.\"O These days there is also a library routine
.\"O .BR glob (3)
.\"O that will perform this function for a user program.
今日では、この機能をユーザープログラムからも実行できるよう、
.BR glob (3)
というライブラリルーチンも存在している。

.\"O The rules are as follows (POSIX.2, 3.13).
glob の規則を以下に述べる (POSIX.2 3.13)。
.\"O .SS "Wildcard Matching"
.SS ワイルドカードマッチ
.\"O A string is a wildcard pattern if it contains one of the
.\"O characters \(aq?\(aq, \(aq*\(aq or \(aq[\(aq.
.\"O Globbing is the operation
.\"O that expands a wildcard pattern into the list of pathnames
.\"O matching the pattern.
.\"O Matching is defined by:
文字列に \(aq?\(aq, \(aq*\(aq, \(aq[\(aq が含まれていると、
それはワイルドカードパターンとみなされる。
「glob する」というのは、ワイルドカードパターンを展開して、
そのパターンにマッチするパス名のリストを得ることである。
マッチは以下のように定義される。

.\"O A \(aq?\(aq (not between brackets) matches any single character.
(ブラケット外部の) \(aq?\(aq はあらゆる単一の文字にマッチする。

.\"O A \(aq*\(aq (not between brackets) matches any string,
.\"O including the empty string.
(ブラケット外部の) \(aq*\(aq はあらゆる文字列にマッチする。
空文字列 (empty string) にもマッチする。
.PP
.\"O .B "Character classes"
.B "文字クラス (character class)"
.sp
.\"O An expression "\fI[...]\fP" where the first character after the
.\"O leading \(aq[\(aq is not an \(aq!\(aq matches a single character,
.\"O namely any of the characters enclosed by the brackets.
.\"O The string enclosed by the brackets cannot be empty;
.\"O therefore \(aq]\(aq can be allowed between the brackets, provided
.\"O that it is the first character.
.\"O (Thus, "\fI[][!]\fP" matches the
.\"O three characters \(aq[\(aq, \(aq]\(aq and \(aq!\(aq.)
"\fI[...]\fP" と言う表記は、先頭の \(aq[\(aq に続く最初の文字が \(aq!\(aq で
なければ、ブラケットの中に含まれている文字のどれか一つにマッチする。
ブラケットの内部に含まれる文字列は空であってはならない。
したがって \(aq]\(aq も最初の文字に指定すればブラケットの内部に含めることが
できる (つまり "\fI[][!]\fP" は \(aq[\(aq, \(aq]\(aq, \(aq!\(aq の
3 文字のどれかにマッチする)。
.PP
.\"O .B Ranges
.B "領域指定 (range)"
.sp
.\"O There is one special convention:
.\"O two characters separated by \(aq\-\(aq denote a range.
.\"O (Thus, "\fI[A\-Fa\-f0\-9]\fP"
.\"O is equivalent to "\fI[ABCDEFabcdef0123456789]\fP".)
.\"O One may include \(aq\-\(aq in its literal meaning by making it the
.\"O first or last character between the brackets.
.\"O (Thus, "\fI[]\-]\fP" matches just the two characters \(aq]\(aq and \(aq\-\(aq,
.\"O and "\fI[\-\-0]\fP" matches the
.\"O three characters \(aq\-\(aq, \(aq.\(aq, \(aq0\(aq, since \(aq/\(aq
.\"O cannot be matched.)
特殊な表記法が一つ存在する。\(aq\-\(aq を挟む二つの文字は領域指定となる。
(つまり "\fI[A\-Fa\-f0\-9]\fP" は "\fI[ABCDEFabcdef0123456789]\fP"
と等価となる。) \(aq\-\(aq 文字そのものを入れたい場合は、
ブラケットの先頭または最後の文字に指定すればよい。
(つまり "\fI[]\-]\fP" は二つの文字 \(aq]\(aq と \(aq\-\(aq
にマッチし、"\fI[\-\-0]\fP" は \(aq\-\(aq, \(aq.\(aq, \(aq0\(aq の
3 文字にマッチする。この間の \(aq/\(aq にはマッチしない。後述を参照。)
.PP
.\"O .B Complementation
.B 補集合 (complementation)
.sp
.\"O An expression "\fI[!...]\fP" matches a single character, namely
.\"O any character that is not matched by the expression obtained
.\"O by removing the first \(aq!\(aq from it.
.\"O (Thus, "\fI[!]a\-]\fP" matches any
.\"O single character except \(aq]\(aq, \(aqa\(aq and \(aq\-\(aq.)
"\fI[!...]\fP" と言う表記は、ブラケットの内部に含まれない単一の文字にマッチする
(ただし先頭にある \(aq!\(aq は除外)。 (つまり "\fI[!]a\-]\fP" は
\(aq]\(aq, \(aqa\(aq, \(aq\-\(aq 以外のすべての文字の、どれか一つにマッチする。)

.\"O One can remove the special meaning of \(aq?\(aq, \(aq*\(aq and \(aq[\(aq by
.\"O preceding them by a backslash, or, in case this is part of
.\"O a shell command line, enclosing them in quotes.
.\"O Between brackets these characters stand for themselves.
.\"O Thus, "\fI[[?*\e]\fP" matches the
.\"O four characters \(aq[\(aq, \(aq?\(aq, \(aq*\(aq and \(aq\e\(aq.
バックスラッシュ \(aq\e\(aq を前置すれば、 \(aq?\(aq, \(aq*\(aq, \(aq[\(aq
は通常の文字として扱われる。
またはシェルのコマンドラインの一部に指定する場合は、
クォートで囲っても同じ効果が得られる。ブラケットの内部では、
これらの文字はその文字自身だけを意味する。
すなわち "\fI[[?*\e]\fP" は \(aq[\(aq, \(aq?\(aq, \(aq*\(aq, \(aq\e\(aq
のどれか一文字にマッチする。
.\"O .SS Pathnames
.SS "パス名 (pathname)"
.\"O Globbing is applied on each of the components of a pathname
.\"O separately.
.\"O A \(aq/\(aq in a pathname cannot be matched by a \(aq?\(aq or \(aq*\(aq
.\"O wildcard, or by a range like "\fI[.\-0]\fP".
.\"O A range cannot contain an
.\"O explicit \(aq/\(aq character; this would lead to a syntax error.
glob 動作は、パス名のそれぞれの部分に独立に適用される。
パス名に存在する \(aq/\(aq は \(aq?\(aq や \(aq*\(aq ワイルドカードにはマッチしない。
また "\fI[.\-0]\fP" のような領域指定にもマッチしない。
領域指定は陽に \(aq/\(aq 文字を含むことはできない。これは文法エラーとなる。

.\"O If a filename starts with a \(aq.\(aq,
.\"O this character must be matched explicitly.
.\"O (Thus, \fIrm\ *\fP will not remove .profile, and \fItar\ c\ *\fP will not
.\"O archive all your files; \fItar\ c\ .\fP is better.)
\(aq.\(aq で始まるパス名では、この文字は陽にマッチさせなければならない。
(つまり \fIrm\ *\fP は .profile を削除しない。また \fItar\ c\ *\fP
ではすべてのファイルはアーカイブされない。 \fItar\ c\ .\fP の方が良い。)
.\"O .SS "Empty Lists"
.SS 空のリスト
.\"O The nice and simple rule given above: "expand a wildcard pattern
.\"O into the list of matching pathnames" was the original UNIX
.\"O definition.
.\"O It allowed one to have patterns that expand into
.\"O an empty list, as in
先に与えた、わかりやすく簡単なルール、
「ワイルドカードパターンをマッチしたパス名のリストに展開する」と言うのは、
オリジナルの UNIX における定義であった。
これはパターンが空のリストに展開されることも許可されていた。
例えば
.br
.nf
    xv \-wait 0 *.gif *.jpg
.fi
.\"O where perhaps no *.gif files are present (and this is not
.\"O an error).
において、*.gif ファイルが全くない場合でも、
これは空のリストに展開されるため、エラーにならない。
.\"O However, POSIX requires that a wildcard pattern is left
.\"O unchanged when it is syntactically incorrect, or the list of
.\"O matching pathnames is empty.
.\"O With
.\"O .I bash
.\"O one can force the classical behavior by setting
.\"O .IR allow_null_glob_expansion=true .
しかし POSIX では、文法的に正しくないパターンや、
マッチがなかったパターンは、
そのまま変更されずに残されることになっている。
.I bash
では
.I allow_null_glob_expansion=true
を指定することで、以前の振る舞いに設定することができる。

.\"O (Similar problems occur elsewhere.
.\"O E.g., where old scripts have
(同様の問題は別のところでも起こっている。例えば、古いスクリプトにおける
.br
.nf
    rm \`find . \-name "*~"\`
.fi
.\"O new scripts require
のような記述は、新しいスクリプトでは
.br
.nf
    rm \-f nosuchfile \`find . \-name "*~"\`
.fi
.\"O to avoid error messages from
.\"O .I rm
.\"O called with an empty argument list.)
のようにしなければならない。さもないと
.I rm
を引き数リストなしで呼び出す可能性があり、
エラーメッセージが出てしまう。)
.\"O .SH NOTES
.SH 注意
.\"O .SS Regular expressions
.SS 正規表現
.\"O Note that wildcard patterns are not regular expressions,
.\"O although they are a bit similar.
.\"O First of all, they match
.\"O filenames, rather than text, and secondly, the conventions
.\"O are not the same: for example, in a regular expression \(aq*\(aq means zero or
.\"O more copies of the preceding thing.
ワイルドカードパターンは正規表現と多少似ているが、しかしこの両者は異なる。
まず第一に、前者がファイル名にマッチするのに対して、
後者はテキストにマッチする。第二に、ルールも同じではない。
例えば正規表現における \(aq*\(aq は、
前置された文字の 0 以上の繰り返しを表す。

.\"O Now that regular expressions have bracket expressions where
.\"O the negation is indicated by a \(aq^\(aq, POSIX has declared the
.\"O effect of a wildcard pattern "\fI[^...]\fP" to be undefined.
正規表現にもブラケット表現はあるが、否定は \(aq^\(aq でなされる。
POSIX ではワイルドカードパターンにおける "\fI[^...]\fP" を未定義であるとしている。
.\"O .SS Character classes and Internationalization
.SS 文字クラスと国際化
.\"O Of course ranges were originally meant to be ASCII ranges,
.\"O so that "\fI[\ \-%]\fP" stands for "\fI[\ !"#$%]\fP" and "\fI[a\-z]\fP" stands
.\"O for "any lowercase letter".
.\"O Some UNIX implementations generalized this so that a range X\-Y
.\"O stands for the set of characters with code between the codes for
.\"O X and for Y.
.\"O However, this requires the user to know the
.\"O character coding in use on the local system, and moreover, is
.\"O not convenient if the collating sequence for the local alphabet
.\"O differs from the ordering of the character codes.
領域指定は、もともとはもちろん ASCII における順序並びを意味していた。
したがって "\fI[\ \-%]\fP" は "\fI[\ !"#$%]\fP" の意味であり、
"\fI[a\-z]\fP" は「すべての小文字」の意味であった。
UNIX の実装の中には、これを拡張したものが存在し、
そこでは X\-Y という領域指定は、X のコードと
Y のコードに挟まれたコードを持つ文字すべてを表すようになっていた。
しかし、これにはユーザーがローカルなシステムにおける
文字コードを知らなければならず、
さらにローカルなアルファベットに対する照合順序
(collating sequence) が文字コードの順序と異なっている場合には不便であった。
(訳注: collating sequence に関しては
.BR regex (7)
を参照して下さい。)
.\"O Therefore, POSIX extended the bracket notation greatly,
.\"O both for wildcard patterns and for regular expressions.
.\"O In the above we saw three types of items that can occur in a bracket
.\"O expression: namely (i) the negation, (ii) explicit single characters,
.\"O and (iii) ranges.
.\"O POSIX specifies ranges in an internationally
.\"O more useful way and adds three more types:
したがって POSIX では、ワイルドカードパターンと正規表現の双方において、
ブラケット表記を大幅に拡張している。
これまで我々は、ブラケット表記には三つの要素が含まれうることを見てきた。
すなわち (i) 否定、(ii) 単一の文字、(iii) 領域指定、の三つである。
POSIX では、領域指定をより国際化に便利なように定義しており、
また三つのタイプをブラケット表記の要素として追加している。

.\"O (iii) Ranges X\-Y comprise all characters that fall between X
.\"O and Y (inclusive) in the currect collating sequence as defined
.\"O by the
.\"O .B LC_COLLATE
.\"O category in the current locale.
(iii) 領域指定 X\-Y は X と Y に挟まれた (両端含む) すべての文字を意味する。
このとき、カレントロケール (current locale) の
.B LC_COLLATE
カテゴリで定義されている照合順序が用いられる。

.\"O (iv) Named character classes, like
(iv) 名前付き文字クラス: 以下のようなものである。
.nf

[:alnum:]  [:alpha:]  [:blank:]  [:cntrl:]
[:digit:]  [:graph:]  [:lower:]  [:print:]
[:punct:]  [:space:]  [:upper:]  [:xdigit:]

.fi
.\"O so that one can say "\fI[[:lower:]]\fP" instead of "\fI[a\-z]\fP", and have
.\"O things work in Denmark, too, where there are three letters past \(aqz\(aq
.\"O in the alphabet.
.\"O These character classes are defined by the
.\"O .B LC_CTYPE
.\"O category
.\"O in the current locale.
これを用いれば "\fI[a\-z]\fP" の代わりに "\fI[[:lower:]]\fP" のような指定ができる。
またデンマークのように、アルファベットの \(aqz\(aq 以降に
3 つの文字が存在するような場合でも、同じような動作が期待できる。
これらの文字クラスはカレントロケールの
.B LC_CTYPE
カテゴリで定義されている。

.\"O (v) Collating symbols, like "\fI[.ch.]\fP" or "\fI[.a-acute.]\fP",
.\"O where the string between "\fI[.\fP" and "\fI.]\fP" is a collating
.\"O element defined for the current locale.
.\"O Note that this may
.\"O be a multicharacter element.
(v) 照合順序におけるシンボル: "\fI[.ch.]\fP" や "\fI[.a-acute.]\fP" のように "\fI[.\fP"
と "\fI.]\fP" で挟まれた文字列は、カレントロケールで定義された照合順序の要素となる。
ある一つの要素が複数の文字からなる場合もありうることに注意。

.\"O (vi) Equivalence class expressions, like "\fI[=a=]\fP",
.\"O where the string between "\fI[=\fP" and "\fI=]\fP" is any collating
.\"O element from its equivalence class, as defined for the
.\"O current locale.
.\"O For example, "\fI[[=a=]]\fP" might be equivalent
.\"O .\" FIXME . the accented 'a' characters are not rendering properly
.\"O .\" mtk May 2007
.\"O to "\fI[aaaaa]\fP" (warning: Latin-1 here), that is,
.\"O to "\fI[a[.a-acute.][.a-grave.][.a-umlaut.][.a-circumflex.]]\fP".
(vi) 等価クラス表現 (equivalence class expressions): "\fI[=a=]\fP"
のように "\fI[=\fP" と "\fI=]\fP" とで挟まれた文字列である。
これは等価クラスのメンバーである照合順序の要素すべてになる。
等価クラスはカレントロケールで定義されているものになる。
例えば、"\fI[[=a=]]\fP" は
"\fI[a[.a\-acute.][.a\-grave.][.a\-umlaut.][.a\-circumflex.]]\fP"
と等価である
(Latin-1 表記では [a\e`{a}\e'{a}\e"{a}\e^{a}] も同じ。
[訳注] 日本語の roff ページでは latin1 コードが出ないので、
ここでは TeX 表記で記載)。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR sh (1),
.BR fnmatch (3),
.BR glob (3),
.BR locale (7),
.BR regex (7)
