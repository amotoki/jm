.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 1997 SUTO, Mitsuaki
.\"     and Copyright(c) 2008 Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated Thu Jun 26 20:33:01 JST 1997
.\"         by SUTO, Mitsuaki <suto@av.crl.sony.co.jp>
.\" Updated 2008-10-03, Akihiro MOTOKI, LDP v3.10
.\"
.TH GETPID 2 2008-09-23 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O getpid, getppid \- get process identification
getpid, getppid \- プロセス ID を得る
.\"O .SH SYNOPSIS
.SH 書式
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t getpid(void);
.br
.B pid_t getppid(void);
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR getpid ()
.\"O returns the process ID of the calling process.
.\"O (This is often used by
.\"O routines that generate unique temporary filenames.)
.BR getpid ()
は呼び出し元のプロセスのプロセス ID を返す。(テンポラリ用のファイル名として
他と重ならない名前を生成するルーチンでしばしば使用される。)

.\"O .BR getppid ()
.\"O returns the process ID of the parent of the calling process.
.BR getppid ()
は呼び出し元のプロセスの親プロセスのプロセス ID を返す。
.\"O .SH ERRORS
.SH エラー
.\"O These functions are always successful.
これらの関数は常に成功する。
.\"O .SH "CONFORMING TO"
.SH 準拠
POSIX.1-2001, 4.3BSD, SVr4.
.\"O .SH NOTES
.SH 注意
.\"O Since glibc version 2.3.4,
.\"O the glibc wrapper function for
.\"O .BR getpid ()
.\"O caches PIDs,
.\"O so as to avoid additional system calls when a process calls
.\"O .BR getpid ()
.\"O repeatedly.
glibc バージョン 2.3.4 以降では、
glibc の
.BR getpid ()
のラッパー関数は PID をキャッシュする。
これは、プロセスが繰り返し
.BR getpid ()
を呼び出した場合にその都度システムコールを呼ぶのを避けるためである。
.\"O Normally this caching is invisible,
.\"O but its correct operation relies on support in the wrapper functions for
.\"O .BR fork (2),
.\"O .BR vfork (2),
.\"O and
.\"O .BR clone (2):
.\"O if an application bypasses the glibc wrappers for these system calls by using
.\"O .BR syscall (2),
.\"O then a call to
.\"O .BR getpid ()
.\"O in the child will return the wrong value
.\"O (to be precise: it will return the PID of the parent process).
通常は、このキャッシュ処理が見えることはないが、
キャッシュ処理が正しく働くためには
.BR fork (2),
.BR vfork (2),
.BR clone (2)
のラッパー関数でのサポートが必要である。
アプリケーションがこれらのシステムコールを呼び出す際に、
glibc のラッパー関数を経由せずに
.BR syscall (2)
を使った場合には、子プロセスで
.BR getpid ()
を呼び出すと間違った値が返ることだろう
(正確にいうと、親プロセスの PID が返される)。
.\" The following program demonstrates this "feature":
.\"
.\" #define _GNU_SOURCE
.\" #include <sys/syscall.h>
.\" #include <sys/wait.h>
.\" #include <stdio.h>
.\" #include <stdlib.h>
.\" #include <unistd.h>
.\"
.\" int
.\" main(int argc, char *argv[])
.\" {
.\"    /* The following statement fills the getpid() cache */
.\"
.\"    printf("parent PID = %ld\n", (long) getpid());
.\"
.\"    if (syscall(SYS_fork) == 0) {
.\"        if (getpid() != syscall(SYS_getpid))
.\"            printf("child getpid() mismatch: getpid()=%ld; "
.\"                    "syscall(SYS_getpid)=%ld\n",
.\"                    (long) getpid(), (long) syscall(SYS_getpid));
.\"        exit(EXIT_SUCCESS);
.\"    }
.\"    wait(NULL);
.\"}
.\"O See also
.\"O .BR clone (2)
.\"O for discussion of a case where
.\"O .BR getpid ()
.\"O may return the wrong value even when invoking
.\"O .BR clone (2)
.\"O via the glibc wrapper function.
.BR clone (2)
を glibc のラッパー関数経由で起動した際にも
.BR getpid ()
が間違った値を返す場合があり、これに関する議論は
.BR clone (2)
も参照してほしい。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR clone (2),
.BR fork (2),
.BR kill (2),
.BR exec (3),
.BR mkstemp (3),
.BR tempnam (3),
.BR tmpfile (3),
.BR tmpnam (3),
.BR credentials (7)
