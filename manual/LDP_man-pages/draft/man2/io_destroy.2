.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.\" Japanese Version Copyright (c) 2003 Akihiro MOTOKI, all rights reserved.
.\" Translated Mon Mar  8 2003 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\" .de Sh \" Subsection
.\" .br
.\" .if t .Sp
.\" .ne 5
.\" .PP
.\" \fB\\$1\fP
.\" .PP
.\" ..
.\" .de Sp \" Vertical space (when we can't use .PP)
.\" .if t .sp .5v
.\" .if n .sp
.\" ..
.\" .de Ip \" List item
.\" .br
.\" .ie \\n(.$>=3 .ne \\$3
.\" .el .ne 3
.\" .IP "\\$1" \\$2
.\" ..
.TH IO_DESTROY 2 2008-06-18 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O io_destroy \- destroy an asynchronous I/O context
.SH 名前
io_destroy \- 非同期 I/O コンテキストの消去
.\"O .SH "SYNOPSIS"
.SH 書式
.nf
.\" .ad l
.\" .hy 0
.B #include <libaio.h>
.\" #include <linux/aio.h>
.sp
.\" .HP 17
.BI "int io_destroy(aio_context_t " ctx );
.\" .ad
.\" .hy
.sp
.\"O Link with \fI\-laio\fP.
\fI\-laio\fP とリンクする。
.fi
.\"O .SH "DESCRIPTION"
.SH 説明
.PP
.\"O .BR io_destroy ()
.\"O removes the asynchronous I/O context from the list of
.\"O I/O contexts and then destroys it.
.\"O .BR io_destroy ()
.\"O can also cancel any outstanding asynchronous I/O
.\"O actions on \fIctx\fP and block on completion.
.BR io_destroy ()
は、I/O コンテキストのリストから指定された非同期 I/O
コンテキストを削除した後、そのコンテキストを消去する。
.BR io_destroy ()
は、\fIctx\fP 上に未処理の非同期 I/O 命令及び
完了キューのブロックの取り消しも行うことができる。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success,
.\"O .BR io_destroy ()
.\"O returns 0.
.\"O For the failure return, see NOTES.
成功した場合、
.BR io_destroy ()
は 0 を返す。
失敗時の返り値については、「注意」の節を参照すること。
.\"O .SH "ERRORS"
.SH エラー
.TP
.B EFAULT
.\"O The context pointed to is invalid.
.\"motoki: 分かりにくいので、io_cancel.2 から流用。おそらく同じ意味。
データ構造の中に無効なデータを指しているものがある。
.TP
.B EINVAL
.\"O The AIO context specified by \fIctx\fP is invalid.
\fIctx\fP で指定された AIO コンテキストが無効である。
.TP
.B ENOSYS
.\"O .BR io_destroy ()
.\"O is not implemented on this architecture.
.BR io_destroy ()
はこのアーキテクチャでは実装されていない。
.\"O .SH "VERSIONS"
.SH バージョン
.PP
.\"O The asynchronous I/O system calls first appeared in Linux 2.5, August 2002.
非同期 I/O システム・コールは 2002年8月に Linux 2.5 で初めて登場した。
.\"O .SH "CONFORMING TO"
.SH 準拠
.PP
.\"O .BR io_destroy ()
.\"O is Linux-specific and should not be used in programs
.\"O that are intended to be portable.
.BR io_destroy ()
は Linux 固有であり、移植を想定したプログラムで使用すべきではない。
.\"O .SH NOTES
.SH 注意
.\"O Glibc does not provide a wrapper function for this system call.
glibc はこのシステムコール用のラッパー関数を提供していない。

.\"O The wrapper provided in
.\"O .I libaio
.\"O for
.\"O .BR io_destroy ()
.\"O does not follow the usual C library conventions for indicating error:
.\"O on error it returns a negated error number
.\"O (the negative of one of the values listed in ERRORS).
.\"O If the system call is invoked via
.\"O .BR syscall (2),
.\"O then the return value follows the usual conventions for
.\"O indicating an error: \-1, with
.\"O .I errno
.\"O set to a (positive) value that indicates the error.
.I libaio
で
.BR io_destroy ()
用に提供されているラッパー関数は、エラーの通知が通常の C ライブラリの
慣習にしたがっておらず、エラーの場合には負のエラー番号
(エラーの節に列挙されている値の一つを負にしたもの) が返り値となる。
.BR syscall (2)
経由でシステムコールを起動すると、返り値は通常のエラー通知の慣習に
したがってものとなり、エラーの場合には \-1 が返り、
.I errno
にエラーを示す (正の) 値が設定される。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR io_cancel (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7)
.\"O .\" .SH "NOTES"
.\" .SH 注
.\" .PP
.\"O .\" The asynchronous I/O system calls were written by Benjamin LaHaise.
.\" 非同期 I/O システム・コールは Benjamin LaHaise が書いた。
.\"O .\" .SH AUTHOR
.\" .SH 著者
.\" Kent Yoder.
