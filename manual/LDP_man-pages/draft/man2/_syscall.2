.\"
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de),
.\"   Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Tue Jul  6 12:42:46 MDT 1993 <dminer@nyx.cs.du.edu>
.\" Added "Calling Directly" and supporting paragraphs
.\"
.\" Modified Sat Jul 24 15:19:12 1993 by Rik Faith <faith@cs.unc.edu>
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Added explanation of arg stacking when 6 or more args.
.\"
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\"
.\" 2007-10-23 mtk: created as a new page, by taking the content
.\" specific to the _syscall() macros from intro(2).
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-02-11, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" 
.TH _SYSCALL 2 2007-12-19 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O _syscall \- invoking a system call without library support (OBSOLETE)
_syscall \- ライブラリのサポートなしでシステムコールを起動する (昔の方法)
.\"O .SH "SYNOPSIS"
.SH 書式
.B #include <linux/unistd.h>

A _syscall macro

desired system call
.\"O .SH DESCRIPTION
.SH 説明
.\"O The important thing to know about a system call is its prototype.
.\"O You need to know how many arguments, their types,
.\"O and the function return type.
.\"O There are seven macros that make the actual call into the system easier.
.\"O They have the form:
システムコールに関してそのプロトタイプを知ることが重要である。
引き数の個数、それらの型、返り値の型を知る必要がある。
実際の使用にあたっては、システムコールをシステムに呼び出しやすくするために、
7 個のマクロが用意されている。これらのマクロは以下の形である。
.sp
.RS
.RI _syscall X ( type , name , type1 , arg1 , type2 , arg2 ,...)
.RE
.PP
.\"O where
ここで
.IP
.\"O \fIX\fP is 0\(en6, which are the number of arguments taken by the
.\"O system call
\fIX\fP は 0〜6 で、システムコールが取る引き数の個数である。
.IP
.\"O \fItype\fP is the return type of the system call
\fItype\fP はシステムコールの返り値の型である。
.IP
.\"O \fIname\fP is the name of the system call
\fIname\fP はシステムコールの名前である。
.IP
.\"O \fItypeN\fP is the Nth argument's type
\fItypeN\fP は N 番目の引き数の型である。
.IP
.\"O \fIargN\fP is the name of the Nth argument
\fIargN\fP は N 番目の引き数の名前である。
.PP
.\"O These macros create a function called \fIname\fP with the arguments you
.\"O specify.
.\"O Once you include the _syscall() in your source file,
.\"O you call the system call by \fIname\fP.
これらのマクロは、指定した引き数を持つ \fIname\fP という名前の関数を生成する。
一度ソースファイルの中で _syscall() をインクルードしておくと、
そのシステムコールを \fIname\fP という名前で呼ぶことができる。
.\"O .SH FILES
.SH ファイル
.I /usr/include/linux/unistd.h
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O The use of these macros is Linux-specific, and deprecated.
これらのマクロは Linux 固有であり、その使用は非推奨である。
.\"O .SH NOTES
.SH 注意
.\"O Starting around kernel 2.6.18, the _syscall macros were removed
.\"O from header files supplied to user space.
.\"O Use
.\"O .BR syscall (2)
.\"O instead.
.\"O (Some architectures, notably ia64, never provided the _syscall macros;
.\"O on those architectures,
.\"O .BR syscall (2)
.\"O was always required.)
カーネル 2.6.18 あたりから、_syscall マクロ群はユーザ空間に対して提供される
ヘッダファイルから削除された。代わりに
.BR syscall (2)
を使用すること。
(いくつかのアーキテクチャ、特に ia64、では、これまで _syscall マクロが
提供されたことはない。このようなアーキテクチャでは、常に
.BR syscall (2)
が必要であった。)

.\"O The _syscall() macros \fIdo not\fP produce a prototype.
.\"O You may have to
.\"O create one, especially for C++ users.
_syscall() マクロはプロトタイプを「生成しない」。
ユーザはプロトタイプを自分で書かなければならないかもしれない。
とりわけ C++ ユーザの場合はそうであろう。

.\"O System calls are not required to return only positive or negative error
.\"O codes.
.\"O You need to read the source to be sure how it will return errors.
.\"O Usually, it is the negative of a standard error code,
.\"O for example, \-\fBEPERM\fP.
.\"O The _syscall() macros will return the result \fIr\fP of the system call
.\"O when \fIr\fP is nonnegative, but will return \-1 and set the variable
.\"O .I errno
.\"O to \-\fIr\fP when \fIr\fP is negative.
.\"O For the error codes, see
.\"O .BR errno (3).
システムコールは、正のエラーコードのみ、または負のエラーコードのみを返すように
定められている訳ではない。そのシステムコールがどのようなエラーコードを返すかを
確認するには、そのソースコードを読む必要がある。たいていの場合は、標準のエラー
コードを負にしたものである (例えば \-\fBEPERM\fP)。
_syscall() マクロは、そのシステムコールの返り値 \fIr\fP が負でない場合、その値
をそのまま返す。一方、\fIr\fP が負の場合には、変数
.I errno
に \-\fIr\fP を設定し、\-1 を返す。
エラーコードについては
.BR errno (3)
を参照。

.\"O When defining a system call, the argument types \fImust\fP be
.\"O passed by-value or by-pointer (for aggregates like structs).
システムコールを定義する際、引き数の型は値渡し (by-value) か、
(構造体のように集合的なデータの場合は) ポインタ渡し (by-pointer)
でなければならない。
.\" The preferred way to invoke system calls that glibc does not know
.\" about yet is via
.\" .BR syscall (2).
.\" However, this mechanism can only be used if using a libc
.\" (such as glibc) that supports
.\" .BR syscall (2),
.\" and if the
.\" .I <sys/syscall.h>
.\" header file contains the required SYS_foo definition.
.\" Otherwise, the use of a _syscall macro is required.
.\"
.\"O .SH EXAMPLE
.SH 例
.nf
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <linux/unistd.h>       /* for _syscallX macros/related stuff */
#include <linux/kernel.h>       /* for struct sysinfo */

_syscall1(int, sysinfo, struct sysinfo *, info);

.\"O /* Note: if you copy directly from the nroff source, remember to
.\"O REMOVE the extra backslashes in the printf statement. */
/* Note: nroff のソースファイルから直接コピーする際には、
printf 文内の余分なバックスラッシュを忘れずに削除するように。 */

int
main(void)
{
    struct sysinfo s_info;
    int error;

    error = sysinfo(&s_info);
    printf("code error = %d\\n", error);
    printf("Uptime = %lds\\nLoad: 1 min %lu / 5 min %lu / 15 min %lu\\n"
           "RAM: total %lu / free %lu / shared %lu\\n"
           "Memory in buffers = %lu\\nSwap: total %lu / free %lu\\n"
           "Number of processes = %d\\n",
           s_info.uptime, s_info.loads[0],
           s_info.loads[1], s_info.loads[2],
           s_info.totalram, s_info.freeram,
           s_info.sharedram, s_info.bufferram,
           s_info.totalswap, s_info.freeswap,
           s_info.procs);
    exit(EXIT_SUCCESS);
}
.fi
.SS "Sample Output"
.nf
code error = 0
uptime = 502034s
Load: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: total 15343616 / free 827392 / shared 8237056
Memory in buffers = 5066752
Swap: total 27881472 / free 24698880
Number of processes = 40
.fi
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR intro (2),
.BR syscall (2),
.BR errno (3)
