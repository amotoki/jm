.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2006, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Additions from Richard Gooch <rgooch@atnf.CSIRO.AU> and aeb, 971207
.\" 2006-03-13, mtk, Added ppoll() + various other rewordings
.\" 2006-07-01, mtk, Added POLLRDHUP + various other wording and
.\"	formatting changes.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-12-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2004-05-22, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-03, Yuichi SATO
.\" Updated & Modified 2005-10-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\" Updated 2006-04-16, Akihiro MOTOKI, Catch up to LDP man-pages 2.28
.\" Updated 2006-07-23, Akihiro MOTOKI, Catch up to LDP man-pages 2.36
.\"
.\"WORD:	descriptor		ディスクリプタ
.\"
.TH POLL 2 2009-09-15 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O poll, ppoll \- wait for some event on a file descriptor
poll, ppoll \- ファイルディスクリプタにおけるイベントを待つ
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <poll.h>
.sp
.BI "int poll(struct pollfd *" fds ", nfds_t " nfds ", int " timeout );
.sp
.B #define _GNU_SOURCE
.B #include <poll.h>
.sp
.BI "int ppoll(struct pollfd *" fds ", nfds_t " nfds ", "
.BI "        const struct timespec *" timeout ", const sigset_t *" sigmask );
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR poll ()
.\"O performs a similar task to
.\"O .BR select (2):
.\"O it waits for one of a set of file descriptors to become ready
.\"O to perform I/O.
.BR poll ()
は
.BR select (2)
と同様の仕事を行う、つまり、ファイルディスクリプタ集合のいずれか一つが
I/O を実行可能な状態になるのを待つ。

.\"O The set of file descriptors to be monitored is specified in the
.\"O .I fds
.\"O argument, which is an array of structures of the following form:
監視するファイルディスクリプタ集合は、
.I fds
引き数で指定する。
.I fds
は、以下の型の構造体の配列である。
.in +4n
.nf

struct pollfd {
    int   fd;         /* file descriptor */
    short events;     /* requested events */
    short revents;    /* returned events */
};
.in
.fi
.PP
.\"O The caller should specify the number of items in the
.\"O .I fds
.\"O array in
.\"O .IR nfds .
.I nfds
には、
.I fds
配列の要素数を指定する。

.\"O The field
.\"O .I fd
.\"O contains a file descriptor for an open file.
構造体の
.I fd
にはオープンしたファイルのファイルディスクリプタを入れる。

.\"O The field
.\"O .I events
.\"O is an input parameter, a bit mask specifying the events the application
.\"O is interested in.
構造体の
.I events
要素は入力パラメータで、アプリケーションが興味を持っているイベントの
ビットマスクを指定する。

.\"O The field
.\"O .I revents
.\"O is an output parameter, filled by the kernel with the events that
.\"O actually occurred.
.\"O The bits returned in
.\"O .I revents
.\"O can include any of those specified in
.\"O .IR events ,
.\"O or one of the values
.\"O .BR POLLERR ,
.\"O .BR POLLHUP ,
.\"O or
.\"O .BR POLLNVAL .
.\"O (These three bits are meaningless in the
.\"O .I events
.\"O field, and will be set in the
.\"O .I revents
.\"O field whenever the corresponding condition is true.)
.I revents
要素は出力パラメータで、実際に起こったイベントがカーネルにより設定される。
.I revents
で返されるビット列には、
.I events
で指定したもののどれか、もしくは
.BR POLLERR ,
.BR POLLHUP ,
.B POLLNVAL
のうちの一つが含まれる
.RB ( POLLERR ,
.BR POLLHUP ,
.B POLLNVAL
の 3つのビットは
.I events
に指定しても意味がなく、対応した状態が真の場合に
.I revents
に設定される)。

.\"O If none of the events requested (and no error) has occurred for any
.\"O of the file descriptors, then
.\"O .BR poll ()
.\"O blocks until one of the events occurs.
どのファイルディスクリプタにも要求したイベントが発生しておらず、
エラーも起こらない場合、
.BR poll ()
はイベントのうちいずれか一つが発生するまで停止 (block) する。

.\"O The
.\"O .I timeout
.\"O argument specifies an upper limit on the time for which
.\"O .BR poll ()
.\"O will block, in milliseconds.
.\"O Specifying a negative value in
.\"O .I timeout
.\"O means an infinite timeout.
.I timeout
引き数は
.BR poll ()
が停止する時間の上限を設定するもので、ミリ秒単位で指定する。
.I timeout
に負の値を指定すると、タイムアウト時間が無限となる。

.\"O The bits that may be set/returned in
.\"O .I events
.\"O and
.\"O .I revents
.\"O are defined in \fI<poll.h>\fP:
.I events
に指定したり、
.I revents
で返されるビットは \fI<poll.h>\fP で定義されている:
.RS
.TP
.B POLLIN
.\"O There is data to read.
読み出し可能なデータがある。
.TP
.B POLLPRI
.\"O There is urgent data to read (e.g., out-of-band data on TCP socket;
.\"O pseudo-terminal master in packet mode has seen state change in slave).
読み出し可能な緊急データ (urgent data) がある
(例えば、TCP ソケットの帯域外 (out-of-band data) データを受信した場合や、
パケットモードの擬似端末のマスタがスレーブ側の変化を見つけたとき)。
.TP
.B POLLOUT
.\"O Writing now will not block.
書き込みが停止 (block) しない状態である。
.TP
.\"O .BR POLLRDHUP " (since Linux 2.6.17)"
.BR POLLRDHUP " (Linux 2.6.17 以降)"
.\"O Stream socket peer closed connection,
.\"O or shut down writing half of connection.
.\"O The
.\"O .B _GNU_SOURCE
.\"O feature test macro must be defined in order to obtain this definition.
ストリームソケットの他端が、コネクションを close したか、
コネクションの書き込み側を shutdown した。
この定義を有効にするには、
.B _GNU_SOURCE
機能検査マクロを定義しなければならない。
.TP
.B POLLERR
.\"O Error condition (output only).
エラー状態 (出力の場合のみ)。
.TP
.B POLLHUP
.\"O Hang up (output only).
ハングアップした (出力の場合のみ)。
.TP
.B POLLNVAL
.\"O Invalid request:
.\"O .I fd
.\"O not open (output only).
不正な要求:
.I fd
がオープンされていない (出力の場合のみ)。
.RE
.PP
.\"O When compiling with
.\"O .B _XOPEN_SOURCE
.\"O defined, one also has the following,
.\"O which convey no further information beyond the bits listed above:
.B _XOPEN_SOURCE
を定義してコンパイルした場合には、以下の定義も行われる。
ただし、上記のリストにあるビット以上の情報が得られる訳ではない。
.RS
.TP
.B POLLRDNORM
.\"O Equivalent to
.\"O .BR POLLIN .
.B POLLIN
と同じ。
.TP
.B POLLRDBAND
.\"O Priority band data can be read (generally unused on Linux).
優先帯域データ (priority band data) が読み出し可能である
(普通は Linux では使用されない)。
.\" POLLRDBAND is used in the DECnet protocol.
.TP
.B POLLWRNORM
.\"O Equivalent to
.\"O .BR POLLOUT .
.B POLLOUT
と同じ。
.TP
.B POLLWRBAND
.\"O Priority data may be written.
優先帯域データ (priority data) が書き込み可能である。
.RE
.PP
.\"O Linux also knows about, but does not use
.\"O .BR POLLMSG .
Linux では
.B POLLMSG
も定義されているが、使用されていない。
.SS ppoll()
.\"O The relationship between
.\"O .BR poll ()
.\"O and
.\"O .BR ppoll ()
.\"O is analogous to the relationship between
.\"O .BR select (2)
.\"O and
.\"O .BR pselect (2):
.\"O like
.\"O .BR pselect (2),
.\"O .BR ppoll ()
.\"O allows an application to safely wait until either a file descriptor
.\"O becomes ready or until a signal is caught.
.BR poll ()
と
.BR ppoll ()
の関係は
.BR select (2)
と
.BR pselect (2)
の関係と同じようなものである:
.BR pselect (2)
と同様に、
.BR ppoll ()
を使うと、アプリケーションはファイルディスクリプタの状態変化
もしくはシグナルの捕捉を安全に待つことができる。
.PP
.\"O Other than the difference in the
.\"O .I timeout
.\"O argument, the following
.\"O .BR ppoll ()
.\"O call:
.I timeout
引き数の違いを除くと、以下の
.BR ppoll ()
の呼び出しは、
.nf

    ready = ppoll(&fds, nfds, timeout, &sigmask);

.fi
.\"O is equivalent to
.\"O .I atomically
.\"O executing the following calls:
次のコールを
.I atomic
に実行するのと等価である。
.nf

    sigset_t origmask;

    sigprocmask(SIG_SETMASK, &sigmask, &origmask);
    ready = poll(&fds, nfds, timeout);
    sigprocmask(SIG_SETMASK, &origmask, NULL);
.fi
.PP
.\"O See the description of
.\"O .BR pselect (2)
.\"O for an explanation of why
.\"O .BR ppoll ()
.\"O is necessary.
なぜ
.BR ppoll ()
が必要なのかについての説明は
.BR pselect (2)
の説明を参照のこと。

.\"O If the
.\"O .I sigmask
.\"O argument is specified as NULL, then
.\"O no signal mask manipulation is performed
.\"O (and thus
.\"O .BR ppoll ()
.\"O differs from
.\"O .BR poll ()
.\"O only in the precision of the
.\"O .I timeout
.\"O argument).
.I sigmask
引き数に NULL が指定された場合、シグナルマスクの操作は行われない
(したがって、
.BR ppoll ()
の
.BR poll ()
との違いは
.I timeout
引き数の精度だけとなる)。

.\"O The
.\"O .I timeout
.\"O argument specifies an upper limit on the amount of time that
.\"O .BR ppoll ()
.\"O will block.
.\"O This argument is a pointer to a structure of the following form:
.I timeout
引き数は
.BR ppoll ()
が停止する時間の上限を指定するものである。
この引き数には以下の型の構造体へのポインタを指定する。
.in +4n
.nf

struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
};
.fi
.in

.\"O If
.\"O .I timeout
.\"O is specified as NULL, then
.\"O .BR ppoll ()
.\"O can block indefinitely.
.I timeout
に NULL が指定された場合、
.B ppoll
は無限に停止することがあり得る。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success, a positive number is returned; this is
.\"O the number of structures which have nonzero
.\"O .I revents
.\"O fields (in other words, those descriptors with events or errors reported).
.\"O A value of 0 indicates that the call timed out and no file
.\"O descriptors were ready.
.\"O On error, \-1 is returned, and
.\"O .I errno
.\"O is set appropriately.
成功した場合は正の数を返す。この数は 0 以外の
.I revents
要素を持つ構造体の数である (別の言い方をすると、これらのディスクリプタ
にはイベントかエラー報告がある)。
値 0 は、タイムアウトとなり、どのファイルディスクリプタでもイベントが
発生しなかったことを示す。エラーの場合は \-1 が返され、
.I errno
が適切に設定される。
.\"O .SH ERRORS
.SH エラー
.TP
.B EFAULT
.\"O The array given as argument was not contained in the calling program's
.\"O address space.
引き数として指定した配列が、呼び出したプロセスのアドレス空間に
含まれていない。
.TP
.B EINTR
.\"O A signal occurred before any requested event; see
.\"O .BR signal (7).
要求されたイベントのどれかが起こる前にシグナルが発生した。
.BR signal (7)
参照。
.TP
.B EINVAL
.\"O The
.\"O .I nfds
.\"O value exceeds the
.\"O .B RLIMIT_NOFILE
.\"O value.
.I nfds
の値が
.B RLIMIT_NOFILE
を超えた。
.TP
.B ENOMEM
.\"O There was no space to allocate file descriptor tables.
ファイルディスクリプタ・テーブルを確保するためのメモリがない。
.\"O .SH VERSIONS
.SH バージョン
.\"O The
.\"O .BR poll ()
.\"O system call was introduced in Linux 2.1.23.
.\"O The
.\"O .BR poll ()
.\"O library call was introduced in libc 5.4.28
.\"O (and provides emulation using select(2) if your kernel does not
.\"O have a
.\"O .BR poll ()
.\"O system call).
.BR poll ()
システムコールは Linux 2.1.23 で導入された。
.BR poll ()
ライブラリ・コールは libc 5.4.28 から導入された
(これはカーネルが
.BR poll ()
システムコールをサポートしていない場合に
.BR select (2)
を使用してエミュレートを行う)。

.\"O The
.\"O .BR ppoll ()
.\"O system call was added to Linux in kernel 2.6.16.
.\"O The
.\"O .BR ppoll ()
.\"O library call was added in glibc 2.4.
.BR ppoll ()
システムコールは カーネル 2.6.16 で Linux に追加された。
.BR ppoll ()
ライブラリコールは glibc 2.4 に追加された。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O .BR poll ()
.\"O conforms to POSIX.1-2001.
.\"O .BR ppoll ()
.\"O is Linux-specific.
.\"O .\" NetBSD 3.0 has a pollts() which is like Linux ppoll().
.BR poll ()
は POSIX.1-2001 に準拠している。
.BR ppoll ()
は Linux 固有である。
.\" NetBSD 3.0 には pollts() がある。
.\" pollts() は Linux ppoll () と同じようなものである。
.\"O .SH NOTES
.SH 注意
.\"O Some implementations define the nonstandard constant
.\"O .B INFTIM
.\"O with the value \-1 for use as a
.\"O .IR timeout .
.\"O This constant is not provided in glibc.
いくつかの実装では、値 \-1 を持った非標準の定数
.B INFTIM
が定義されており、
.I timeout
の指定に使用できる。
この定数は glibc では定義されていない。
.\"O .SS "LINUX NOTES"
.SS "Linux での注意"
.\"O The Linux
.\"O .BR ppoll ()
.\"O system call modifies its
.\"O .I timeout
.\"O argument.
.\"O However, the glibc wrapper function hides this behavior
.\"O by using a local variable for the timeout argument that
.\"O is passed to the system call.
.\"O Thus, the glibc
.\"O .BR ppoll ()
.\"O function does not modify its
.\"O .I timeout
.\"O argument.
Linux の
.BR ppoll ()
システムコールは
.I timeout
引き数を変更する。
しかし、glibc のラッパー関数は、システムコールに渡す timeout 引き数
としてローカル変数を使うことでこの動作を隠蔽している。
このため、glibc の
.BR ppoll ()
関数は
.I timeout
引き数を変更しない。
.\"O .SH BUGS
.SH バグ
.\"O See the discussion of spurious readiness notifications under the
.\"O BUGS section of
.\"O .BR select (2).
.BR select (2)
の「バグ」の節に書かれている、誤った準備完了通知 (spurious readiness
notifications) についての議論を参照のこと。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR select (2),
.BR select_tut (2),
.BR feature_test_macros (7),
.BR time (7)
