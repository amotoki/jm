.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (c) 2007, 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-09 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-18 by Michael Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2007-07-08, mtk, added an example program; updated SYNOPSIS
.\" 2008-05-08, mtk, Describe rules governing ownership of new files
.\"     (bsdgroups versus sysvgroups, and the effect of the parent
.\"     directory's set-group-ID permission bit).
.\"
.\" Japanese Version Copyright (c) 1996 Yosiaki Yanagihara
.\"         all rights reserved.
.\" Translated 1996-06-24, Yosiaki Yanagihara <yosiaki@bsd2.kbnes.nec.co.jp>
.\" Modified 1998-05-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2004-02-29, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Wed Dec 29 06:48:16 JST 2004 by Yuichi SATO
.\" Updated 2007-09-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.64
.\" Updated 2008-08-09, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.TH CHOWN 2 2010-09-26 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O chown, fchown, lchown \- change ownership of a file
chown, fchown, lchown \- ファイルの所有者を変更する
.\"O .SH SYNOPSIS
.SH 書式
.B #include <unistd.h>
.sp
.BI "int chown(const char *" path ", uid_t " owner ", gid_t " group );
.br
.BI "int fchown(int " fd ", uid_t " owner ", gid_t " group );
.br
.BI "int lchown(const char *" path ", uid_t " owner ", gid_t " group );
.sp
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR fchown (),
.BR lchown ():
.PD 0
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
.\"O || /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
|| /* glibc 2.12 以降: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.PD
.\"O .SH DESCRIPTION
.SH 説明
.\"O These system calls change the owner and group of a file.
.\"O The differ only in how the file is specified:
これらのシステムコールは、ファイルの所有者 (owner) とグループを変更する。
システムコール間の違いは、ファイルの指定の仕方だけである。
.IP * 2
.\"O .BR chown ()
.\"O changes the ownership of the file specified by
.\"O .IR path ,
.\"O which is dereferenced if it is a symbolic link.
.BR chown ()
は
.I path
で指定されたファイルの所有権を変更する。
.I path
がシンボリック・リンクの場合は、リンクの展開が行われる。
.IP *
.\"O .BR fchown ()
.\"O changes the ownership of the file referred to by the open file descriptor
.\"O .IR fd .
.BR fchown ()
はオープンされたファイルディスクリプタ
.I fd
により参照されるファイルの所有権を変更する。
.IP *
.\"O .BR lchown ()
.\"O is like
.\"O .BR chown (),
.\"O but does not dereference symbolic links.
.BR lchown ()
は
.BR chown ()
と同じだが、シンボリック・リンクを展開しない点が異なる。
.PP
.\"O Only a privileged process (Linux: one with the
.\"O .B CAP_CHOWN
.\"O capability) may change the owner of a file.
特権を持つプロセス (Linux では
.B CAP_CHOWN
ケーパビリティ (capability) を持つプロセス) だけが
ファイルの所有者を変更できる。
.\"O The owner of a file may change the group of the file
.\"O to any group of which that owner is a member.
ファイルの所有者は、その所有者が属しているグループのいずれかに
ファイルのグループを変更することができる。
.\"O A privileged process (Linux: with
.\"O .BR CAP_CHOWN )
.\"O may change the group arbitrarily.
特権 (Linux では
.BR CAP_CHOWN )
を持つプロセスは、任意のグループに変更できる。

.\"O If the
.\"O .I owner
.\"O or
.\"O .I group
.\"O is specified as \-1, then that ID is not changed.
.I owner
または
.I group
に \-1 が指定された場合、それらの ID は変更されない。

.\"O When the owner or group of an executable file are
.\"O changed by an unprivileged user the
.\"O .B S_ISUID
.\"O and
.\"O .B S_ISGID
.\"O mode bits are cleared.
.\"O POSIX does not specify whether
.\"O this also should happen when root does the
.\"O .BR chown ();
非特権ユーザーにより実行ファイルの所有者またはグループが
変更された場合は
.B S_ISUID
と
.B ISGID
モードビットはクリアされる。
POSIX はこの動作やルートが
.BR chown ()
を行なった場合については特に指定されていない。
.\"O the Linux behavior depends on the kernel version.
Linux における動作はカーネルのバージョンに依存する。
.\"O .\" In Linux 2.0 kernels, superuser was like everyone else
.\"O .\" In 2.2, up to 2.2.12, these bits were not cleared for superuser.
.\"O .\" Since 2.2.13, superuser is once more like everyone else.
.\" Linux 2.0 カーネルでは、スーパー・ユーザーでの動作は
.\" 他のユーザーの場合と同じであった。
.\" 2.2 では、2.2.12 までは、スーパー・ユーザーの場合には
.\" これらのビットはクリアされなくなった。
.\" 2.2.13 以降では、スーパー・ユーザーでの動作は
.\" 再び他のユーザーの場合と同じになった。
.\"O In case of a non-group-executable file (i.e., one for which the
.\"O .B S_IXGRP
.\"O bit is not set) the
.\"O .B S_ISGID
.\"O bit indicates mandatory locking, and is not cleared by a
.\"O .BR chown ().
非グループ実行ファイル
.RB ( S_IXGRP
ビットが設定されていないファイル) の場合には
.B S_ISGID
ビットは強制ロック (mandatory locking) を意味している。
そしてそれは
.BR chown ()
ではクリアできない。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success, zero is returned.
.\"O On error, \-1 is returned, and
.\"O .I errno
.\"O is set appropriately.
成功すると、0 を返す。
失敗すると、\-1 を返し、
.I errno
に適切な値を設定する。
.\"O .SH ERRORS
.SH エラー
.\"O Depending on the file system, other errors can be returned.
.\"O The more general errors for
.\"O .BR chown ()
.\"O are listed below.
ファイルシステムによっては他のエラーが返される事がある。
.B chmod
で一般的なエラーを以下に挙げる。
.TP
.B EACCES
.\"O Search permission is denied on a component of the path prefix.
.\"O (See also
.\"O .BR path_resolution (7).)
.I path
の構成要素に検索許可 (search permission) がない
.RB ( path_resolution (7)
も参照)。
.TP
.B EFAULT
.\"O .I path
.\"O points outside your accessible address space.
.I path
が割り当てられたアドレス空間外を指している。
.TP
.B ELOOP
.\"O Too many symbolic links were encountered in resolving
.\"O .IR path .
.I path
を解決する際に遭遇したシンボリック・リンクが多過ぎる。
.TP
.B ENAMETOOLONG
.\"O .I path
.\"O is too long.
.I path
が長過ぎる。
.TP
.B ENOENT
.\"O The file does not exist.
ファイルが存在しない。
.TP
.B ENOMEM
.\"O Insufficient kernel memory was available.
カーネルに十分なメモリがない。
.TP
.B ENOTDIR
.\"O A component of the path prefix is not a directory.
.I path
の構成要素がディレクトリでない。
.TP
.B EPERM
.\"O The calling process did not have the required permissions
.\"O (see above) to change owner and/or group.
呼び出したプロセスに所有者またはグループ (もしくはその両方) を変更するために
要求される許可 (上記を参照) がない。
.TP
.B EROFS
.\"O The named file resides on a read-only file system.
指定したファイルが読み込み専用 (read-only) のファイル・システム上にある。
.PP
.\"O The general errors for
.\"O .BR fchown ()
.\"O are listed below:
.BR fchown ()
で一般的なエラーを以下に挙げる:
.TP
.B EBADF
.\"O The descriptor is not valid.
ディスクリプターが有効でない。
.TP
.B EIO
.\"O A low-level I/O error occurred while modifying the inode.
i ノード (inode) を変更する際に低レベル I/O エラーが発生した。
.TP
.B ENOENT
.\"O See above.
上記を参照。
.TP
.B EPERM
.\"O See above.
上記を参照。
.TP
.B EROFS
.\"O See above.
上記を参照。
.\"O .SH "CONFORMING TO"
.SH 準拠
4.4BSD, SVr4, POSIX.1-2001.

.\"O The 4.4BSD version can only be
.\"O used by the superuser (that is, ordinary users cannot give away files).
4.4BSD 版ではスーパー・ユーザーのみが使用できる
(つまり、普通のユーザーはファイルを手放すことはできない)。
.\"O .\" chown():
.\"O .\" SVr4 documents EINVAL, EINTR, ENOLINK and EMULTIHOP returns, but no
.\"O .\" ENOMEM.  POSIX.1 does not document ENOMEM or ELOOP error conditions.
.\" chown():
.\" SVr4 には EINVAL, EINTR, ENOLINK, EMULTIHOP を返すと記載されているが、
.\" ENOMEM はない。
.\" POSIX.1 には ENOMEM, ELOOP について記載はない。
.\"O .\" fchown():
.\"O .\" SVr4 documents additional EINVAL, EIO, EINTR, and ENOLINK
.\"O .\" error conditions.
.\" fchown():
.\" SVr4 には他に EINVAL, EIO, EINTR, ENOLINK エラー状態についての記載がある。
.\"O .SH NOTES
.SH 注意
.\"O When a new file is created (by, for example,
.\"O .BR open (2)
.\"O or
.\"O .BR mkdir (2)),
.\"O its owner is made the same as the file system user ID of the
.\"O creating process.
.RB ( open (2)
や
.BR mkdir (2)
などにより) 新しいファイルが作成されるとき、
その所有者は呼び出したプロセスのファイルシステム・ユーザ ID と
同じに設定される。
.\"O The group of the file depends on a range of factors,
.\"O including the type of file system,
.\"O the options used to mount the file system,
.\"O and whether or not the set-group-ID permission bit is enabled
.\"O on the parent directory.
そのファイルのグループはいくつかの要因により決定される。
その要因としては、
ファイルシステムの種類、そのファイルシステムのマウント時に
使用されたオプション、親ディレクトリで set-group-ID 許可ビットが
有効になっているどうか、がある。
.\"O If the file system supports the
.\"O .I "\-o\ grpid"
.\"O (or, synonymously
.\"O .IR "\-o\ bsdgroups" )
.\"O and
.\"O .I "\-o\ nogrpid"
.\"O (or, synonymously
.\"O .IR "\-o\ sysvgroups" )
.\"O .BR mount (8)
.\"O options, then the rules are as follows:
ファイルシステムが
.BR mount (8)
オプションの
.I "\-o\ grpid"
.RI ( "\-o\ bsdgroups"
も同義語) と
.I "\-o\ nogrpid"
.RI ( "\-o sysvgroups"
も同義語) に対応している場合、ルールは以下の通りとなる。
.IP * 2
.\"O If the file system is mounted with
.\"O .IR "\-o\ grpid" ,
.\"O then the group of a new file is made
.\"O the same as that of the parent directory.
ファイルシステムが
.I "\-o\ grpid"
付きでマウントされている場合、新しいファイルのグループは
親ディレクトリのグループと同じになる。
.IP *
.\"O If the file system is mounted with
.\"O .IR "\-o\ nogrpid"
.\"O and the set-group-ID bit is disabled on the parent directory,
.\"O then the group of a new file is made the same as the
.\"O process's file system GID.
ファイルシステムが
.I "\-o\ nogrpid"
付きでマウントされており、親ディレクトリでは set-group-ID ビットが
無効になっている場合、新しいファイルのグループは
プロセスのファイルシステム GID と同じになる。
.IP *
.\"O If the file system is mounted with
.\"O .IR "\-o\ nogrpid"
.\"O and the set-group-ID bit is enabled on the parent directory,
.\"O then the group of a new file is made
.\"O the same as that of the parent directory.
ファイルシステムが
.I "\-o\ nogrpid"
付きでマウントされており、親ディレクトリでは set-group-ID ビットが
有効になっている場合、新しいファイルのグループは
親ディレクトリのグループと同じになる。
.PP
.\"O As at Linux 2.6.25,
.\"O the
.\"O .IR "\-o\ grpid"
.\"O and
.\"O .IR "\-o\ nogrpid"
.\"O mount options are supported by ext2, ext3, ext4, and XFS.
.\"O File systems that don't support these mount options follow the
.\"O .IR "\-o\ nogrpid"
.\"O rules.
Linux 2.6.25 では、マウントオプション
.I "\-o\ grpid"
と
.I "\-o\ nogrpid"
に対応しているファイルシステムは
ext2, ext3, ext4, XFS である。
これらのマウントオプションに対応していないファイルシステムでは、
.I "\-o\ nogrpid"
に関するルールが適用される。
.PP
.\"O The
.\"O .BR chown ()
.\"O semantics are deliberately violated on NFS file systems
.\"O which have UID mapping enabled.
.\"O Additionally, the semantics of all system
.\"O calls which access the file contents are violated, because
.\"O .BR chown ()
.\"O may cause immediate access revocation on already open files.
.\"O Client side
.\"O caching may lead to a delay between the time where ownership have
.\"O been changed to allow access for a user and the time where the file can
.\"O actually be accessed by the user on other clients.
.BR chown ()
方式は UID マッピングを使用した
NFS ファイル・システムを侵害する。
さらにファイルの内容にアクセスする全てのシステム・コールを侵害する。
これは
.BR chown ()
が既にオープンされたファイルに対する
アクセスをただちに取り消すことによる。
クライアント側のキャッシュにより所有権が変更されて
ユーザーのアクセスが許した時点と、実際に他のクライアントでユーザーによって
ファイルにアクセスできる時点との間に時間差があるかもしれない。

.\"O In versions of Linux prior to 2.1.81 (and distinct from 2.1.46),
.\"O .BR chown ()
.\"O did not follow symbolic links.
Linux の 2.1.81 より前のバージョン (特に 2.1.46 以前) では、
.BR chown ()
はシンボリック・リンクを追跡しない。
.\"O Since Linux 2.1.81,
.\"O .BR chown ()
.\"O does follow symbolic links, and there is a new system call
.\"O .BR lchown ()
.\"O that does not follow symbolic links.
Linux 2.1.81 以降では
.BR chown ()
はシンボリック・リンクを追跡し、新たなシステム・コール
.BR lchown ()
はシンボリック・リンクを追跡しない。
.\"O Since Linux 2.1.86, this new call (that has the same semantics
.\"O as the old
.\"O .BR chown ())
.\"O has got the same syscall number, and
.\"O .BR chown ()
.\"O got the newly introduced number.
Linux 2.1.86 以降ではこの新しいコール (古い
.BR chown ()
と全く同じ動作を行なう) は同じシステムコール番号を持ち
.BR chown ()
は新しく導入された番号を持つ。
.\"O .SH EXAMPLE
.SH 例
.PP
.\"O The following program changes the ownership of the file named in
.\"O its second command-line argument to the value specified in its
.\"O first command-line argument.
.\"O The new owner can be specified either as a numeric user ID,
.\"O or as a username (which is converted to a user ID by using
.\"O .BR getpwnam (3)
.\"O to perform a lookup in the system password file).
以下のプログラムは、
二つ目のコマンドライン引き数で指定された名前のファイルの所有者を、
一つ目のコマンドライン引き数で指定された値に変更する。
新しい所有者は、数字のユーザ ID かユーザ名のいずれかで指定できる
(ユーザ名で指定した場合には、
.BR getpwnam (3)
を使ってシステムのパスワードファイルの検索が行われ、
ユーザ ID への変換が行われる)。
.nf

#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;

    if (argc != 3 || argv[1][0] == \(aq\\0\(aq) {
        fprintf(stderr, "%s <owner> <file>\\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    uid = strtol(argv[1], &endptr, 10);  /* Allow a numeric string */

    if (*endptr != \(aq\\0\(aq) {         /* Was not pure numeric string */
        pwd = getpwnam(argv[1]);   /* Try getting UID for username */
        if (pwd == NULL) {
            perror("getpwnam");
            exit(EXIT_FAILURE);
        }

        uid = pwd\->pw_uid;
    }

    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR chmod (2),
.BR fchownat (2),
.BR flock (2),
.BR path_resolution (7),
.BR symlink (7)
