.\" Copyright (c) 2007 Silicon Graphics, Inc. All Rights Reserved
.\" Written by Dave Chinner <dgc@sgi.com>
.\"
.\" %%%LICENSE_START(GPLv2_ONELINE)
.\" May be distributed as per GNU General Public License version 2.
.\" %%%LICENSE_END
.\"
.\" 2011-09-19: Added FALLOC_FL_PUNCH_HOLE
.\" 2011-09-19: Substantial restructuring of the page
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2007  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2007-10-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.66
.\" Updated 2008-10-13, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.11
.\" Updated 2013-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-07, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-22, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH FALLOCATE 2 2014\-04\-17 Linux "Linux Programmer's Manual"
.SH 名前
fallocate \- ファイル空間の操作
.SH 書式
.nf
\fB#define _GNU_SOURCE\fP             /* feature_test_macros(7) 参照 */
\fB#include <fcntl.h>\fP

\fBint fallocate(int \fP\fIfd\fP\fB, int \fP\fImode\fP\fB, off_t \fP\fIoffset\fP\fB, off_t \fP\fIlen\fP\fB);\fP
.fi
.SH 説明
このシステムコールは、移植性のない、Linux 固有のシステムコールである。 移植性が必要な場合は、ファイルに対してディスク空間を確実に確保するために、
POSIX.1 で規定された方法である \fBposix_fallocate\fP(3)  を使うこと。

\fBfallocate\fP()  を使うと、 \fIfd\fP が参照するファイルに割り当てられたディスク空間を直接操作できる。 操作対象は、
\fIoffset\fP から始まる長さ \fIlen\fP バイトの領域である。

\fImode\fP 引き数は、指定された領域に対して実行する操作を指定する。
サポートされている操作の詳細は以下のサブセクションで説明する。
.SS ディスク領域の割り当て
\fBfallocate\fP() のデフォルトの動作 (つまり \fImode\fP が 0 の場合) は、 \fIoffset\fP と \fIlen\fP
で指定された範囲のディスク領域の割り当てを行う。 \fIoffset\fP+\fIlen\fP がファイルサイズよりも大きかった場合、 (\fBstat\fP(2)
で報告される) ファイルサイズが変更される。 \fIoffset\fP と \fIlen\fP で指定される範囲のサブ領域で、
呼び出し前にデータを保持していなかった場合、そのサブ領域は 0 で初期化される。 このデフォルトの動作は、 ライブラリ関数
\fBposix_fallocate\fP(3) の動作と非常に似ている。 これは、 このシステムコールが \fBposix_fallocate\fP(3)
を最適に実装する手段を提供することを目的としているからである。

呼び出しが成功した場合、
\fIoffset\fP と \fIlen\fP で指定された範囲へのそれ以降の書き込みでは、
ディスクの領域不足での書き込み失敗が起こらないことが保証される。

\fBFALLOC_FL_KEEP_SIZE\fP フラグが \fImode\fP に指定された場合、このシステムコール
の動作は似ているが、 \fIoffset\fP+\fIlen\fP がファイルサイズよりも大きい場合で
あってもファイルサイズは変更されない点が異なる。この場合のファイルの末尾
よりも後ろの前もって割り当てられた 0 で埋められたブロックは、ファイルへの
追記を最適化したい場合に役に立つ。
.PP
割り当てはブロックサイズ単位で行われるため、 \fBfallocate\fP() は指定されたより
も大きなディスク領域を割り当てることがある。
.SS ファイル空間の割り当て解除
\fBFALLOC_FL_PUNCH_HOLE\fP フラグ (Linux 2.6.38 以降で利用可能) を \fImode\fP に指定すると、
\fIoffset\fP で始まる \fIlen\fP バイトの領域の空間を解放する (ホールを作成する)。 指定された範囲のうち、
部分的に使用しているファイルシステムブロックは 0 で埋められ、 全体を使用しているファイルシステムブロックはそのファイルから削除される。
呼び出しが成功すると、 これ以降のこの範囲からの読み出しでは 0 を返す。

\fBFALLOC_FL_PUNCH_HOLE\fP フラグは \fBFALLOC_FL_KEEP_SIZE\fP と論理和 (OR) をとって \fImode\fP
に指定しなければならない。 つまり、 ファイル末尾の punch off を行った場合でも、 (\fBstat\fP(2) で報告される)
ファイルサイズが変化しない。

すべてのファイルシステムで \fBFALLOC_FL_PUNCH_HOLE\fP がサポートされているわけではない。
ファイルシステムがこの操作をサポートしていない場合は、 エラーが返る。 この操作は少なくとも以下のファイルシステムでサポートされている。
.IP * 3
XFS (Linux 2.6.38 以降)
.IP *
.\" commit a4bb6b64e39abc0e41ca077725f2a72c868e7622
ext4 (Linux 3.0 以降)
.IP *
Btrfs (Linux 3.7 以降)
.IP *
.\" commit 83e4fa9c16e4af7122e31be3eca5d57881d236fe
tmpfs (Linux 3.5 以降)
.SS "Collapsing file space"
.\" commit 00f5e61998dd17f5375d9dfc01331f104b83f841
Specifying the \fBFALLOC_FL_COLLAPSE_RANGE\fP flag (available since Linux 3.15)
in \fImode\fP removes a byte range from a file, without leaving a hole.  The
byte range to be collapsed starts at \fIoffset\fP and continues for \fIlen\fP
bytes.  At the completion of the operation, the contents of the file
starting at the location \fIoffset+len\fP will be appended at the location
\fIoffset\fP, and the file will be \fIlen\fP bytes smaller.

A filesystem may place limitations on the granularity of the operation, in
order to ensure efficient implementation.  Typically, \fIoffset\fP and \fIlen\fP
must be a multiple of the filesystem logical block size, which varies
according to the filesystem type and configuration.  If a filesystem has
such a requirement, \fBfallocate\fP()  will fail with the error \fBEINVAL\fP if
this requirement is violated.

If the region specified by \fIoffset\fP plus \fIlen\fP reaches or passes the end
of file, an error is returned; instead, use \fBftruncate\fP(2)  to truncate a
file.

No other flags may be specified in \fImode\fP in conjunction with
\fBFALLOC_FL_COLLAPSE_RANGE\fP.

.\" commit 9eb79482a97152930b113b51dff530aba9e28c8e
.\" commit e1d8fb88a64c1f8094b9f6c3b6d2d9e6719c970d
As at Linux 3.15, \fBFALLOC_FL_COLLAPSE_RANGE\fP is supported by ext4 (only for
extent\-based files)  and XFS.
.SH 返り値
成功の場合、 \fBfallocate\fP() は 0 を返す。 エラーの場合、\-1 を返し、 \fIerror\fP にエラーを示す値を設定する。
.SH エラー
.TP 
\fBEBADF\fP
\fIfd\fP が有効なファイルディスクリプタでないか、 書き込み用としてオープンされていない。
.TP 
\fBEFBIG\fP
\fIoffset + len\fP がファイルサイズの最大値よりも大きい。
.TP 
\fBEINTR\fP
実行中にシグナルが捕捉された。
.TP 
\fBEINVAL\fP
.\" FIXME (raise a kernel bug) Probably the len==0 case should be
.\" a no-op, rather than an error. That would be consistent with
.\" similar APIs for the len==0 case.
.\" See "Re: [PATCH] fallocate.2: add FALLOC_FL_PUNCH_HOLE flag definition"
.\" 21 Sep 2012
.\" http://thread.gmane.org/gmane.linux.file-systems/48331/focus=1193526
\fIoffset\fP が 0 未満だったか、 \fIlen\fP が 0 以下だった。
.TP 
\fBEINVAL\fP
\fImode\fP is \fBFALLOC_FL_COLLAPSE_RANGE\fP and the range specified by \fIoffset\fP
plus \fIlen\fP reaches or passes the end of the file.
.TP 
\fBEINVAL\fP
\fImode\fP is \fBFALLOC_FL_COLLAPSE_RANGE\fP, but either \fIoffset\fP or \fIlen\fP is
not a multiple of the filesystem block size.
.TP 
\fBEINVAL\fP
mode contains both \fBFALLOC_FL_COLLAPSE_RANGE\fP and other flags; no other
flags are permitted with \fBFALLOC_FL_COLLAPSE_RANGE\fP.
.TP  EINVAL
\fImode\fP
.\" There was a inconsistency in 3.15-rc1, that should be resolved so that all
.\" filesystems use this error for this case. (Tytso says ex4 will change.)
.\" http://thread.gmane.org/gmane.comp.file-systems.xfs.general/60485/focus=5521
.\" From: Michael Kerrisk (man-pages <mtk.manpages@...>
.\" Subject: Re: [PATCH v5 10/10] manpage: update FALLOC_FL_COLLAPSE_RANGE flag in fallocate
.\" Newsgroups: gmane.linux.man, gmane.linux.file-systems
.\" Date: 2014-04-17 13:40:05 GMT
is \fBFALLOC_FL_COLLAPSE_RANGE\fP, but the file referred to by \fIfd\fP is not a
regular file.
.TP 
\fBEIO\fP
ファイルシステムとの読み書き中に入出力エラーが発生した。
.TP 
\fBENODEV\fP
\fIfd\fP が通常のファイルかディレクトリを参照していない (\fIfd\fP がパイプや FIFO を参照している場合、別のエラーが発生する)。
.TP 
\fBENOSPC\fP
\fIfd\fP が参照するファイルを含むデバイスに十分な空き領域がない。
.TP 
\fBENOSYS\fP
このカーネルでは \fBfallocate\fP() は実装されていない。
.TP 
\fBEOPNOTSUPP\fP
\fIfd\fP が参照するファイルを含むファイルシステムが 指定された操作を
サポートしていない。 \fIfd\fP が参照するファイルを含むファイルシステムが
\fImode\fP をサポートしていない。
.TP 
\fBEPERM\fP
The file referred to by \fIfd\fP is marked immutable (see \fBchattr\fP(1)).  Or:
\fImode\fP specifies \fBFALLOC_FL_PUNCH_HOLE\fP or \fBFALLOC_FL_COLLAPSE_RANGE\fP and
the file referred to by \fIfd\fP is marked append\-only (see \fBchattr\fP(1)).
.TP 
\fBESPIPE\fP
\fIfd\fP がパイプか FIFO を参照している。
.TP 
\fBETXTBSY\fP
\fImode\fP specifies \fBFALLOC_FL_COLLAPSE_RANGE\fP, but the file referred to by
\fIfd\fP is currently being executed.
.SH バージョン
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=14964
\fBfallocate\fP()  はカーネル 2.6.23 以降の Linux で利用可能である。 glibc での対応はバージョン 3.10
以降で行われている。 \fBFALLOC_FL_*\fP が glibc のヘッダファイルで定義されているのは、バージョン 2.18 以降のみである。
.SH 準拠
\fBfallocate\fP()  は Linux 固有である。
.SH 関連項目
\fBfallocate\fP(1), \fBftruncate\fP(2), \fBposix_fadvise\fP(3), \fBposix_fallocate\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.65 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
