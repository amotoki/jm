.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt;
.\"                          1993,1995 Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 00:35:52 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jun  4 12:21:13 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Thu Mar  3 09:49:35 2005 by Michael Haardt <michael@moria.de>
.\" 2007-03-25, mtk, added various text to DESCRIPTION.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Fri Dec 12 00:15:52 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified Thu Feb 10 07:23:59 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Fri Apr 22 03:21:04 JST 2005 by Yuichi SATO
.\" Updated 2007-05-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.44
.\" Updated 2009-04-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.20
.\"
.\"WORD:	directory		ディレクトリ
.\"WORD:	hard link		ハード・リンク
.\"WORD:	overwrite		上書き(overwrite)
.\"WORD:	process			プロセス
.\"WORD:	crash			クラッシュ
.\"WORD:	symbolic link		シンボリック・リンク
.\"WORD:	working directory	ワーキング・ディレクトリ
.\"WORD:	root directory		ルート・ディレクトリ
.\"WORD:	effective uid		実効ユーザーID
.\"WORD:	sticky bit		スティッキー・ビット
.\"WORD:	memory			メモリ
.\"WORD:	read-only		読み込み専用
.\"WORD:	uid			ユーザーID
.\"WORD:	dangling symbolic link	壊れたシンボリック・リンク
.\"WORD:	server			サーバー
.\"
.TH RENAME 2 2009-03-30 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O rename \- change the name or location of a file
rename \- ファイルの名前や位置を変更する
.\"O .SH SYNOPSIS
.SH 書式
.B #include <stdio.h>
.sp
.BI "int rename(const char *" oldpath ", const char *" newpath );
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR rename ()
.\"O renames a file, moving it between directories if required.
.BR rename ()
はファイルの名前を変更し、必要ならばディレクトリ間の移動を行なう。
.\"O Any other hard links to the file (as created using
.\"O .BR link (2))
.\"O are unaffected.
そのファイルに対する
.RB ( link (2)
を使用して作られた) 他のハードリンク (hard link) には影響はない。
.\"O Open file descriptors for
.\"O .I oldpath
.\"O are also unaffected.
オープン済の
.I oldpath
に対するファイルディスクリプタにも影響はない。

.\"O If
.\"O .I newpath
.\"O already exists it will be atomically replaced (subject to
.\"O a few conditions; see ERRORS below), so that there is
.\"O no point at which another process attempting to access
.\"O .I newpath
.\"O will find it missing.
.I newpath
が既に存在する場合、それは不可分操作で (atomically) 置き換えられる
(ただし、いくつかの条件がある; 以下の「エラー」のセクションを参照)。
そのため、
.I newpath
にアクセスしようとしている他のプロセスがファイルを見失うことはない
(訳註: 常にアクセス可能である)。

.\"O If
.\"O .I oldpath
.\"O and
.\"O .I newpath
.\"O are existing hard links referring to the same file, then
.\"O .BR rename ()
.\"O does nothing, and returns a success status.
.I oldpath
と
.I newpath
がどちらも既存のハードリンクで、同じファイルを参照している場合、
.BR rename ()
は何も行わず、ステータスとして成功を返す。

.\"O If
.\"O .I newpath
.\"O exists but the operation fails for some reason
.\"O .BR rename ()
.\"O guarantees to leave an instance of
.\"O .I newpath
.\"O in place.
.I newpath
が存在し、何らかの理由で操作が失敗した場合、
.BR rename ()
は
.I newpath
の実体を元のまま残すことを保証する。

.\"O .I oldpath
.\"O can specify a directory.
.\"O In this case,
.\"O .I newpath
.\"O must either not exist, or it must specify an empty directory.
.I oldpath
にはディレクトリを指定することもできる。
この場合、
.I newpath
は存在しないか、空のディレクトリでなければならない。

.\"O However, when overwriting there will probably be a window in which
.\"O both
.\"O .I oldpath
.\"O and
.\"O .I newpath
.\"O refer to the file being renamed.
一方で、上書きを行なう場合は、rename が行なわれるファイルを
.I oldpath
と
.I newpath
の両方で参照できる瞬間がおそらく存在する。

.\"O If
.\"O .I oldpath
.\"O refers to a symbolic link the link is renamed; if
.\"O .I newpath
.\"O refers to a symbolic link the link will be overwritten.
.I oldpath
がシンボリック・リンク (symbolic link) を参照している場合は、
リンクの名前が変更される。
また、
.I newpath
がシンボリック・リンクを参照している場合は、リンクが上書きされる。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success, zero is returned.
.\"O On error, \-1 is returned, and
.\"O .I errno
.\"O is set appropriately.
成功した場合は 0 を返す。エラーの場合は \-1 を返し、
.I errno
を適切に設定する。
.\"O .SH ERRORS
.SH エラー
.TP
.B EACCES
.\"O Write permission is denied for the directory containing
.\"O .I oldpath
.\"O or
.\"O .IR newpath ,
.\"O or, search permission is denied for one of the directories
.\"O in the path prefix of
.\"O .I oldpath
.\"O or
.\"O .IR newpath ,
.\"O or
.\"O .I oldpath
.\"O is a directory and does not allow write permission (needed to update
.\"O the
.\"O .I ..
.\"O entry).
.\"O (See also
.\"O .BR path_resolution (7).)
.IR oldpath " または " newpath
を含んでいるディレクトリの書き込み許可がない。
または、
.IR oldpath " または " newpath
のディレクトリ部分のどれかに検索許可がない。
または、
.I oldpath
がディレクトリで
.RI ( ..
エントリを更新するのに必要な) 書き込み許可がない
.RB ( path_resolution (7)
も参照)。
.TP
.B EBUSY
.\"O The rename fails because
.\"O .IR oldpath " or " newpath
.\"O is a directory that is in use by some process (perhaps as
.\"O current working directory, or as root directory, or because
.\"O it was open for reading) or is in use by the system
.\"O (for example as mount point), while the system considers
.\"O this an error.
.IR oldpath " または " newpath
がディレクトリで、何らかのプロセスが使用中
(多分、カレント・ワーキング・ディレクトリか、ルートディレクトリか、
読み込みのためにオープンされているかでろう)
もしくは、システムが使用中 (例えばマウント・ポイントである)
であり、システムがこれをエラーであると判断したために rename が失敗した。
.\"O (Note that there is no requirement to return
.\"O .B EBUSY
.\"O in such
.\"O cases \(em there is nothing wrong with doing the rename anyway \(em
.\"O but it is allowed to return
.\"O .B EBUSY
.\"O if the system cannot otherwise
.\"O handle such situations.)
(このような場合に
.B EBUSY
を返すことは規格では要求されていない点に注意すること。
このような場合に、rename をとにかく実行してみるのは何の問題もない。
ただし、そのような状況で、システムが他に返すエラーがない場合には
.B EBUSY
を返すことが許されている。)
.TP
.B EFAULT
.\"O .IR oldpath " or " newpath " points outside your accessible address space."
.IR oldpath " または " newpath
がアクセス可能なアドレス空間の外を指している。
.TP
.B EINVAL
.\"O The new pathname contained a path prefix of the old, or, more generally,
.\"O an attempt was made to make a directory a subdirectory of itself.
.IR newpath " が " oldpath
のパス部分を含んでいる。ディレクトリを自分自身のサブディレクトリに
変更しようとした場合がほとんどである。
.TP
.B EISDIR
.\"O .I newpath
.\"O is an existing directory, but
.\"O .I oldpath
.\"O is not a directory.
.I newpath
は存在しているディレクトリであるが、
.I oldpath
はディレクトリでない。
.TP
.B ELOOP
.\"O Too many symbolic links were encountered in resolving
.\"O .IR oldpath " or " newpath .
.IR oldpath " または " newpath
を解決する際に遭遇したシンボリック・リンクが多過ぎる。
.TP
.B EMLINK
.\"O .I oldpath
.\"O already has the maximum number of links to it, or
.\"O it was a directory and the directory containing
.\"O .I newpath
.\"O has the maximum number of links.
.I oldpath
は既に最大数までのリンクを持っているか、それがディレクトリで
.I newpath
を含んでいるディレクトリが最大数までのリンクを持っている。
.TP
.B ENAMETOOLONG
.\"O .IR oldpath " or " newpath " was too long."
.IR oldpath " または " newpath " が長過ぎる。"
.TP
.B ENOENT
.\"O The link named by
.\"O .I oldpath
.\"O does not exist;
.\"O or, a directory component in
.\"O .I newpath
.\"O does not exist;
.\"O or,
.\"O .I oldpath
.\"O or
.\"O .I newpath
.\"O is an empty string.
.I oldpath
という名前のリンクが存在しない。
または、
.I newpath
というディレクトリが存在しない。
または、
.I oldpath
か
.I newpath
が空の文字列である。
.TP
.B ENOMEM
.\"O Insufficient kernel memory was available.
カーネルに十分なメモリが存在しない。
.TP
.B ENOSPC
.\"O The device containing the file has no room for the new directory
.\"O entry.
ファイルを含んでいるデバイスに新しいディレクトリ・エントリを
作成するための空きがない。
.TP
.B ENOTDIR
.\"O A component used as a directory in
.\"O .IR oldpath " or " newpath
.\"O is not, in fact, a directory.
.IR oldpath " か " newpath
に含まれているディレクトリ部分が
実際にはディレクトリでない。
.\"O Or,
.\"O .I oldpath
.\"O is a directory, and
.\"O .I newpath
.\"O exists but is not a directory.
または
.I oldpath
がディレクトリで、
.I newpath
が存在してディレクトリでない。
.TP
.\"O .BR ENOTEMPTY " or " EEXIST
.B ENOTEMPTY " または " EEXIST
.\"O .I newpath
.\"O is a nonempty directory, that is, contains entries other than "." and "..".
.I newpath
が空でないディレクトリである。すなわち "." と ".." 以外を含んでいる。
.TP
.\"O .BR EPERM " or " EACCES
.BR EPERM " または " EACCES
.\"O The directory containing
.\"O .I oldpath
.\"O has the sticky bit
.\"O .RB ( S_ISVTX )
.\"O set and the process's effective user ID is neither
.\"O the user ID of the file to be deleted nor that of the directory
.\"O containing it, and the process is not privileged
.\"O (Linux: does not have the
.\"O .B CAP_FOWNER
.\"O capability);
.I oldpath
のあるディレクトリにスティッキー・ビット (sticky bit)
.RB ( S_ISVTX )
が設定されており、
プロセスの実効ユーザー ID が
削除しようとするファイルのユーザー ID と
そのファイルを含むディレクトリのユーザー ID のいずれとも一致せず、かつ
プロセスに特権がない (Linux では
.B CAP_FOWNER
ケーパビリティ (capability) がない)。
.\"O or
.\"O .I newpath
.\"O is an existing file and the directory containing it has the sticky bit set
.\"O and the process's effective user ID is neither the user ID of the file
.\"O to be replaced nor that of the directory containing it,
.\"O and the process is not privileged
.\"O (Linux: does not have the
.\"O .B CAP_FOWNER
.\"O capability);
または、
.I newpath
がすでに存在するファイルで、親ディレクトリにスティッキービットが設定されており、
プロセスの実効ユーザー ID が
置き換えようとするファイルのユーザー ID と
そのファイルを含むディレクトリのユーザー ID のいずれとも一致せず、かつ
プロセスに特権がない (Linux では
.B CAP_FOWNER
ケーパビリティがない)。
.\"O or the file system containing
.\"O .I pathname
.\"O does not support renaming of the type requested.
または
.IR oldpath " と " newpath
が存在するファイル・システムが、要求された種類の名前の変更を
サポートしていない。
.TP
.B EROFS
.\"O The file is on a read-only file system.
ファイルが読み込み専用 (read-only) ファイル・システムにある。
.TP
.B EXDEV
.\"O .IR oldpath " and " newpath
.\"O are not on the same mounted file system.
.IR oldpath " と " newpath
が同じマウントされたファイル・システムに存在しない。
.\"O (Linux permits a file system to be mounted at multiple points, but
.\"O .BR rename ()
.\"O does not work across different mount points,
.\"O even if the same file system is mounted on both.)
(Linux は 1 つのファイル・システムを複数のマウント位置に
マウントすることを許可している。
しかし
.BR rename ()
は、たとえ同じファイル・システムであっても、
別々のマウント位置を跨いでは動作しない。)
.\"O .SH "CONFORMING TO"
.SH 準拠
4.3BSD, C89, C99, POSIX.1-2001.
.\"O .SH BUGS
.SH バグ
.\"O On NFS file systems, you can not assume that if the operation
.\"O failed the file was not renamed.
.\"O If the server does the rename operation
.\"O and then crashes, the retransmitted RPC which will be processed when the
.\"O server is up again causes a failure.
.\"O The application is expected to
.\"O deal with this.
.\"O See
.\"O .BR link (2)
.\"O for a similar problem.
NFS ファイル・システムでは、操作が失敗したからといって、
ファイルの名前が変更できなかったと決めてかかることはできない。
サーバが rename 操作を終えてからクラッシュした場合、
サーバが再び立ち上がったときに、
再送信された RPC が処理されるが、これは失敗となる。
アプリケーションはこの問題を正しく取り扱うことが期待されている。
同様の問題について
.BR link (2)
にも書かれている。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR mv (1),
.BR chmod (2),
.BR link (2),
.BR renameat (2),
.BR symlink (2),
.BR unlink (2),
.BR path_resolution (7),
.BR symlink (7)
