.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified Wed Jul 21 19:52:58 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:40:38 1994 by Rik Faith <faith@cs.unc.edu>
.\"
.\" Japanese Version Copyright (c) 1996 TABATA Tomohira
.\"         all rights reserved.
.\" Translated Wed Jun 26 19:12:54 JST 1996
.\"         by TABATA Tomohira <loba@k2.t.u-tokyo.ac.jp>
.\" Modified Sat Dec 13 23:43:56 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified Wed May 19 01:55:29 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>, LDP v1.66
.\" Updated & Modified Tue Jan  2 09:09:47 JST 2007 by Yuichi SATO, LDP v2.43
.\" Updated 2008-08-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.TH BRK 2 2010-09-20 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O brk, sbrk \- change data segment size
brk, sbrk \- データ・セグメントのサイズの変更する
.\"O .SH SYNOPSIS
.SH 書式
.B #include <unistd.h>
.sp
.BI "int brk(void *" addr );
.sp
.BI "void *sbrk(intptr_t " increment );
.sp
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR brk (),
.BR sbrk ():
.ad l
.RS 4
.PD 0
.TP 4
.\"O Since glibc 2.12:
glibc 2.12 以降:
.nf
_BSD_SOURCE || _SVID_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.fi
.TP 4
.\"O Before glibc 2.12:
glibc 2.12 より前:
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.PD
.RE
.ad b
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR brk ()
.\"O and
.\"O .BR sbrk ()
.\"O change the location of the
.\"O .IR "program break" ,
.\"O which defines the end of the process's data segment
.\"O (i.e., the program break is the first location after the end of the
.\"O uninitialized data segment).
.\"O Increasing the program break has the effect of
.\"O allocating memory to the process;
.\"O decreasing the break deallocates memory.
.BR brk ()
と
.BR sbrk ()
は
.I "プログラム・ブレーク (program break)"
の場所を変更する。
プログラム・ブレークはプロセスのデータ・セグメント (data segment) の
末尾を示す (プログラム・ブレークは、初期化されていない
データ・セグメントの末尾の直後の場所となる)。
プログラム・ブレークを増やすということは、そのプロセスへの
メモリを割り当てる効果があり、
プログラム・ブレークを減らすということは、メモリを解放する
ということである。

.\"O .BR brk ()
.\"O sets the end of the data segment to the value specified by
.\"O .IR addr ,
.\"O when that value is reasonable, the system has enough memory,
.\"O and the process does not exceed its maximum data size (see
.\"O .BR setrlimit (2)).
.BR brk ()
は、データ・セグメントの末尾を
.I addr
で指定した値に設定する。
設定が行われるのは、指定した値が有効で、
システムに十分なメモリがあり、
プロセスのデータサイズの最大値を超えていない場合である
.RB ( setrlimit (2)
を参照)。

.\"O .BR sbrk ()
.\"O increments the program's data space by
.\"O .I increment
.\"O bytes.
.BR sbrk ()
は、プログラムのデータ空間を
.I increment
バイトだけ増やす。
.\"O Calling
.\"O .BR sbrk ()
.\"O with an
.\"O .I increment
.\"O of 0 can be used to find the current location of the program break.
.I increment
を 0 にして
.BR sbrk ()
を呼び出すことで、プログラムの現在のブレーク (break) 場所を知ることができる。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success,
.\"O .BR brk ()
.\"O returns zero.
成功した場合、
.BR brk ()
は 0 を返す。
.\"O On error, \-1 is returned, and
.\"O .I errno
.\"O is set to
.\"O .BR ENOMEM .
.\"O (But see \fILINUX NOTES\fP below.)
エラーの場合には、\-1 を返し、
.I errno
に
.B ENOMEM
を設定する
(ただし「LINUX での注意」を参照すること)。

.\"O On success,
.\"O .BR sbrk ()
.\"O returns the previous program break.
.\"O (If the break was increased,
.\"O then this value is a pointer to the start of the newly allocated memory).
.\"O On error,
.\"O .I "(void\ *)\ \-1"
.\"O is returned, and
.\"O .I errno
.\"O is set to
.\"O .BR ENOMEM .
成功した場合、
.BR sbrk ()
は変更前のプログラム・ブレークを返す
(プログラム・ブレークが増やされた場合、この値は
新しく割り当てられたメモリの先頭を指すポインタとなる)。
エラーの場合には、
.I "(void\ *)\ \-1"
を返し、
.I errno
に
.B ENOMEM
を設定する。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O 4.3BSD; SUSv1, marked LEGACY in SUSv2, removed in POSIX.1-2001.
4.3BSD, SUSv1.
SUSv2 では「過去の名残 (LEGACY)」と位置付けられており、
POSIX.1-2001 で削除された。
.\"O .\"
.\"O .\" .BR brk ()
.\"O .\" and
.\"O .\" .BR sbrk ()
.\"O .\" are not defined in the C Standard and are deliberately excluded from the
.\"O .\" POSIX.1-1990 standard (see paragraphs B.1.1.1.3 and B.8.3.3).
.\" .BR brk ()
.\" と
.\" .BR sbrk ()
.\" は C 規格 (C Standard) には定義されていない。
.\" また POSIX.1 規格からは意図的に除外されている (段落 B.1.1.1.3, B.8.3.3 参照)。
.\"O .SH NOTES
.SH 注意
.\"O Avoid using
.\"O .BR brk ()
.\"O and
.\"O .BR sbrk ():
.\"O the
.\"O .BR malloc (3)
.\"O memory allocation package is the
.\"O portable and comfortable way of allocating memory.
.BR brk ()
や
.BR sbrk ()
を使用するのは避けること。
.BR malloc (3)
メモリ割り当てパッケージの方が、移植性が高く、
使いやすいメモリ割り当て方法を提供している。

.\"O Various systems use various types for the argument of
.\"O .BR sbrk ().
いろいろなシステムにおいて、
.BR sbrk ()
の引き数に様々な型が使われている。
.\"O Common are \fIint\fP, \fIssize_t\fP, \fIptrdiff_t\fP, \fIintptr_t\fP.
一般的なのは \fIint\fP, \fIssize_t\fP, \fIptrdiff_t\fP, \fIintptr_t\fP である。
.\"O .\" One sees
.\"O .\" \fIint\fP (e.g., XPGv4, DU 4.0, HP-UX 11, FreeBSD 4.0, OpenBSD 3.2),
.\"O .\" \fIssize_t\fP (OSF1 2.0, Irix 5.3, 6.5),
.\"O .\" \fIptrdiff_t\fP (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\"O .\" \fIintptr_t\fP (e.g., XPGv5, AIX, SunOS 5.8, 5.9, FreeBSD 4.7, NetBSD 1.6,
.\"O .\" Tru64 5.1, glibc2.2).
.\" \fIint\fP (たとえば XPGv4, DU 4.0, HP-UX 11, FreeBSD 4.0, OpenBSD 3.2),
.\" \fIssize_t\fP (OSF1 2.0, Irix 5.3, 6.5),
.\" \fIptrdiff_t\fP (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\" \fIintptr_t\fP (たとえば XPGv5, AIX, SunOS 5.8, 5.9, FreeBSD 4.7,
.\" NetBSD 1.6, Tru64 5.1, glibc2.2).
.\" というのが分かるだろう。
.\"O .SS Linux Notes
.SS Linux での注意
.\"O The return value described above for
.\"O .BR brk ()
.\"O is the behavior provided by the glibc wrapper function for the Linux
.\"O .BR brk ()
.\"O system call.
上で説明した
.BR brk ()
の返り値についての動作は、
Linux の
.BR brk ()
システムコールをラップする glibc の関数によるものである。
.\"O (On most other implementations, the return value from
.\"O .BR brk ()
.\"O is the same; this return value was also specified in SUSv2.)
(その他の多くの実装でも、
.BR brk ()
の返り値はこれと同じである。
この返り値は SUSv2 でも規定されている。)
.\"O However,
.\"O the actual Linux system call returns the new program break on success.
しかし、実際の Linux システムコールは、成功した場合、
プログラムの新しいブレークを返す。
.\"O On failure, the system call returns the current break.
失敗した場合、このシステムコールは現在のブレークを返す。
.\"O The glibc wrapper function does some work
.\"O (i.e., checks whether the new break is less than
.\"O .IR addr )
.\"O to provide the 0 and \-1 return values described above.
glibc ラッパー関数は同様の働きをし
(すなわち、新しいブレークが
.I addr
より小さいかどうかをチェックし)、
上で説明した 0 と \-1 という返り値を返す。

.\"O On Linux,
.\"O .BR sbrk ()
.\"O is implemented as a library function that uses the
.\"O .BR brk ()
.\"O system call, and does some internal bookkeeping so that it can
.\"O return the old break value.
Linux では
.BR sbrk ()
は
.BR brk ()
システムコールを使うライブラリ関数として実装されており、
以前のブレークの値を返すことができるように内部で調整が行われている。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR execve (2),
.BR getrlimit (2),
.BR end (3),
.BR malloc (3)
