.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\" and Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-28, Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-11-28, Giorgio Ciucci <giorgio@crcc.it>
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-02-18, Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-05, 2004-05-27, 2004-06-17,
.\"    Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-11, aeb
.\" Modified, Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Updated shmid_ds structure definitions
.\"	Added information on SHM_DEST and SHM_LOCKED flags
.\"	Noted that CAP_IPC_LOCK is not required for SHM_UNLOCK
.\"		since kernel 2.6.9
.\" Modified, 2004-11-25, mtk, notes on 2.6.9 RLIMIT_MEMLOCK changes
.\" 2005-04-25, mtk -- noted aberrant Linux behavior w.r.t. new
.\"	attaches to a segment that has already been marked for deletion.
.\" 2005-08-02, mtk: Added IPC_INFO, SHM_INFO, SHM_STAT descriptions.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-03-01, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2001-06-13, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2005-01-05, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2005-10-08, Akihiro MOTOKI
.\" Updated 2006-07-21, Akihiro MOTOKI, LDP v2.36
.\"
.\"WORD:	shared memory		共有メモリ
.\"WORD:	segment			セグメント
.\"WORD:	owner			所有者
.\"WORD:	group			グループ
.\"WORD:	creator			作成者
.\"WORD:	super-user		スーパー・ユーザー
.\"WORD:	detach			分離
.\"WORD:	attach			付加
.\"WORD:	swap			スワップ
.\"WORD:	identifier		識別子
.\"WORD:	member			メンバー
.\"WORD:	feature test macro	機能検査マクロ
.\"
.TH SHMCTL 2 2008-08-07 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O shmctl \- shared memory control
shmctl \- 共有メモリ (shared memory) を制御する
.\"O .SH SYNOPSIS
.SH 書式
.ad l
.B #include <sys/ipc.h>
.br
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR shmctl ()
.\"O performs the control operation specified by
.\"O .I cmd
.\"O on the shared memory segment whose identifier is given in
.\"O .IR shmid .
.BR shmctl ()
は、識別子が
.I shmid
の共有メモリ・セグメントに対して
.I cmd
で指示した制御命令を実行する。
.PP
.\"O The
.\"O .I buf
.\"O argument is a pointer to a \fIshmid_ds\fP structure,
.\"O defined in \fI<sys/shm.h>\fP as follows:
.I buf
引き数は、 \fIshmid_ds\fP 構造体へのポインタである。
この構造体は \fI<sys/shm.h>\fP で以下のように定義されている
.PP
.in +4n
.nf
struct shmid_ds {
.\"O     struct ipc_perm shm_perm;    /* Ownership and permissions */
    struct ipc_perm shm_perm;    /* 所有権と許可 */
.\"O     size_t          shm_segsz;   /* Size of segment (bytes) */
    size_t          shm_segsz;   /* セグメントのサイズ (バイト) */
.\"O     time_t          shm_atime;   /* Last attach time */
    time_t          shm_atime;   /* 最後の付加 (attach) の時刻 */
.\"O     time_t          shm_dtime;   /* Last detach time */
    time_t          shm_dtime;   /* 最後の分離 (detach) の時刻 */
.\"O     time_t          shm_ctime;   /* Last change time */
    time_t          shm_ctime;   /* 最後に変更が行われた時刻 */
.\"O     pid_t           shm_cpid;    /* PID of creator */
    pid_t           shm_cpid;    /* 作成者 (creator) の PID */
.\"O     pid_t           shm_lpid;    /* PID of last shmat(2)/shmdt(2) */
    pid_t           shm_lpid;    /* 最後の shmat(2)/shmdt(2) の PID */
.\"O     shmatt_t        shm_nattch;  /* No. of current attaches */
    shmatt_t        shm_nattch;  /* 現在付加されている数 */
    ...
};
.fi
.in
.PP
.\"O The
.\"O .I ipc_perm
.\"O structure is defined in \fI<sys/ipc.h>\fP as follows
.\"O (the highlighted fields are settable using
.\"O .BR IPC_SET ):
.I ipc_perm
構造体は \fI<sys/ipc.h>\fP で以下のように定義されている
(強調されたフィールドは
.B IPC_SET
を使って設定可能である):
.PP
.in +4n
.nf
struct ipc_perm {
.\"O     key_t          __key;    /* Key supplied to shmget(2) */
.\"O     uid_t          \fBuid\fP;      /* Effective UID of owner */
.\"O     gid_t          \fBgid\fP;      /* Effective GID of owner */
.\"O     uid_t          cuid;     /* Effective UID of creator */
.\"O     gid_t          cgid;     /* Effective GID of creator */
.\"O     unsigned short \fBmode\fP;     /* \fBPermissions\fP + SHM_DEST and
.\"O                                 SHM_LOCKED flags */
.\"O     unsigned short __seq;    /* Sequence number */
    key_t          __key;    /* shmget(2) に与えられるキー */
    uid_t          \fBuid\fP;      /* 所有者の実効 UID */
    gid_t          \fBgid\fP;      /* 所有者の実効 GID */
    uid_t          cuid;     /* 作成者の実効 UID */
    gid_t          cgid;     /* 作成者の実効 GID */
    unsigned short \fBmode\fP;     /* \fB許可\fP + SHM_DEST と
                                SHM_LOCKED フラグ */
    unsigned short __seq;    /* シーケンス番号 */
};
.fi
.in
.PP
.\"O Valid values for
.\"O .I cmd
.\"O are:
.I cmd
として有効な値は以下の通り:
.br
.TP 10
.B IPC_STAT
.\"O Copy information from the kernel data structure associated with
.\"O .I shmid
.\"O into the
.\"O .I shmid_ds
.\"O structure pointed to by \fIbuf\fP.
.I shmid
に関連づけられたカーネルデータ構造体の情報を
\fIbuf\fP で指された
.I shmid_ds
構造体にコピーする。
.\"O The caller must have read permission on the
.\"O shared memory segment.
呼び出し元は共有メモリ・セグメントに対する
読み込み許可を持たなければならない。
.TP
.B IPC_SET
.\"O Write the values of some members of the
.\"O .I shmid_ds
.\"O structure pointed to by
.\"O .I buf
.\"O to the kernel data structure associated with this shared memory segment,
.\"O updating also its
.\"O .I shm_ctime
.\"O member.
.I buf
によって指される
.I shmid_ds
構造体のいくつかのメンバーの値を、
この共有メモリ・セグメントに関連づけられたカーネルデータ構造体に書き込み、
.I shm_ctime
メンバーも更新する。
.\"O The following fields can be changed:
.\"O \fIshm_perm.uid\fP, \fIshm_perm.gid\fP,
.\"O and (the least significant 9 bits of) \fIshm_perm.mode\fP.
以下のフィールドは変更できる。
\fIshm_perm.uid\fP, \fIshm_perm.gid\fP,
\fIshm_perm.mode\fP (の最下位 9 ビット)。
.\"O The effective UID of the calling process must match the owner
.\"O .RI ( shm_perm.uid )
.\"O or creator
.\"O .RI ( shm_perm.cuid )
.\"O of the shared memory segment, or the caller must be privileged.
呼び出したプロセスの実効 UID が所有者
.RI ( shm_perm.uid )
または作成者
.RI ( shm_perm.cuid )
と一致するか、呼び出し元が特権を持たなければならない。
.TP
.B IPC_RMID
.\"O Mark the segment to be destroyed.
.\"O The segment will only actually be destroyed
.\"O after the last process detaches it (i.e., when the
.\"O .I shm_nattch
.\"O member of the associated structure
.\"O .I shmid_ds
.\"O is zero).
セグメントに破棄済みのマークを付ける。
セグメントは、実際には最後プロセスがセグメントを分離した (関連する
.I shmid_ds
構造体の
.I shm_nattch
メンバーが 0 になった) 後でのみ破棄される。
.\"O The caller must be the owner or creator, or be privileged.
呼び出し元は所有者か作成者であるか、特権を持たなければならない。
.\"O If a segment has been marked for destruction, then the (nonstandard)
.\"O .B SHM_DEST
.\"O flag of the
.\"O .I shm_perm.mode
.\"O field in the associated data structure retrieved by
.\"O .B IPC_STAT
.\"O will be set.
セグメントに破棄のマークが付けられると、
関連するデータ構造体において
.I shm_perm.mode
フィールドの (標準ではない)
.B SHM_DEST
フラグが設定される。
このデータ構造体は
.B IPC_STAT
で取得される。
.PP
.\"O The caller \fImust\fP ensure that a segment is eventually destroyed;
.\"O otherwise its pages that were faulted in will remain in memory or swap.
呼び出し元は最終的にはセグメントを忘れずに破棄\fIしなければならない\fP。
そうでなれば、フォールト (fault) されたページは
メモリかスワップ (swap) に残り続ける。
.TP 10
.\"O .BR IPC_INFO " (Linux-specific)"
.BR IPC_INFO " (Linux 固有)"
.\"O Returns information about system-wide shared memory limits and
.\"O parameters in the structure pointed to by
.\"O .IR buf .
システム全体での共有メモリの制限とパラメータに関する情報を、
.I buf
が指す構造体に入れて返す。
.\"O This structure is of type
.\"O .I shminfo
.\"O (thus, a cast is required),
.\"O defined in
.\"O .I <sys/shm.h>
.\"O if the
.\"O .B _GNU_SOURCE
.\"O feature test macro is defined:
この構造体は
.I shminfo
型である (そのためキャストが必要である)。
.I shminfo
は
.B _GNU_SOURCE
機能検査マクロが定義された場合に
.I <sys/shm.h>
で以下のように定義される:
.nf
.in +4n

struct  shminfo {
.\"O     unsigned long shmmax; /* Maximum segment size */
    unsigned long shmmax; /* 最大セグメントサイズ */
.\"O     unsigned long shmmin; /* Minimum segment size;
.\"O                              always 1 */
    unsigned long shmmin; /* 最小セグメントサイズ。
                             常に 1 */
.\"O     unsigned long shmmni; /* Maximum number of segments */
    unsigned long shmmni; /* 最大セグメント数 */
.\"O     unsigned long shmseg; /* Maximum number of segments
.\"O                              that a process can attach;
.\"O                              unused within kernel */
    unsigned long shmseg; /* プロセスが付加できる
                             セグメントの最大数。
                             カーネル内では未使用 */
.\"O     unsigned long shmall; /* Maximum number of pages of
.\"O                              shared memory, system-wide */
    unsigned long shmall; /* 共有メモリの最大ページ数。
                             システム全体での値 */
};

.in
.fi
.\"O The
.\"O .IR shmmni ,
.\"O .IR shmmax ,
.\"O and
.\"O .I shmall
.\"O settings can be changed via
.\"O .I /proc
.\"O files of the same name; see
.\"O .BR proc (5)
.\"O for details.
設定
.IR shmmni ,
.IR shmmax ,
.I shmall
は
.I /proc
にある同じ名前のファイル経由で変更可能である。
詳しくは
.BR proc (5)
を参照。
.TP
.\"O .BR SHM_INFO " (Linux-specific)"
.BR SHM_INFO " (Linux 固有)"
.\"O Returns a
.\"O .I shm_info
.\"O structure whose fields contain information
.\"O about system resources consumed by shared memory.
共有メモリが消費しているシステム資源に関する情報を
格納した
.I shm_info
構造体を返す。
.\"O This structure is defined in
.\"O .I <sys/shm.h>
.\"O if the
.\"O .B _GNU_SOURCE
.\"O feature test macro is defined:
この構造体は、
.B _GNU_SOURCE
機能検査マクロが定義された場合に
.I <sys/shm.h>
で以下のように定義される:
.nf
.in +4n

struct shm_info {
.\"O     int           used_ids; /* # of currently existing
.\"O                                segments */
    int           used_ids; /* 現在存在するセグメント数 */
.\"O     unsigned long shm_tot;  /* Total number of shared
.\"O                                memory pages */
    unsigned long shm_tot;  /* 共有メモリのページ総数 */
.\"O     unsigned long shm_rss;  /* # of resident shared
.\"O                                memory pages */
    unsigned long shm_rss;  /* メモリ上にある (スワップされて
                               いない) 共有メモリページ数 */
.\"O     unsigned long shm_swp;  /* # of swapped shared
.\"O                                memory pages */
    unsigned long shm_swp;  /* スワップされている共有メモリ
                               ページ数 */
.\"O     unsigned long swap_attempts;
.\"O                             /* Unused since Linux 2.4 */
.\"O     unsigned long swap_successes;
.\"O                             /* Unused since Linux 2.4 */
    unsigned long swap_attempts;
                            /* Linux 2.4 以降では未使用 */
    unsigned long swap_successes;
                            /* Linux 2.4 以降では未使用 */
};
.in
.fi
.TP
.\"O .BR SHM_STAT " (Linux-specific)"
.BR SHM_STAT " (Linux 固有)"
.\"O Returns a
.\"O .I shmid_ds
.\"O structure as for
.\"O .BR IPC_STAT .
.B IPC_STAT
と同じく
.I shmid_ds
構造体を返す。
.\"O However, the
.\"O .I shmid
.\"O argument is not a segment identifier, but instead an index into
.\"O the kernel's internal array that maintains information about
.\"O all shared memory segments on the system.
但し、
.I shmid
引き数は、セグメント識別子ではなく、システム上の全ての共有メモリ
セグメントに関する情報を管理するカーネルの内部配列へのインデックス
である。
.PP
.\"O The caller can prevent or allow swapping of a shared
.\"O memory segment with the following \fIcmd\fP values:
呼び出し元は、\fIcmd\fP に以下の値を指定することで、共有メモリ・セグメントが
スワップされることを防止したり、許可したりできる:
.br
.TP 10
.\"O .BR SHM_LOCK " (Linux-specific)"
.BR SHM_LOCK " (Linux 固有)"
.\"O Prevent swapping of the shared memory segment.
.\"O The caller must fault in
.\"O any pages that are required to be present after locking is enabled.
共有メモリ・セグメントをスワップすることを防止する。
ロックが有効になった後、呼び出し元は、
存在することが要求された全てのページをフォールトさせなければならない。
.\"O If a segment has been locked, then the (nonstandard)
.\"O .B SHM_LOCKED
.\"O flag of the
.\"O .I shm_perm.mode
.\"O field in the associated data structure retrieved by
.\"O .B IPC_STAT
.\"O will be set.
セグメントがロックされると、
関連するデータ構造体において
.I shm_perm.mode
フィールドの (標準的ではない)
.B SHM_LOCKED
フラグが設定される。
このデータ構造体は
.B IPC_STAT
で取得される。
.TP
.\"O .BR SHM_UNLOCK " (Linux-specific)"
.BR SHM_UNLOCK " (Linux 固有)"
.\"O Unlock the segment, allowing it to be swapped out.
セグメントのロックを解除し、スワップ・アウトすることを可能にする。
.PP
.\"O In kernels before 2.6.10, only a privileged process
.\"O could employ
.\"O .B SHM_LOCK
.\"O and
.\"O .BR SHM_UNLOCK .
2.6.10 より前のカーネルでは、特権プロセスだけが
.B SHM_LOCK
と
.B SHM_UNLOCK
を利用することができた。
.\"O Since kernel 2.6.10, an unprivileged process can employ these operations
.\"O if its effective UID matches the owner or creator UID of the segment, and
.\"O (for
.\"O .BR SHM_LOCK )
.\"O the amount of memory to be locked falls within the
.\"O .B RLIMIT_MEMLOCK
.\"O resource limit (see
.\"O .BR setrlimit (2)).
2.6.10 以降のカーネルでは、非特権プロセスであっても次の条件を満たせば
これらの操作を利用することができる。その条件とは、プロセスの実効 UID
がそのセグメントの所有者もしくは作成者の UID と一致し、
.RB ( SHM_LOCK
の場合には) ロックするメモリの合計が
.B RLIMIT_MEMLOCK
リソース上限
.RB ( setrlimit (2)
参照) の範囲内に入っていることである。
.\" There was some weirdness in 2.6.9: SHM_LOCK and SHM_UNLOCK could
.\" be applied to a segment, regardless of ownership of the segment.
.\" This was a botch-up in the move to RLIMIT_MEMLOCK, and was fixed
.\" in 2.6.10.  MTK, May 2005
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O A successful
.\"O .B IPC_INFO
.\"O or
.\"O .B SHM_INFO
.\"O operation returns the index of the highest used entry in the
.\"O kernel's internal array recording information about all
.\"O shared memory segments.
.B IPC_INFO
と
.B SHM_INFO
操作は、成功すると、全ての共有メモリセグメントに関する情報を
管理しているカーネルの内部配列の使用中エントリのインデックスの
うち最大値を返す
.\"O (This information can be used with repeated
.\"O .B SHM_STAT
.\"O operations to obtain information about all shared memory segments
.\"O on the system.)
(この情報は、システムの全ての共有メモリセグメントに関する情報を
取得するために、
.B SHM_STAT
操作を繰り返し実行する際に使用できる)。
.\"O A successful
.\"O .B SHM_STAT
.\"O operation returns the identifier of the shared memory segment
.\"O whose index was given in
.\"O .IR shmid .
.B SHM_STAT
操作は、成功すると、
.I shmid
で指定されたインデックスを持つ共有メモリセグメントの識別子を返す。
.\"O Other operations return 0 on success.
他の操作は、成功の場合 0 を返す。

.\"O On error, \-1 is returned, and
.\"O .I errno
.\"O is set appropriately.
エラーの場合は \-1 を返し、
.I errno
を適切に設定する。
.\"O .SH ERRORS
.SH エラー
.TP
.B EACCES
.\"O \fBIPC_STAT\fP or \fBSHM_STAT\fP is requested and

.\"O \fIshm_perm.mode\fP does not allow read access for
.\"O .IR shmid ,
.\"O and the calling process does not have the
.\"O .B CAP_IPC_OWNER
.\"O capability.
\fBIPC_STAT\fP または \fBSHM_STAT\fP が要求され、
\fIshm_perm.mode\fP が
.I shmid
への読み込みアクセスを許しておらず、
かつ呼び出したプロセスが
.B CAP_IPC_OWNER
ケーパビリティ (capability) を持っていない。
.TP
.B EFAULT
.\"O The argument
.\"O .I cmd
.\"O has value
.\"O .B IPC_SET
.\"O or
.\"O .B IPC_STAT
.\"O but the address pointed to by
.\"O .I buf
.\"O isn't accessible.
.I cmd
引き数に
.B IPC_SET
か
.B IPC_STAT
が指定されたが
.I buf
で指されているアドレスにアクセスできない。
.TP
.B EIDRM
.\"O \fIshmid\fP points to a removed identifier.
\fIshmid\fP が削除 (remove) された識別子 (identifier) を指している。
.TP
.B EINVAL
.\"O \fIshmid\fP is not a valid identifier, or \fIcmd\fP
.\"O is not a valid command.
.\"O Or: for a
.\"O .B SHM_STAT
.\"O operation, the index value specified in
.\"O .I shmid
.\"O referred to an array slot that is currently unused.
\fIshmid\fP が有効な識別子でないか、
\fIcmd\fP が有効なコマンドでない。
もしくは、
.B SHM_STAT
操作の場合に、
.I shmid
で指定されたインデックス値が現在未使用の配列のスロットを参照していた。
.TP
.B ENOMEM
.\"O (In kernels since 2.6.9),
.\"O .B SHM_LOCK
.\"O was specified and the size of the to-be-locked segment would mean
.\"O that the total bytes in locked shared memory segments would exceed
.\"O the limit for the real user ID of the calling process.
(2.6.9 以降のカーネルにおいて)
.B SHM_LOCK
が指定され、
ロックされる予定のセグメントのサイズ
(ロックされる共有メモリ・セグメントの合計バイト数) が、
呼び出したプロセスの実ユーザー ID についての制限を超えた。
.\"O This limit is defined by the
.\"O .B RLIMIT_MEMLOCK
.\"O soft resource limit (see
.\"O .BR setrlimit (2)).
この制限は
.B RLIMIT_MEMLOCK
ソフト資源制限で定義される
.RB ( setrlimit (2)
を参照)。
.TP
.B EOVERFLOW
.\"O \fBIPC_STAT\fP is attempted, and the GID or UID value
.\"O is too large to be stored in the structure pointed to by
.\"O .IR buf .
\fBIPC_STAT\fP が試みられ、GID や UID の値が
.I buf
で指示される構造体に格納するには大き過ぎる。
.TP
.B EPERM
.\"O \fBIPC_SET\fP or \fBIPC_RMID\fP is attempted, and the
.\"O effective user ID of the calling process is not that of the creator
.\"O (found in
.\"O .IR shm_perm.cuid ),
.\"O or the owner
.\"O (found in
.\"O .IR shm_perm.uid ),
.\"O and the process was not privileged (Linux: did not have the
.\"O .B CAP_SYS_ADMIN
.\"O capability).
\fBIPC_SET\fP か \fBIPC_RMID\fP が試みられ、
呼び出したプロセスの実効ユーザー ID が作成者
.RI ( shm_perm.cuid )
でも所有者
.RI ( shm_perm.uid )
でもなく、プロセスが特権を持たない (Linux では
.B CAP_SYS_ADMIN
ケーパビリティを持たない)。

.\"O Or (in kernels before 2.6.9),
.\"O .B SHM_LOCK
.\"O or
.\"O .B SHM_UNLOCK
.\"O was specified, but the process was not privileged
.\"O (Linux: did not have the
.\"O .B CAP_IPC_LOCK
.\"O capability).
または (2.6.9 より前のカーネルで)
.B SHM_LOCK
または
.B SHM_UNLOCK
が指定されているが、プロセスが特権を持たない
(Linux では
.B CAP_IPC_LOCK
ケーパビリティを持たない)。
.\"O (Since Linux 2.6.9, this error can also occur if the
.\"O .B RLIMIT_MEMLOCK
.\"O is 0 and the caller is not privileged.)
(Linux 2.6.9 以降では、
.B RLIMIT_MEMLOCK
が 0 で呼び出し元が特権を持たない場合にも、このエラーが起こる。)
.\"O .SH "CONFORMING TO"
.SH 準拠
SVr4, POSIX.1-2001.
.\"O .\" SVr4 documents additional error conditions EINVAL,
.\"O .\" ENOENT, ENOSPC, ENOMEM, EEXIST.  Neither SVr4 nor SVID documents
.\"O .\" an EIDRM error condition.
.\" SVr4 には他に EINVAL, ENOENT, ENOSPC, ENOMEM,
.\" EEXIST エラーについての記述がある。
.\" SVr4 および SVID には EIDRM エラーについての記述はない。
.\"O .SH NOTES
.SH 注意
.\"O The
.\"O .BR IPC_INFO ,
.\"O .B SHM_STAT
.\"O and
.\"O .B SHM_INFO
.\"O operations are used by the
.\"O .BR ipcs (1)
.\"O program to provide information on allocated resources.
.\"O In the future these may modified or moved to a /proc file system
.\"O interface.
.BR IPC_INFO ,
.BR SHM_STAT ,
.B SHM_INFO
操作は、
.BR ipcs (1)
プログラムで割り当て済の資源に関する情報を提供するために
使用されている。将来、これらの操作は変更されたり、
/proc ファイルシステムのインタフェースに移動されるかもしれない。

.\"O Linux permits a process to attach
.\"O .RB ( shmat (2))
.\"O a shared memory segment that has already been marked for deletion
.\"O using
.\"O .IR shmctl(IPC_RMID) .
.\"O This feature is not available on other UNIX implementations;
.\"O portable applications should avoid relying on it.
Linux では、
.I shmctl(IPC_RMID)
を使ってすでに削除マークがつけられている共有メモリ・セグメントを
あるプロセスが付加 (attach)
.RB ( shmat (2))
することを許可している。
この機能は他の UNIX の実装では利用できない。
移植性を考慮したアプリケーションではこれに依存しないようにすべきである。

.\"O Various fields in a \fIstruct shmid_ds\fP were typed as
.\"O .I short
.\"O under Linux 2.2
.\"O and have become
.\"O .I long
.\"O under Linux 2.4.
.\"O To take advantage of this,
.\"O a recompilation under glibc-2.1.91 or later should suffice.
.\"O (The kernel distinguishes old and new calls by an
.\"O .B IPC_64
.\"O flag in
.\"O .IR cmd .)
\fI構造体 shmid_ds\fP 内の多くのフィールドは、
Linux 2.2 では
.I short
型だったが、Linux 2.4 では
.I long
型になった。
この利点を生かすには、glibc-2.1.91 以降の環境下で
再コンパイルすれば十分である。
カーネルは新しい形式の呼び出しと古い形式の呼び出しを
.I cmd
内の
.B IPC_64
フラグで区別する。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR mlock (2),
.BR setrlimit (2),
.BR shmget (2),
.BR shmop (2),
.BR capabilities (7),
.BR shm_overview (7),
.BR svipc (7)
