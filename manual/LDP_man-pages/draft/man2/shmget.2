.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 28 10:57:35 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Tue Oct 22 22:03:17 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 8 Jan 2003, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Removed EIDRM from errors - that can't happen...
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-03-01, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2001-06-03, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated 2001-12-22, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2003-02-23, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-03-02, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-11-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-07-21, Akihiro MOTOKI, LDP v2.36
.\"
.\"WORD:	shared memory		共有メモリ
.\"WORD:	segment			セグメント
.\"WORD:	owner			所有者
.\"WORD:	group			グループ
.\"WORD:	world			他人
.\"WORD:	creator			作成者
.\"WORD:	super-user		スーパー・ユーザー
.\"WORD:	detach			分離
.\"WORD:	attach			付加
.\"WORD:	identifier		識別子
.\"WORD:	member			メンバー
.\"WORD:	effective user ID	実効ユーザーID
.\"WORD:	effective group ID	実効グループID
.\"WORD:	policy			方針
.\"WORD:	implement		実装
.\"
.TH SHMGET 2 2006-05-02 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O shmget \- allocates a shared memory segment
shmget \- 共有メモリ・セグメントを割り当てる
.\"O .SH SYNOPSIS
.SH 書式
.ad l
.B #include <sys/ipc.h>
.br
.B #include <sys/shm.h>
.sp
.BI "int shmget(key_t " key ", size_t " size ", int " shmflg );
.ad b
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR shmget ()
.\"O returns the identifier of the shared memory segment
.\"O associated with the value of the argument
.\"O .IR key .
.\"O A new shared memory segment, with size equal to the value of
.\"O .I size
.\"O rounded up to a multiple of
.\"O .BR PAGE_SIZE ,
.\"O is created if
.\"O .I key
.\"O has the value
.\"O .B IPC_PRIVATE
.\"O or
.\"O .I key
.\"O isn't
.\"O .BR IPC_PRIVATE ,
.\"O no shared memory segment corresponding to
.\"O .I key
.\"O exists, and
.\"O .B IPC_CREAT
.\"O is specified in
.\"O .IR shmflg .
.BR shmget ()
は
.I key
引き数に対応する共有メモリ・セグメントの識別子を返す。
.I key
の値が
.B IPC_PRIVATE
の場合、もしくは
.I key
に対応する共有メモリ・セグメントが存在せず、
.I shmflg
に
.B IPC_CREAT
が指定されていた場合、
新しい共有メモリ・セグメントを作成する。
作成される共有メモリ・セグメントは、
.I size
引き数の値を
.B PAGE_SIZE
の倍数へと切り上げた (round up) 大きさとなる。
.PP
.\"O If
.\"O .I shmflg
.\"O specifies both
.\"O .B IPC_CREAT
.\"O and
.\"O .B IPC_EXCL
.\"O and a shared memory segment already exists for
.\"O .IR key ,
.\"O then
.\"O .BR shmget ()
.\"O fails with
.\"O .I errno
.\"O set to
.\"O .BR EEXIST .
.\"O (This is analogous to the effect of the combination
.\"O .B O_CREAT | O_EXCL
.\"O for
.\"O .BR open (2).)
.I shmflg
に
.B IPC_CREAT
と
.B IPC_EXCL
の両方が指定された場合、
.I key
に対応する共有メモリ・セグメントが既に存在すると、
.BR shmget ()
は失敗し、
.I errno
に
.B EEXIST
が設定される (これは
.BR open (2)
に
.B O_CREAT | O_EXCL
を指定した場合の動作と同じである)。
.PP
.\"O The value
.\"O .I shmflg
.\"O is composed of:
.I shmflg
は以下の内容から構成される:
.TP 12
.B IPC_CREAT
.\"O to create a new segment.
.\"O If this flag is not used, then
.\"O .BR shmget ()
.\"O will find the segment associated with \fIkey\fP and check to see if
.\"O the user has permission to access the segment.
新しいセグメントを作成する。このフラグが指定されなかった場合、
.BR shmget ()
は \fIkey\fP に対応するセグメントを探し、
ユーザがそのセグメントにアクセスする許可があるかどうかをチェックする。
.TP
.B IPC_EXCL
.\"O used with \fBIPC_CREAT\fP to ensure failure if the segment already exists.
\fBIPC_CREAT\fP と共に使用し、セグメントが既に存在した場合には
失敗することを保証する。
.TP
.I mode_flags
.\"O (least significant 9 bits)
(下位 9 ビット)
.\"O specifying the permissions granted to the owner, group, and world.
.\"O These bits have the same format, and the same
.\"O meaning, as the
.\"O .I mode
.\"O argument of
.\"O .BR open (2).
.\"O Presently, the execute permissions are not used by the system.
所有者、グループ、他人 (world) への許可を指定する。
これらのビットは
.BR open (2)
の
.I mode
引き数と同じ形式で同じ意味を持つ。
今のところ、システムは実行 (execute) 許可を参照しない。
.TP
.\"O .BR SHM_HUGETLB " (since Linux 2.6)"
.BR SHM_HUGETLB " (Linux 2.6 以降)"
.\"O Allocate the segment using "huge pages."
.\"O See the kernel source file
.\"O .I Documentation/vm/hugetlbpage.txt
.\"O for further information.
"ヒュージページ (huge page)" を使うセグメントを割り当てる。
詳細な情報は、カーネル・ソースのファイル
.I Documentation/vm/hugetlbpage.txt
を参照。
.TP
.\"O .BR SHM_NORESERVE " (since Linux 2.6.15)"
.BR SHM_NORESERVE " (Linux 2.6.15 以降)"
.\"O This flag serves the same purpose as the
.\"O .BR mmap (2)
.\"O .B MAP_NORESERVE
.\"O flag.
このフラグは、
.BR mmap (2)
の
.B MAP_NORESERVE
フラグと同じ役割を果たす。
.\"O Do not reserve swap space for this segment.
.\"O When swap space is reserved, one has the guarantee
.\"O that it is possible to modify the segment.
.\"O When swap space is not reserved one might get
.\"O .B SIGSEGV
.\"O upon a write
.\"O if no physical memory is available.
このセグメントに対するスワップ空間の予約を行わない。
スワップ空間を予約した場合は、そのセグメントの変更が必ず成功することが
保証される。スワップ空間の予約を行わなかった場合は、物理メモリに空きが
ないと書き込み時に
.B SIGSEGV
を受け取る可能性がある。
.\"O See also the discussion of the file
.\"O .I /proc/sys/vm/overcommit_memory
.\"O in
.\"O .BR proc (5).
.BR proc (5)
にある
.I /proc/sys/vm/overcommit_memory
ファイルに関する議論も参照のこと。
.\" As at 2.6.17-rc2, this flag has no effect if SHM_HUGETLB was also
.\" specified.
.PP
.\"O When a new shared memory segment is created,
.\"O its contents are initialized to zero values, and
.\"O its associated data structure,
.\"O .I shmid_ds
.\"O (see
.\"O .BR shmctl (2)),
.\"O is initialized as follows:
共有メモリ・セグメントが新たに作成される際、
共有メモリ・セグメントの内容は 0 で初期化され、
関連情報を保持するデータ構造体
.I shmid_ds
は以下のように初期化される。
.IP
.\"O .I shm_perm.cuid
.\"O and
.\"O .I shm_perm.uid
.\"O are set to the effective user ID of the calling process.
.I shm_perm.cuid
と
.I shm_perm.uid
に呼び出し元プロセスの実効 (effective) ユーザーID を設定する。
.IP
.\"O .I shm_perm.cgid
.\"O and
.\"O .I shm_perm.gid
.\"O are set to the effective group ID of the calling process.
.I shm_perm.cgid
と
.I shm_perm.gid
に呼び出し元プロセスの実効グループID を設定する。
.IP
.\"O The least significant 9 bits of
.\"O .I shm_perm.mode
.\"O are set to the least significant 9 bit of
.\"O .IR shmflg .
.I shm_perm.mode
の下位 9 ビットに
.I shmflg
の下位 9 ビットを設定する。
.IP
.\"O .I shm_segsz
.\"O is set to the value of
.\"O .IR size .
.I shm_segsz
に
.I size
の値を設定する。
.IP
.\"O .IR shm_lpid ,
.\"O .IR shm_nattch ,
.\"O .I shm_atime
.\"O and
.\"O .I shm_dtime
.\"O are set to 0.
.IR shm_lpid ,
.IR shm_nattch ,
.IR shm_atime ,
.I shm_dtime
に 0 を設定する。
.IP
.\"O .I shm_ctime
.\"O is set to the current time.
.I shm_ctime
に現在の時刻を設定する。
.PP
.\"O If the shared memory segment already exists, the permissions are
.\"O verified, and a check is made to see if it is marked for destruction.
共有メモリ・セグメントが既に存在する場合、アクセス許可の検査と、
破壊 (destruction) マークがつけられていないかのチェックが行われる。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O A valid segment identifier,
.\"O .IR shmid ,
.\"O is returned on success, \-1 on error.
成功した場合、有効なセグメント識別子
.I shmid
が返される。エラーの場合、 \-1 が返される。
.\"O .SH ERRORS
.SH エラー
.\"O On failure,
.\"O .I errno
.\"O is set to one of the following:
失敗した場合は
.I errno
が以下のどれかに設定される:
.TP
.B EACCES
.\"O The user does not have permission to access the
.\"O shared memory segment, and does not have the
.\"O .B CAP_IPC_OWNER
.\"O capability.
ユーザーはその共有メモリ・セグメントへのアクセス許可を持たず、
.B CAP_IPC_OWNER
ケーパビリティも持っていない。
.TP
.B EEXIST
.\"O .B IPC_CREAT | IPC_EXCL
.\"O was specified and the segment exists.
.B IPC_CREAT | IPC_EXCL
が指定されていたが、そのセグメントが既に存在する。
.TP
.B EINVAL
.\"O A new segment was to be created and \fIsize\fP < \fBSHMMIN\fP
.\"O or \fIsize\fP > \fBSHMMAX\fP, or no new segment was to be created,
.\"O a segment with given key existed, but \fIsize\fP is greater than the size
.\"O of that segment.
新しいセグメントを作成しようとした際に
\fIsize\fP < \fBSHMMIN\fP または \fIsize\fP > \fBSHMMAX\fP であった。
もしくは、指定されたキーに対応するセグメントが既に存在して、新しい
セグメントを作成しようとはしなかったが、\fIsize\fP が存在するセグメントの
サイズよりも大きかった。
.TP
.B ENFILE
.\"O .\" [2.6.7] shmem_zero_setup()-->shmem_file_setup()-->get_empty_filp()
.\"O The system limit on the total number of open files has been reached.
.\" [2.6.7] shmem_zero_setup()-->shmem_file_setup()-->get_empty_filp()
システム全体でオープンされているファイルの総数が上限に達した。
.TP
.B ENOENT
.\"O No segment exists for the given \fIkey\fP, and
.\"O .B IPC_CREAT
.\"O was not specified.
指定された \fIkey\fP に対応するセグメントが存在せず、
.B IPC_CREAT
も指定されていなかった。
.TP
.B ENOMEM
.\"O No memory could be allocated for segment overhead.
セグメントの管理情報 (overhead) に割り当てるメモリがなかった。
.TP
.B ENOSPC
.\"O All possible shared memory ID's have been taken
.\"O .RB ( SHMMNI ),
.\"O or allocating a segment of the requested
.\"O .I size
.\"O would cause the system to exceed the system-wide limit on shared memory
.\"O .RB ( SHMALL ).
.\" motoki 2005-03-02 -- SHMMNI の意味を考慮して意訳
システム全体の共有メモリ・セグメント数の制限
.RB ( SHMMNI )
に達した、または要求された
.I size
のセグメントの割り当てが
システム全体の共有メモリサイズの制限
.RB ( SHMALL )
を超過した。
.TP
.B EPERM
.\"O The
.\"O .B SHM_HUGETLB
.\"O flag was specified, but the caller was not privileged (did not have the
.\"O .B CAP_IPC_LOCK
.\"O capability).
.B SHM_HUGETLB
フラグが指定されたが、呼び出し元には権限がなかった
.RB ( CAP_IPC_LOCK
ケーパビリティを持っていなかった)。
.\"O .SH "CONFORMING TO"
.SH 準拠
SVr4, POSIX.1-2001.
.\"O .\" SVr4 documents an additional error condition EEXIST.
.\" SVr4 には追加で EEXIST エラー状態の記述がある。

.\"O .B SHM_HUGETLB
.\"O is a nonportable Linux extension.
.B SHM_HUGETLB
は Linux での拡張であり、移植性はない。
.\"O .SH NOTES
.SH 注意
.\"O .B IPC_PRIVATE
.\"O isn't a flag field but a
.\"O .I key_t
.\"O type.
.B IPC_PRIVATE
はフラグではなく
.I key_t
型である。
.\"O If this special value is used for
.\"O .IR key ,
.\"O the system call ignores everything but the least significant 9 bits of
.\"O .I shmflg
.\"O and creates a new shared memory segment (on success).
この特別な値が
.I key
に使用された場合は、
.BR shmget ()
は
.I shmflg
の下位 9 ビットを除いた全てを無視し、
(成功すれば) 新しい共有メモリ・セグメントを作成する。
.PP
.\"O The following limits on shared memory segment resources affect the
.\"O .BR shmget ()
.\"O call:
.BR shmget ()
コールに影響する共有メモリ・セグメント資源の制限は以下の通りである:
.TP
.B SHMALL
.\"O System wide maximum of shared memory pages
.\"O (on Linux, this limit can be read and modified via
.\"O .IR /proc/sys/kernel/shmall ).
システム全体の共有メモリ・ページの最大数
(Linux では、この上限値は
.I /proc/sys/kernel/shmall
経由で参照したり、変更したりできる)。
.TP
.B SHMMAX
.\"O Maximum size in bytes for a shared memory segment: policy dependent
.\"O (on Linux, this limit can be read and modified via
.\"O .IR /proc/sys/kernel/shmmax ).
共有メモリ・セグメントのバイト単位の大きさの上限: 方針依存
(Linux では、この上限値は
.I /proc/sys/kernel/shmmax
経由で参照したり、変更したりできる)。
.TP
.B SHMMIN
.\"O Minimum size in bytes for a shared memory segment: implementation
.\"O dependent (currently 1 byte, though
.\"O .B PAGE_SIZE
.\"O is the effective minimum size).
共有メモリ・セグメントのバイト単位の大きさの下限: 実装依存
(現在は 1 バイトだが、実質的な最小サイズは
.B PAGE_SIZE
である)。
.TP
.B SHMMNI
.\"O System wide maximum number of shared memory segments: implementation
.\"O dependent (currently 4096, was 128 before Linux 2.3.99;
.\"O on Linux, this limit can be read and modified via
.\"O .IR /proc/sys/kernel/shmmni ).
.\"O .\" Kernels between 2.4.x and 2.6.8 had an off-by-one error that meant
.\"O .\" that we could create one more segment than SHMMNI -- MTK
.\"O .\" This /proc file is not available in Linux 2.2 and earlier -- MTK
システム全体の共有メモリーの数の上限: 実装依存
(現在は 4096。Linux 2.3.99 より前では 128。
Linux では、この上限値は
.I /proc/sys/kernel/shmmni
経由で参照したり、変更したりできる)。
.\" 2.4.x と 2.6.8 の間のカーネルには、SHMMNI より一つの多くの
.\" セグメントを作成できるというバグがあった。
.\" この /proc ファイルは Linux 2.2 以前では利用できない -- MTK
.PP
.\"O The implementation has no specific limits for the per-process maximum
.\"O number of shared memory segments
.\"O .RB ( SHMSEG ).
プロセス当りの共有メモリ・セグメントの個数の最大値
.RB ( SHMSEG )
に関する実装上の制限はない。
.\"O .SS LINUX NOTES
.\"O Until version 2.3.30 Linux would return
.\"O .B EIDRM
.\"O for a
.\"O .BR shmget ()
.\"O on a shared memory segment scheduled for deletion.
.SS Linux での注意
バージョン 2.3.30 までは、Linux は
削除が予定されている共有メモリ・セグメントに対して
.BR shmget ()
が行われると
.B EIDRM
を返していた。
.\"O .SH BUGS
.SH バグ
.\"O The name choice
.\"O .B IPC_PRIVATE
.\"O was perhaps unfortunate,
.\"O .B IPC_NEW
.\"O would more clearly show its function.
.B IPC_PRIVATE
という名前を選んだのはおそらく失敗であろう。
.B IPC_NEW
の方がより明確にその機能を表しているだろう。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR shmat (2),
.BR shmctl (2),
.BR shmdt (2),
.BR ftok (3),
.BR capabilities (7),
.BR shm_overview (7),
.BR svipc (7)
