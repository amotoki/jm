.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.\" Japanese Version Copyright (c) 2003 Akihiro MOTOKI, all rights reserved.
.\" Translated Mon Mar  8 2003 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD:	operation	操作
.\"WORD:	completion queue	完了キュー
.\"
.\" .de Sh \" Subsection
.\" .br
.\" .if t .Sp
.\" .ne 5
.\" .PP
.\" \fB\\$1\fP
.\" .PP
.\" ..
.\" .de Sp \" Vertical space (when we can't use .PP)
.\" .if t .sp .5v
.\" .if n .sp
.\" ..
.\" .de Ip \" List item
.\" .br
.\" .ie \\n(.$>=3 .ne \\$3
.\" .el .ne 3
.\" .IP "\\$1" \\$2
.\" ..
.TH IO_CANCEL 2 2008-06-18 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.\"O io_cancel \- cancel an outstanding asynchronous I/O operation
.SH 名前
io_cancel \- 未処理の非同期 I/O 操作の取り消し
.\"O .SH "SYNOPSIS"
.SH 書式
.nf
.\" .ad l
.\" .hy 0
.\"
.B #include <libaio.h>
.\"#include <linux/aio.h>
.sp
.\" .HP 16
.BI "int io_cancel(aio_context_t " ctx_id ", struct iocb *" iocb ,
.BI "              struct io_event *" result );
.\" .ad
.\" .hy
.sp
.\"O Link with \fI\-laio\fP.
\fI\-laio\fP とリンクする。
.fi
.\"O .SH "DESCRIPTION"
.SH 説明
.PP
.\"O .BR io_cancel ()
.\"O attempts to cancel an asynchronous I/O operation previously submitted with
.\"O .BR io_submit (2).
.\"O \fIctx_id\fP is the AIO context ID of the operation to be canceled.
.\"O If the AIO context is found, the event will be canceled and then copied
.\"O into the memory pointed to by \fIresult\fP without being placed
.\"O into the completion queue.
.BR io_cancel ()
は、過去に
.BR io_submit (2)
を使って登録された非同期 I/O (AIO) 操作の取り消しを行おうとする。
\fIctx_id\fP は、取り消しを行う操作の AIO コンテキストの ID である。
指定した AIO コンテキストが見つかると、
対象のイベントの取り消しが行われ、その後 \fIresult\fP で指されたメモリに
コピーされる (このとき、完了キューへの移動は行われない)。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success,
.\"O .BR io_cancel ()
.\"O returns 0.
.\"O For the failure return, see NOTES.
成功した場合、
.BR io_cancel ()
は 0 を返す。
失敗時の返り値については、「注意」の節を参照すること。
.\"O .SH "ERRORS"
.SH エラー
.TP
.B EAGAIN
.\"O The \fIiocb\fP specified was not canceled.
指定された \fIiocb\fP の取り消しが行われなかった。
.TP
.B EFAULT
.\"O One of the data structures points to invalid data.
データ構造の中に無効なデータを指しているものがある。
.TP
.B EINVAL
.\"O The AIO context specified by \fIctx_id\fP is invalid.
\fIctx_id\fP で指定された AIO コンテキストが無効である。
.TP
.B ENOSYS
.\"O .BR io_cancel ()
.\"O is not implemented on this architecture.
.BR io_cancel ()
はこのアーキテクチャでは実装されていない。
.\"O .SH "VERSIONS"
.SH バージョン
.PP
.\"O The asynchronous I/O system calls first appeared in Linux 2.5, August 2002.
非同期 I/O システム・コールは 2002年8月に Linux 2.5 で初めて登場した。
.\"O .SH "CONFORMING TO"
.SH 準拠
.PP
.\"O .BR io_cancel ()
.\"O is Linux-specific and should not be used
.\"O in programs that are intended to be portable.
.BR io_cancel ()
は Linux 固有であり、移植を想定したプログラムで使用すべきではない。
.\"O .SH NOTES
.SH 注意
.\"O Glibc does not provide a wrapper function for this system call.
glibc はこのシステムコール用のラッパー関数を提供していない。

.\"O The wrapper provided in
.\"O .I libaio
.\"O for
.\"O .BR io_cancel ()
.\"O does not follow the usual C library conventions for indicating error:
.\"O on error it returns a negated error number
.\"O (the negative of one of the values listed in ERRORS).
.\"O If the system call is invoked via
.\"O .BR syscall (2),
.\"O then the return value follows the usual conventions for
.\"O indicating an error: \-1, with
.\"O .I errno
.\"O set to a (positive) value that indicates the error.
.I libaio
で
.BR io_cancel ()
用に提供されているラッパー関数は、エラーの通知が通常の C ライブラリの
慣習にしたがっておらず、エラーの場合には負のエラー番号
(エラーの節に列挙されている値の一つを負にしたもの) が返り値となる。
.BR syscall (2)
経由でシステムコールを起動すると、返り値は通常のエラー通知の慣習に
したがってものとなり、エラーの場合には \-1 が返り、
.I errno
にエラーを示す (正の) 値が設定される。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio (7)
.\"O .\" .SH "NOTES"
.\" .SH 注
.\" .PP
.\"O .\" The asynchronous I/O system calls were written by Benjamin LaHaise.
.\" 非同期 I/O システム・コールは Benjamin LaHaise が書いた。
.\"O .\" .SH AUTHOR
.\" .SH 著者
.\" Kent Yoder.
