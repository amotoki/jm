.\" Copyright (c) International Business Machines orp., 2006
.\"
.\" %%%LICENSE_START(GPLv2+_SW_3_PARA)
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" HISTORY:
.\" 2006-04-27, created by Eduardo M. Fleury <efleury@br.ibm.com>
.\" with various additions by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2007 Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2007-01-09, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.43
.\" Updated 2008-08-06, Akihiro MOTOKI, LDP v3.05
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH IOPRIO_SET 2 2019\-03\-06 Linux "Linux Programmer's Manual"
.SH 名前
ioprio_get, ioprio_set \- I/O スケジューリングクラスと優先度の設定/取得
.SH 書式
.nf
\fBint ioprio_get(int \fP\fIwhich\fP\fB, int \fP\fIwho\fP\fB);\fP
\fBint ioprio_set(int \fP\fIwhich\fP\fB, int \fP\fIwho\fP\fB, int \fP\fIioprio\fP\fB);\fP
.fi
.PP
\fI注意\fP: これらのシステムコールには glibc ラッパー関数は存在しない。 「注意」の節を参照。
.SH 説明
The \fBioprio_get\fP()  and \fBioprio_set\fP()  system calls get and set the I/O
scheduling class and priority of one or more threads.
.PP
\fIwhich\fP と \fIwho\fP 引き数でシステムコールの操作対象となるスレッドを指示する。 \fIwhich\fP 引き数は、 \fIwho\fP
をどのように解釈するかを決めるもので、以下のいずれか一つを指定する。
.TP 
\fBIOPRIO_WHO_PROCESS\fP
\fIwho\fP は特定のプロセスやスレッドを特定するためのプロセス ID かスレッド ID である。 \fIwho\fP が 0
の場合、呼び出し元のスレッドに対して操作が行われる。
.TP 
\fBIOPRIO_WHO_PGRP\fP
\fIwho\fP はプロセスグループ ID であり、プロセスグループの全メンバが対象となる。 \fIwho\fP が 0 の場合、
呼び出し元がメンバーとなっているプロセスグループに対して操作が行われる。
.TP 
\fBIOPRIO_WHO_USER\fP
.\" FIXME . Need to document the behavior when 'who" is specified as 0
.\" See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=652443
\fIwho\fP はユーザーID であり、実 UID に一致する全プロセスが対象となる。
.PP
\fBioprio_get\fP()  の呼び出し時に \fIwhich\fP に \fBIOPRIO_WHO_PGRP\fP か \fBIOPRIO_WHO_USER\fP
が指定され、 \fIwho\fP に一致するプロセスが複数あった場合、 一致するプロセス全体の中で最も高い優先度が返される。
優先度が高いとは、より高い優先度クラスに属している (\fBIOPRIO_CLASS_RT\fP が最も高い優先度クラスで、
\fBIOPRIO_CLASS_IDLE\fP が最も低い)、もしくは 同じ優先度クラスに属しているが優先度レベルが高い
(優先度番号が小さい方が優先度レベルが高いことを意味する)、 ということである。
.PP
\fBioprio_set\fP()  に渡す \fIioprio\fP 引き数は、対象となるプロセスに割り当てるスケジューリングクラスと
優先度の両方を指定するビットマスクである。 \fIioprio\fP の値を組み立てたり解釈するのに、以下のマクロが利用できる。
.TP 
\fBIOPRIO_PRIO_VALUE(\fP\fIclass\fP\fB, \fP\fIdata\fP\fB)\fP
スケジューリングクラス \fIclass\fP と優先度 (\fIdata\fP)  を与えると、このマクロは 2つの値を組み合わせて、 \fIioprio\fP
値を生成し、マクロの結果として返す。
.TP 
\fBIOPRIO_PRIO_CLASS(\fP\fImask\fP\fB)\fP
\fImask\fP (\fIioprio\fP 値) を与えると、このマクロは I/O クラス要素、つまり \fBIOPRIO_CLASS_RT\fP,
\fBIOPRIO_CLASS_BE\fP, \fBIOPRIO_CLASS_IDLE\fP のいずれか一つの値を返す。
.TP 
\fBIOPRIO_PRIO_DATA(\fP\fImask\fP\fB)\fP
\fImask\fP (\fIioprio\fP 値) を与えると、このマクロは優先度 (\fIdata\fP)  要素を返す。
.PP
See the NOTES section for more information on scheduling classes and
priorities, as well as the meaning of specifying \fIioprio\fP as 0.
.PP
I/O 優先度は読み出しと同期書き込み (\fBO_DIRECT\fP, \fBO_SYNC\fP)  に対応している。 I/O
優先度は非同期書き込みには対応していない。なぜなら、 非同期書き込みはメモリー書き換えを行うプログラムの動作 (context) とは
関係なく発行され、そのためプログラム単位の優先度は適用されないから である。
.SH 返り値
成功すると、 \fBioprio_get\fP()  は、 \fIwhich\fP と \fIwho\fP で指定された基準に合致した全プロセスで最も高い I/O
優先度を持つプロセスの \fIioprio\fP 値を返す。 エラーの場合、\-1 を返し、 \fIerrno\fP にエラーを示す値を設定する。
.PP
成功すると、 \fBioprio_set\fP()  は 0 を返す。 エラーの場合、\-1 を返し、 \fIerrno\fP にエラーを示す値を設定する。
.SH エラー
.TP 
\fBEINVAL\fP
\fIwhich\fP か \fIioprio\fP の値が不正である。 \fIioprio\fP 用に指定可能なスケジューラクラスと優先度レベルについては
「備考」を参照のこと。
.TP 
\fBEPERM\fP
呼び出し元プロセスが、指定されたプロセスに \fIioprio\fP を割り当てるのに必要な権限を持っていない。 \fBioprio_set\fP()
に必要な権限についての詳しい情報は「備考」の節を参照のこと。
.TP 
\fBESRCH\fP
\fIwhich\fP と \fIwho\fP で指定された基準に合致するプロセスが見つからなかった。
.SH バージョン
これらのシステムコールはカーネル 2.6.13 以降の Linux で利用可能である。
.SH 準拠
これらのシステムコールは Linux 独自である。
.SH 注意
glibc はこれらのシステムコールに対するラッパー関数を提供していない。 \fBsyscall\fP(2)  を使って呼び出すこと。
.PP
複数のプロセスやスレッドが一つの I/O コンテキストを共有する場合がある。 \fBclone\fP(2) を \fBCLONE_IO\fP
フラグ付きで呼び出した場合にはこの状況となる。 しかしながら、デフォルトでは、一つのプロセスの個々のスレッドは I/O コンテキストを共有「しない」。
したがって、 プロセス内のすべてのスレッドの I/O 優先度を変更したい場合には、 それぞれのスレッドに対して \fBioprio_set\fP()
を呼び出す必要がある。 この操作を行うのに必要となるスレッド ID には \fBgettid\fP(2) か \fBclone\fP(2) が返す値を指定する。
.PP
これらのシステムコールは、I/O 優先度に対応した I/O スケジューラと 組み合わせて使用された場合にのみ効果を持つ。 カーネル 2.6.17
では、この条件を満たすスケジューラは Completely Fair Queuing (CFQ) I/O スケジューラだけである。
.PP
.\" commit 8ec680e4c3ec818efd1652f15199ed1c216ab550
If no I/O scheduler has been set for a thread, then by default the I/O
priority will follow the CPU nice value (\fBsetpriority\fP(2)).  In Linux
kernels before version 2.6.24, once an I/O priority had been set using
\fBioprio_set\fP(), there was no way to reset the I/O scheduling behavior to
the default.  Since Linux 2.6.24, specifying \fIioprio\fP as 0 can be used to
reset to the default I/O scheduling behavior.
.SS "I/O スケジューラの選択"
I/O schedulers are selected on a per\-device basis via the special file
\fI/sys/block/<device>/queue/scheduler\fP.
.PP
現在の I/O スケジューラは \fI/sys\fP ファイルシステム経由で参照できる。例えば、以下のコマンドを実行すると、
現在カーネルでロードされているスケジューラの全リストが表示される。
.PP
.in +4n
.EX
$\fB cat /sys/block/sda/queue/scheduler\fP
noop anticipatory deadline [cfq]
.EE
.in
.PP
The scheduler surrounded by brackets is the one actually in use for the
device (\fIsda\fP in the example).  Setting another scheduler is done by
writing the name of the new scheduler to this file.  For example, the
following command will set the scheduler for the \fIsda\fP device to \fIcfq\fP:
.PP
.in +4n
.EX
$\fB su\fP
Password:
#\fB echo cfq > /sys/block/sda/queue/scheduler\fP
.EE
.in
.\"
.SS "Completely Fair Queuing (CFQ) I/O スケジューラ"
Since version 3 (also known as CFQ Time Sliced), CFQ implements I/O nice
levels similar to those of CPU scheduling.  These nice levels are grouped
into three scheduling classes, each one containing one or more priority
levels:
.TP 
\fBIOPRIO_CLASS_RT\fP (1)
This is the real\-time I/O class.  This scheduling class is given higher
priority than any other class: processes from this class are given first
access to the disk every time.  Thus, this I/O class needs to be used with
some care: one I/O real\-time process can starve the entire system.  Within
the real\-time class, there are 8 levels of class data (priority) that
determine exactly how much time this process needs the disk for on each
service.  The highest real\-time priority level is 0; the lowest is 7.  In
the future, this might change to be more directly mappable to performance,
by passing in a desired data rate instead.
.TP 
\fBIOPRIO_CLASS_BE\fP (2)
これは ベストエフォートスケジューリングクラスである。 このクラスは、特定の I/O 優先度を設定していないプロセスの デフォルト値である。 class
data (優先度レベル) により、そのプロセスがどの程度の I/O 帯域を得られるかが決定される。 ベストエフォート優先度レベルは、CPU の
nice 値 (\fBgetpriority\fP(2)  参照) と同様のものである。 優先度レベルは、ベストエフォートスケジューリングクラスの中で
他のプロセスとの相対的な優先度を決定する。 優先度レベルの値の範囲は 0 (最高) から 7 (最低) である。
.TP 
\fBIOPRIO_CLASS_IDLE\fP (3)
This is the idle scheduling class.  Processes running at this level get I/O
time only when no one else needs the disk.  The idle class has no class
data.  Attention is required when assigning this priority class to a
process, since it may become starved if higher priority processes are
constantly accessing the disk.
.PP
Refer to the kernel source file \fIDocumentation/block/ioprio.txt\fP for more
information on the CFQ I/O Scheduler and an example program.
.SS "I/O 優先度の設定に必要な許可"
Permission to change a process's priority is granted or denied based on two
criteria:
.TP 
\fBプロセスの所有権\fP
An unprivileged process may set the I/O priority only for a process whose
real UID matches the real or effective UID of the calling process.  A
process which has the \fBCAP_SYS_NICE\fP capability can change the priority of
any process.
.TP 
\fBどの優先度に設定しようとしているか\fP
非常に高い優先度 (\fBIOPRIO_CLASS_RT\fP)  を設定しようとする場合、 \fBCAP_SYS_ADMIN\fP ケーパビリティが必要である。
カーネル 2.6.24 以前では、非常に低い優先度 (\fBIOPRIO_CLASS_IDLE\fP)  を設定するためにも \fBCAP_SYS_ADMIN\fP
ケーパビリティが必要であったが、 Linux 2.6.25 以降ではもはや必要なくなった。
.PP
\fBioprio_set\fP()  はこの両方のルールに従い、条件を満たさない場合、エラー \fBEPERM\fP で失敗する。
.SH バグ
.\" 6 May 07: Bug report raised:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=4464
.\" Ulrich Drepper replied that he wasn't going to add these
.\" to glibc.
glibc は、このページに記載された関数プロトタイプやマクロを定義する 適切なヘッダーファイルをまだ提供していない。 必要な定義については
\fIlinux/ioprio.h\fP を見ればよい。
.SH 関連項目
\fBionice\fP(1), \fBgetpriority\fP(2), \fBopen\fP(2), \fBcapabilities\fP(7),
\fBcgroups\fP(7)
.PP
Linux カーネルソース内の \fIDocumentation/block/ioprio.txt\fP
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
