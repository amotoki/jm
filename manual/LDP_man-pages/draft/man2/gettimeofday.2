.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified 1993-07-23 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Fixed necessary '#include' lines.
.\" Modified 1995-04-15 by Michael Chastain (mec@shell.portal.com):
.\"   Added reference to adjtimex.
.\" Removed some nonsense lines pointed out by Urs Thuermann,
.\"   (urs@isnogud.escape.de), aeb, 950722.
.\" Modified 1997-01-14 by Austin Donnelly (and1000@debian.org):
.\"   Added return values section, and bit on EFAULT
.\" Added clarification on timezone, aeb, 971210.
.\" Removed "#include <unistd.h>", aeb, 010316.
.\" Modified, 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"   Added notes on capability requirement.
.\"
.\" Japanese Version Copyright (c) 1998 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1998-05-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2001-06-02, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2001-12-23, Yuichi SATO
.\" Updated & Modified 2003-09-06, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2004-12-30, Yuichi SATO
.\" Updated 2006-07-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2009-04-13, Akihiro MOTOKI, LDP v3.20
.\"
.\"WORD:	timezone		タイムゾーン
.\"WORD:	daylight savings times	夏時間(daylight savings times)
.\"WORD:	macro			マクロ
.\"WORD:	null			NULL
.\"WORD:	superuser		スーパー・ユーザー
.\"
.TH GETTIMEOFDAY 2 2009-03-25 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O gettimeofday, settimeofday \- get / set time
gettimeofday, settimeofday \- 時刻を取得/設定する
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <sys/time.h>

.BI "int gettimeofday(struct timeval *" tv ", struct timezone *" tz );

.BI "int settimeofday(const struct timeval *" tv \
", const struct timezone *" tz );

.fi
.in -4n
.\"O Feature Test Macro Requirements for glibc (see
.\"O .BR feature_test_macros (7)):
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR settimeofday ():
_BSD_SOURCE
.\"O .SH DESCRIPTION
.SH 説明
.\"O The functions
.\"O .BR gettimeofday ()
.\"O and
.\"O .BR settimeofday ()
.\"O can get and set the time as well as a timezone.
.\"O .I tv
.\"O argument is a
.\"O .I struct timeval
.\"O (as specified in
.\"O .IR <sys/time.h> ):
関数
.BR gettimeofday ()
と
.BR settimeofday ()
は時刻とタイムゾーンを取得または設定する。
.I tv
引き数は
.I struct timeval
である
.RI ( <sys/time.h>
で定義されている):
.sp
.in +4n
.nf
struct timeval {
.\"O     time_t      tv_sec;     /* seconds */
.\"O     suseconds_t tv_usec;    /* microseconds */
    time_t      tv_sec;     /* 秒 */
    suseconds_t tv_usec;    /* マイクロ秒 */
};
.fi
.in
.sp
.\"O and gives the number of seconds and microseconds since the Epoch (see
.\"O .BR time (2)).
.\"O The
.\"O .I tz
.\"O argument is a
.\"O .IR "struct timezone" :
これにより紀元 (the Epoch:
.BR time (2)
を参照) からの秒とマイクロ秒が取得できる。
.I tz
引き数は
.I "struct timezone"
である:
.sp
.in +4n
.nf
struct timezone {
.\"O     int tz_minuteswest;     /* minutes west of Greenwich */
.\"O     int tz_dsttime;         /* type of DST correction */
    int tz_minuteswest;     /* グリニッジ標準時との差 (西方に分単位) */
    int tz_dsttime;         /* 夏時間調整の型 */
};
.fi
.in
.PP
.\"O If either
.\"O .I tv
.\"O or
.\"O .I tz
.\"O is NULL, the corresponding structure is not set or returned.
.I tv
や
.I tz
が NULL の場合、対応する構造体の設定/取得は行われない。
.\" The following is covered under EPERM below:
.\" .PP
.\" Only the superuser may use
.\" .BR settimeofday ().
.PP
.\"O The use of the
.\"O .I timezone
.\"O structure is obsolete; the
.\"O .I tz
.\"O argument should normally be specified as NULL.
.\"O The
.\"O .I tz_dsttime
.\"O field has never been used under Linux; it has not
.\"O been and will not be supported by libc or glibc.
.\"O Each and every occurrence of this field in the kernel source
.\"O (other than the declaration) is a bug.
.\"O Thus, the following
.\"O is purely of historic interest.
.I timezone
構造体を使うのは時代遅れ (obsolete) である:
.I tz
引き数は通常は NULL に指定すべきである。
.I tz_dsttime
フィールドは Linux では一切使われてこなかった;
libc や glibc でもサポートされてこなかったし、
これからもサポートされることはない。
カーネルのソース中の宣言以外で、このフィールドが存在するのは全てバグである。
よってこれ以降の記述は、純粋に歴史的興味に基づいたものである。

.\"O The field
.\"O .I tz_dsttime
.\"O contains a symbolic constant (values are given below)
.\"O that indicates in which part of the year Daylight Saving Time
.\"O is in force.
.\"O (Note: its value is constant throughout the year:
.\"O it does not indicate that DST is in force, it just selects an
.\"O algorithm.)
.\"O The daylight saving time algorithms defined are as follows :
.I tz_dsttime
フィールドには (以下で与えられるような) シンボル定数が格納される。
これは一年のうちでいつ夏時間 (Daylight Savings Time) を実施するかを示している
(注意: その値は年間を通した定数である:
夏時間が実施中であることを示すわけではなく、
アルゴリズムを選択しているだけである)。
夏時間は以下のように定義される:
.in +4n
.nf

.\"O \fBDST_NONE\fP     /* not on dst */
\fBDST_NONE\fP     /* 夏時間を採用していない */
.br
.\"O \fBDST_USA\fP      /* USA style dst */
\fBDST_USA\fP      /* アメリカ合衆国式夏時間 */
.br
.\"O \fBDST_AUST\fP     /* Australian style dst */
\fBDST_AUST\fP     /* オーストラリア式夏時間 */
.br
.\"O \fBDST_WET\fP      /* Western European dst */
\fBDST_WET\fP      /* 西ヨーロッパ式夏時間 */
.br
.\"O \fBDST_MET\fP      /* Middle European dst */
\fBDST_MET\fP      /* 中央ヨーロッパ式夏時間 */
.br
.\"O \fBDST_EET\fP      /* Eastern European dst */
\fBDST_EET\fP      /* 東ヨーロッパ式夏時間 */
.br
.\"O \fBDST_CAN\fP      /* Canada */
\fBDST_CAN\fP      /* カナダ */
.br
.\"O \fBDST_GB\fP       /* Great Britain and Eire */
\fBDST_GB\fP       /* グレートブリテンおよびアイルランド */
.br
.\"O \fBDST_RUM\fP      /* Rumania */
\fBDST_RUM\fP      /* ルーマニア */
.br
.\"O \fBDST_TUR\fP      /* Turkey */
\fBDST_TUR\fP      /* トルコ */
.br
.\"O \fBDST_AUSTALT\fP  /* Australian style with shift in 1986 */
\fBDST_AUSTALT\fP  /* 1986年に移行されたオーストラリア式 */
.fi
.in
.PP
.\"O Of course it turned out that the period in which
.\"O Daylight Saving Time is in force cannot be given
.\"O by a simple algorithm, one per country; indeed,
.\"O this period is determined by unpredictable political
.\"O decisions.
.\"O So this method of representing timezones
.\"O has been abandoned.
.\"O Under Linux, in a call to
.\"O .BR settimeofday ()
.\"O the
.\"O .I tz_dsttime
.\"O field should be zero.
当然のことながら、夏時間がどの期間に実施されるかを
国ごとの簡単なアルゴリズムで導くことができないことが判明した。
実際、夏時間の期間は予測不可能な政治的決定で決まる。
そのためこの方法でタイム・ゾーンを表すことは断念された。
Linux において
.BR settimeofday ()
を呼び出すときは、
.I tz_dsttime
フィールドを 0 にするべきである。
.PP
.\"O Under Linux there are some peculiar "warp clock" semantics associated
.\"O with the
.\"O .BR settimeofday ()
.\"O system call if on the very first call (after booting)
.\"O that has a non-NULL
.\"O .I tz
.\"O argument, the
.\"O .I tv
.\"O argument is NULL and the
.\"O .I tz_minuteswest
.\"O field is nonzero.
.\"O In such a case it is assumed that the CMOS clock
.\"O is on local time, and that it has to be incremented by this amount
.\"O to get UTC system time.
.\"O No doubt it is a bad idea to use this feature.
Linux では、
.BR settimeofday ()
システム・コールに関連して、独特の「クロックのズレ (warp clock)」が存在する。
これは (ブート後の) 最初の呼び出しで
.I tz
引き数が NULL でなく、
.I tv
引き数が NULL で
.I tz_minuteswest
フィールドが 0 でない場合に起こる。
このような場合、
.BR settimeofday ()
は CMOS クロックが地方時 (local time) であり、
UTC システム時間を得るためには、
.I tz_minuteswest
の分だけ増加させなくてはならないとみなしてしまう。
疑いもなく、この機構を使うことは良い考えではない。
.PP
.\"O Macros for operating on
.\"O .I timeval
.\"O structures are described in
.\"O .BR timeradd (3).
.I timeval
構造体を操作するためのマクロの説明は
.BR timeradd (3)
にある。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O .BR gettimeofday ()
.\"O and
.\"O .BR settimeofday ()
.\"O return 0 for success, or \-1 for failure (in which case
.\"O .I errno
.\"O is set appropriately).
.BR gettimeofday ()
と
.BR settimeofday ()
は成功すると 0 を返し、失敗した場合は \-1 を返す
(この場合は
.I errno
が適切に設定される)。
.\"O .SH ERRORS
.SH エラー
.TP
.B EFAULT
.\"O One of
.\"O .I tv
.\"O or
.\"O .I tz
.\"O pointed outside the accessible address space.
.I tv
か
.I tz
のどちらかがアクセス可能なアドレス空間外を指している。
.TP
.B EINVAL
.\"O Timezone (or something else) is invalid.
タイムゾーン (または他の何か) が不正である。
.TP
.B EPERM
.\"O The calling process has insufficient privilege to call
.\"O .BR settimeofday ();
.\"O under Linux the
.\"O .B CAP_SYS_TIME
.\"O capability is required.
呼び出し元プロセスに
.BR settimeofday ()
を呼び出すための十分な特権がない。
Linux では
.B CAP_SYS_TIME
ケーパビリティ (capability) が必要である。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O SVr4, 4.3BSD.
.\"O POSIX.1-2001 describes
.\"O .BR gettimeofday ()
.\"O but not
.\"O .BR settimeofday ().
SVr4, 4.3BSD に準拠する。
POSIX.1-2001 は
.BR gettimeofday ()
については記述しているが、
.BR settimeofday ()
については記述していない。
.\"O POSIX.1-2008 marks
.\"O .BR gettimeofday ()
.\"O as obsolete, recommending the use of
.\"O .BR clock_gettime (2)
.\"O instead.
POSIX.1-2008 では
.BR gettimeofday ()
は廃止予定とされており、
代わりに
.BR clock_gettime (2)
の使用が推奨されている。
.\"O .SH NOTES
.SH 注意
.LP
.\"O Traditionally, the fields of
.\"O .I struct timeval
.\"O were of type
.\"O .IR long .
昔は
.I struct timeval
のフィールドは
.I long
型であった。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR date (1),
.BR adjtimex (2),
.BR time (2),
.BR ctime (3),
.BR ftime (3),
.BR capabilities (7),
.BR time (7)
