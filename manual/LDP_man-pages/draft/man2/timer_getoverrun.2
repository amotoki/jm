.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH TIMER_GETOVERRUN 2 2009\-02\-20 Linux "Linux Programmer's Manual"
.SH 名前
timer_getoverrun \- get overrun count for a POSIX per\-process timer
.SH 書式
.nf
\fB#include <time.h>\fP

\fBint timer_getoverrun(timer_t \fP\fItimerid\fP\fB);\fP
.fi

Link with \fI\-lrt\fP.
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
\fBtimer_getoverrun\fP(): _POSIX_C_SOURCE\ >=\ 199309L
.SH 説明
\fBtimer_getoverrun\fP()  returns the "overrun count" for the timer referred to
by \fItimerid\fP.  An application can use the overrun count to accurately
calculate the number of timer expirations that would have occurred over a
given time interval.  Timer overruns can occur both when receiving
expiration notifications via signals (\fBSIGEV_SIGNAL\fP), and via threads
(\fBSIGEV_THREAD\fP).

When expiration notifications are delivered via a signal, overruns can occur
as follows.  Regardless of whether or not a real\-time signal is used for
timer notifications, the system queues at most one signal per timer.  (This
is the behavior specified by POSIX.1\-2001.  The alternative, queuing one
signal for each timer expiration, could easily result in overflowing the
allowed limits for queued signals on the system.)  Because of system
scheduling delays, or because the signal may be temporarily blocked, there
can be a delay between the time when the notification signal is generated
and the time when it is delivered (e.g., caught by a signal handler) or
accepted (e.g., using \fBsigwaitinfo\fP(2)).  In this interval, further timer
expirations may occur.  The timer overrun count is the number of additional
timer expirations that occurred between the time when the signal was
generated and when it was delivered or accepted.

Timer overruns can also occur when expiration notifications are delivered
via invocation of a thread, since there may be an arbitrary delay between an
expiration of the timer and the invocation of the notification thread, and
in that delay interval, additional timer expirations may occur
.SH 返り値
On success, \fBtimer_getoverrun\fP()  returns the overrun count of the
specified timer; this count may be 0 if no overruns have occurred.  On
failure, \-1 is returned, and \fIerrno\fP is set to indicate the error.
.SH エラー
.TP 
\fBEINVAL\fP
\fItimerid\fP is not a valid timer ID.
.SH バージョン
This system call is available since Linux 2.6.
.SH 準拠
POSIX.1\-2001.
.SH 注意
When timer notifications are delivered via signals (\fBSIGEV_SIGNAL\fP), on
Linux it is also possible to obtain the overrun count via the \fIsi_overrun\fP
field of the \fIsiginfo_t\fP structure (see \fBsigaction\fP(2)).  This allows an
application to avoid the overhead of making a system call to obtain the
overrun count, but is a nonportable extension to POSIX.1\-2001.

.\" FIXME . Austin bug filed, 11 Feb 09
POSIX.1\-2001 only discusses timer overruns in the context of timer
notifications using signals.
.SH バグ
.\" Bug filed: http://bugzilla.kernel.org/show_bug.cgi?id=12665
.\" http://thread.gmane.org/gmane.linux.kernel/113276/
POSIX.1\-2001 specifies that if the timer overrun count is equal to or
greater than an implementation\-defined maximum, \fBDELAYTIMER_MAX\fP, then
\fBtimer_getoverrun\fP()  should return \fBDELAYTIMER_MAX\fP.  However, Linux does
not implement this feature: instead, if the timer overrun value exceeds the
maximum representable integer, the counter cycles, starting once more from
low values.
.SH 例
See \fBtimer_create\fP(2).
.SH 関連項目
\fBclock_gettime\fP(2), \fBsigaction\fP(2), \fBsignalfd\fP(2), \fBsigwaitinfo\fP(2),
\fBtimer_create\fP(2), \fBtimer_delete\fP(2), \fBtimer_settime\fP(2), \fBsignal\fP(7),
\fBtime\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.40 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
