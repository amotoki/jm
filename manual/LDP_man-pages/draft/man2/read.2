.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"  and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"  and Copyright (C) 2009-2015 Michael Kerrisk, <mtk.manpages.gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1997-09-28, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2005-02-24, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-10-14, Akihiro MOTOKI
.\" Updated 2008-02-10, Akihiro MOTOKI, LDP v2.77
.\" Updated 2009-04-13, Akihiro MOTOKI, LDP v3.20
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH READ 2 2018\-02\-02 Linux "Linux Programmer's Manual"
.SH 名前
read \- ファイルディスクリプターから読み込む
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBssize_t read(int \fP\fIfd\fP\fB, void *\fP\fIbuf\fP\fB, size_t \fP\fIcount\fP\fB);\fP
.fi
.SH 説明
\fBread\fP()  はファイルディスクリプター (file descriptor)  \fIfd\fP から最大 \fIcount\fP バイトを \fIbuf\fP
で始まるバッファーへ読み込もうとする。
.PP
On files that support seeking, the read operation commences at the file
offset, and the file offset is incremented by the number of bytes read.  If
the file offset is at or past the end of file, no bytes are read, and
\fBread\fP()  returns zero.
.PP
\fIcount\fP が 0 の場合、 \fBread\fP() は以下で説明するエラーを検出する\fI場合がある\fP。 どのエラーもなかった場合、もしくは
\fBread\fP() がエラーのチェックを行わない場合、 \fIcount\fP が 0 で呼び出された \fBread\fP() は 0 を返し、何も行わない。
.PP
According to POSIX.1, if \fIcount\fP is greater than \fBSSIZE_MAX\fP, the result
is implementation\-defined; see NOTES for the upper limit on Linux.
.SH 返り値
On success, the number of bytes read is returned (zero indicates end of
file), and the file position is advanced by this number.  It is not an error
if this number is smaller than the number of bytes requested; this may
happen for example because fewer bytes are actually available right now
(maybe because we were close to end\-of\-file, or because we are reading from
a pipe, or from a terminal), or because \fBread\fP()  was interrupted by a
signal.  See also NOTES.
.PP
On error, \-1 is returned, and \fIerrno\fP is set appropriately.  In this case,
it is left unspecified whether the file position (if any) changes.
.SH エラー
.TP 
\fBEAGAIN\fP
The file descriptor \fIfd\fP refers to a file other than a socket and has been
marked nonblocking (\fBO_NONBLOCK\fP), and the read would block.  See
\fBopen\fP(2)  for further details on the \fBO_NONBLOCK\fP flag.
.TP 
\fBEAGAIN\fP または \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
ファイルディスクリプター \fIfd\fP がソケットを参照していて、非停止 (nonblocking) モード (\fBO_NONBLOCK\fP)
に設定されており、読み込みを行うと停止する状況にある。 POSIX.1\-2001 は、この場合にどちらのエラーを返すことも認めており、 これら 2
つの定数が同じ値を持つことも求めていない。 したがって、移植性が必要なアプリケーションでは、両方の可能性を 確認すべきである。
.TP 
\fBEBADF\fP
\fIfd\fP が有効なファイルディスクリプターでないか、読み込みのために オープン (open) されていない。
.TP 
\fBEFAULT\fP
\fIbuf\fP がアクセス可能なアドレス空間の外にある。
.TP 
\fBEINTR\fP
何のデータも読み込まないうちにシグナルに割り込まれた。 \fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
\fIfd\fP is attached to an object which is unsuitable for reading; or the file
was opened with the \fBO_DIRECT\fP flag, and either the address specified in
\fIbuf\fP, the value specified in \fIcount\fP, or the file offset is not suitably
aligned.
.TP 
\fBEINVAL\fP
\fIfd\fP が \fBtimerfd_create\fP(2)  の呼び出しで作成されたが、 \fBread\fP()  に間違ったサイズのバッファーが渡された。
さらなる情報は \fBtimerfd_create\fP(2)  を参照のこと。
.TP 
\fBEIO\fP
I/O error.  This will happen for example when the process is in a background
process group, tries to read from its controlling terminal, and either it is
ignoring or blocking \fBSIGTTIN\fP or its process group is orphaned.  It may
also occur when there is a low\-level I/O error while reading from a disk or
tape.  A further possible cause of \fBEIO\fP on networked filesystems is when
an advisory lock had been taken out on the file descriptor and this lock has
been lost.  See the \fILost locks\fP section of \fBfcntl\fP(2)  for further
details.
.TP 
\fBEISDIR\fP
\fIfd\fP がディレクトリを参照している。
.PP
\fIfd\fP に接続されたオブジェクトによっては、他のエラーが起こるかもしれない。
.SH 準拠
SVr4, 4.3BSD, POSIX.1\-2001.
.SH 注意
The types \fIsize_t\fP and \fIssize_t\fP are, respectively, unsigned and signed
integer data types specified by POSIX.1.
.PP
.\" commit e28cc71572da38a5a12c1cfe4d7032017adccf69
On Linux, \fBread\fP()  (and similar system calls) will transfer at most
0x7ffff000 (2,147,479,552) bytes, returning the number of bytes actually
transferred.  (This is true on both 32\-bit and 64\-bit systems.)
.PP
On NFS filesystems, reading small amounts of data will update the timestamp
only the first time, subsequent calls may not do so.  This is caused by
client side attribute caching, because most if not all NFS clients leave
\fIst_atime\fP (last file access time)  updates to the server, and client side
reads satisfied from the client's cache will not cause \fIst_atime\fP updates
on the server as there are no server\-side reads.  UNIX semantics can be
obtained by disabling client\-side attribute caching, but in most situations
this will substantially increase server load and decrease performance.
.SH バグ
POSIX.1\-2008/SUSv4 セクション XSI 2.9.7 ("Thread Interactions with Regular File
Operations") によると、
.PP
.RS 4
以下のすべての関数では、 通常ファイルもしくはシンボリックリンクに対する操作では POSIX.1\-2008
で規定された効果が互いにアトミックに行われなければならない: ...
.RE
.PP
.\" http://thread.gmane.org/gmane.linux.kernel/1649458
.\"    From: Michael Kerrisk (man-pages <mtk.manpages <at> gmail.com>
.\"    Subject: Update of file offset on write() etc. is non-atomic with I/O
.\"    Date: 2014-02-17 15:41:37 GMT
.\"    Newsgroups: gmane.linux.kernel, gmane.linux.file-systems
.\" commit 9c225f2655e36a470c4f58dbbc99244c5fc7f2d4
.\"    Author: Linus Torvalds <torvalds@linux-foundation.org>
.\"    Date:   Mon Mar 3 09:36:58 2014 -0800
.\"
.\"        vfs: atomic f_pos accesses as per POSIX
この後に書かれている API の中に \fBread\fP() と \fBreadv\fP(2) である。 スレッド（やプロセス)
間でアトミックに適用することが求められる効果の一つとして、 ファイルオフセットの更新がある。 しかしながら、 バージョン 3.14 より前の Linux
では、 この限りではない。 オープンファイル記述 (open file description) を共有する 2 つのプロセスが同時に
\fBread\fP() (や \fBreadv\fP(2)) を実行した場合、 この I/O 操作ではファイルオフセットの更新に関してはアトミックではなく、 2
つのプロセスの read で取得されるデータブロックが (間違って) 重なる可能性がある。 この問題は Linux 3.14 で修正された。
.SH 関連項目
\fBclose\fP(2), \fBfcntl\fP(2), \fBioctl\fP(2), \fBlseek\fP(2), \fBopen\fP(2), \fBpread\fP(2),
\fBreaddir\fP(2), \fBreadlink\fP(2), \fBreadv\fP(2), \fBselect\fP(2), \fBwrite\fP(2),
\fBfread\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
