.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sun Nov 28 17:06:19 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Luigi P. Bai <lpb@softint.com>
.\" Portions Copyright 1993 Luigi P. Bai
.\" Modified Tue Oct 22 22:04:23 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 5 Jan 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified, 19 Sep 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added SHM_REMAP flag description
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Changed wording and placement of sentence regarding attachment
.\"		of segments marked for destruction
.\"
.\" FIXME . Add an example program to this page.
.\" FIXME Linux 2.6.9 added SHM_EXEC, which should be documented
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-08-15, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2002-05-07, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2003-01-18, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-07, Yuichi SATO
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\" Updated 2006-04-14, Akihiro MOTOKI, Catch up to LDP man-pages 2.29
.\"
.\"WORD:	shared memory		共有メモリ
.\"WORD:	segment			セグメント
.\"WORD:	super-user		スーパー・ユーザー
.\"WORD:	detach			分離
.\"WORD:	attach			付加
.\"WORD:	member			メンバー
.\"WORD:	implement		実装
.\"WORD:	page aligned		ページ境界に合った
.\"WORD:	unaligned		境界違反
.\"WORD:	descriptor		ディスクリプター
.\"WORD:	parameter		パラメーター
.\"
.TH SHMOP 2 2008-06-03 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O shmop, shmat, shmdt \- shared memory operations
shmat, shmdt \- 共有メモリ (shared memory) の操作
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <sys/types.h>
.B #include <sys/shm.h>

.BI "void *shmat(int " shmid ", const void *" shmaddr ", int " shmflg );

.BI "int shmdt(const void *" shmaddr );
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR shmat ()
.\"O attaches the shared memory segment identified by
.\"O .I shmid
.\"O to the address space of the calling process.
.BR shmat ()
は
.I shmid
で指定された共有メモリ・セグメント (shared memory segment) を
コールしたプロセスのアドレス空間に付加 (attach) する。
.\"O The attaching address is specified by
.\"O .I shmaddr
.\"O with one of the following criteria:
付加するアドレスは
.I shmaddr
に以下のどれかの形式で指定する:
.LP
.\"O If
.\"O .I shmaddr
.\"O is NULL,
.\"O the system chooses a suitable (unused) address at which to attach
.\"O the segment.
.I shmaddr
が NULL ならば、システムはセグメントを付加するための
適切な (使用されていない) アドレスを選択する。
.LP
.\"O If
.\"O .I shmaddr
.\"O isn't NULL
.\"O and
.\"O .B SHM_RND
.\"O is specified in
.\"O .IR shmflg ,
.\"O the attach occurs at the address equal to
.\"O .I shmaddr
.\"O rounded down to the nearest multiple of
.\"O .BR SHMLBA .
.I shmaddr
が NULL でなく
.B SHM_RND
が
.I shmflg
に指定されている場合は、
.I shmaddr
を
.B SHMLBA
の倍数へと切り捨てた (rounding down) のと等しいアドレスへ付加する。
.\"O Otherwise
.\"O .I shmaddr
.\"O must be a page-aligned address at which the attach occurs.
その他の場合は
.I shmaddr
は付加を行なうアドレスで、ページ境界を指している必要がある。
.PP
.\"O If
.\"O .B SHM_RDONLY
.\"O is specified in
.\"O .IR shmflg ,
.\"O the segment is attached for reading and the process must have
.\"O read permission for the segment.
.B SHM_RDONLY
が
.I shmflg
に指定されていた場合は、
セグメントは読み込み専用に付加され、プロセスはそのセグメントへの
読み込み許可を持たなければならない。
.\"O Otherwise the segment is attached for read and write
.\"O and the process must have read and write permission for the segment.
.\"O There is no notion of a write-only shared memory segment.
そうでなければそのセグメントは読み込みと書き込みのために付加され、
プロセスはそのセグメントに読み込みと書き込みの許可を持つ必要がある。
書き込み専用の共有メモリ・セグメントという概念は存在しない。
.PP
.\"O The (Linux-specific)
.\"O .B SHM_REMAP
.\"O flag may be specified in
.\"O .I shmflg
.\"O to indicate that the mapping of the segment should replace
.\"O any existing mapping in the range starting at
.\"O .I shmaddr
.\"O and continuing for the size of the segment.
(Linux 特有の)
.B SHM_REMAP
フラグが
.I shmflg
に指定された場合は、
セグメントのマッピングを既存のマッピングに置き換える。
マッピングの範囲は、
.I shmaddr
から始まりセグメントのサイズ分だけある
.\"O (Normally an
.\"O .B EINVAL
.\"O error would result if a mapping already exists in this address range.)
.\"O In this case,
.\"O .I shmaddr
.\"O must not be NULL.
(通常
.B EINVAL
エラーは、このアドレス範囲にマッピングが既に存在するために起る)。
このフラグを指定する場合は、
.I shmaddr
が NULL であってはならない。
.PP
.\"O The
.\"O .BR brk (2)
.\"O value of the calling process is not altered by the attach.
呼び出したプロセスの
.BR brk (2)
の値は付加によって変化しない。
.\"O The segment will automatically be detached at process exit.
そのセグメントはプロセスが終了 (exit) したら自動的に分離 (detach) される。
.\"O The same segment may be attached as a read and as a read-write
.\"O one, and more than once, in the process's address space.
同じセグメントをプロセスのアドレス空間に、読み込み専用および読み書き両用
として付加でき、また複数回付加することもできる。
.PP
.\"O A successful
.\"O .BR shmat ()
.\"O call updates the members of the
.\"O .I shmid_ds
.\"O structure (see
.\"O .BR shmctl (2))
.\"O associated with the shared memory segment as follows:
成功した
.BR shmat ()
コールは共有メモリ・セグメントに関連する
.I shmid_ds
構造体
.RB ( shmctl (2)
を参照) のメンバーを以下のように更新する:
.IP
.\"O .I shm_atime
.\"O is set to the current time.
.I shm_atime
には現在の時刻を設定する。
.IP
.\"O .I shm_lpid
.\"O is set to the process-ID of the calling process.
.I shm_lpid
には呼び出したプロセスのプロセス ID を設定する。
.IP
.\"O .I shm_nattch
.\"O is incremented by one.
.I shm_nattch
を 1 増加させる。
.PP
.\"O .BR shmdt ()
.\"O detaches the shared memory segment located at the address specified by
.\"O .I shmaddr
.\"O from the address space of the calling process.
.BR shmdt ()
は呼び出したプロセスのアドレス空間から
.I shmaddr
で指定されたアドレスに配置された共有メモリ・セグメントを分離 (detach) する。
.\"O The to-be-detached segment must be currently
.\"O attached with
.\"O .I shmaddr
.\"O equal to the value returned by the attaching
.\"O .BR shmat ()
.\"O call.
分離する共有メモリ・セグメントは、現在
.I shmaddr
に付加されているものでなければならない。
.I shmaddr
は、それを付加した時に
.BR shmat ()
が返した値に等しくなければならない。
.PP
.\"O On a successful
.\"O .BR shmdt ()
.\"O call the system updates the members of the
.\"O .I shmid_ds
.\"O structure associated with the shared memory segment as follows:
成功した
.BR shmdt ()
コールはその共有メモリ・セグメントに関連する
.I shmid_ds
構造体のメンバーを以下のように更新する:
.IP
.\"O .I shm_dtime
.\"O is set to the current time.
.I shm_dtime
には現在の時刻が設定される。
.IP
.\"O .I shm_lpid
.\"O is set to the process-ID of the calling process.
.I shm_lpid
には呼び出したプロセスのプロセス ID が設定される。
.IP
.\"O .I shm_nattch
.\"O is decremented by one.
.I shm_nattch
を 1 減少させる。
.\"O If it becomes 0 and the segment is marked for deletion,
.\"O the segment is deleted.
もし 0 になり、削除マークがあった場合は
そのセグメントは削除される。
.PP
.\"O After a
.\"O .BR fork (2)
.\"O the child inherits the attached shared memory segments.
.BR fork (2)
した後、子プロセスは付加された共有メモリ・セグメントを継承する。

.\"O After an
.\"O .BR exec (2)
.\"O all attached shared memory segments are detached from the process.
.BR exec (2)
した後、全ての付加された共有メモリ・セグメントはプロセスから分離される。

.\"O Upon
.\"O .BR exit (2)
.\"O all attached shared memory segments are detached from the process.
.BR exit (2)
において、全ての付加された共有メモリ・セグメントはプロセスから分離される。
.PP
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success
.\"O .BR shmat ()
.\"O returns the address of the attached shared memory segment; on error
.\"O .I (void\ *)\ \-1
.\"O is returned, and
.\"O .I errno
.\"O is set to indicate the cause of the error.
.BR shmat ()
は、成功した場合、
付加された共有メモリ・セグメントのアドレスを返す。
エラーの場合、
.I (void\ *)\ \-1
を返し、
.I errno
にエラーの原因を示す値を設定する。

.\"O On success
.\"O .BR shmdt ()
.\"O returns 0; on error \-1 is returned, and
.\"O .I errno
.\"O is set to indicate the cause of the error.
.BR shmdt ()
は、成功すると 0 を返す。
エラーの場合、\-1 を返し、
.I errno
にエラーの原因を示す値を設定する。
.\"O .SH ERRORS
.SH エラー
.\"O When
.\"O .BR shmat ()
.\"O fails,
.\"O .I errno
.\"O is set to one of the following:
.BR shmat ()
が失敗した場合、
.I errno
に以下の値のどれかを設定して返す:
.TP
.B EACCES
.\"O The calling process does not have the required permissions for
.\"O the requested attach type, and does not have the
.\"O .B CAP_IPC_OWNER
.\"O capability.
呼び出したプロセスに要求された種類の付加に必要な許可がなく、
.B CAP_IPC_OWNER
ケーパビリティ (capability) がない。
.TP
.B EINVAL
.\"O Invalid
.\"O .I shmid
.\"O value, unaligned (i.e., not page-aligned and \fBSHM_RND\fP was not
.\"O specified) or invalid
.\"O .I shmaddr
.\"O value, or can't attach segment at
.\"O .IR shmaddr ,
.I shmid
の値が不正である。
.I shmaddr
の値が境界違反 (unaligned) (つまり、ページ境界に合っておらず、
\fBSHM_RND\fP が指定されていない) または
が不正である。
.I shmaddr
へのセグメントの付加に失敗した。
.\"O or
.\"O .B SHM_REMAP
.\"O was specified and
.\"O .I shmaddr
.\"O was NULL.
または
.B SHM_REMAP
が指定されているが、
.I shmaddr
が NULL であった。
.TP
.B ENOMEM
.\"O Could not allocate memory for the descriptor or for the page tables.
ディスクリプター (descriptor) やページ・テーブルのためのメモリを
割り当てることができない。
.PP
.\"O When
.\"O .BR shmdt ()
.\"O fails,
.\"O .I errno
.\"O is set as follows:
.BR shmdt ()
が失敗した場合、
.B EINVAL
は以下のようにセットされる:
.TP
.B EINVAL
.\"O There is no shared memory segment attached at
.\"O .IR shmaddr ;
.\"O or,
.\"O .\" The following since 2.6.17-rc1:
.\"O .I shmaddr
.\"O is not aligned on a page boundary.
.I shmaddr
に付加された共有メモリ・セグメントが存在しない。
もしくは、
.\" こちらは 2.6.17-rc1 以降の場合だけ。
.I shmaddr
がページ境界に合っていない。
.\"O .SH "CONFORMING TO"
.SH 準拠
SVr4, POSIX.1-2001.
.\"O .\" SVr4 documents an additional error condition EMFILE.
.\" SVr4 には他に EMFILE エラー状態についての記述がある。

.\"O In SVID 3 (or perhaps earlier)
.\"O the type of the \fIshmaddr\fP argument was changed from
.\"O .I "char *"
.\"O into
.\"O .IR "const void *" ,
.\"O and the returned type of
.\"O .BR shmat ()
.\"O from
.\"O .I "char *"
.\"O into
.\"O .IR "void *" .
.\"O (Linux libc4 and libc5 have the
.\"O .I "char *"
.\"O prototypes; glibc2 has
.\"O .IR "void *" .)
SVID 3 で (たぶんそれより前だと思うが)
\fIshmaddr\fP 引き数の型は
.I "char *"
から
.I "const void *"
に、\fIshmat\fP() の返り値の型は
.I "char *"
から
.I "void *"
に変更された
(Linux では libc4 と libc5 のプロトタイプは
.I "char *"
であり、glibc2 のプロトタイプは
.I "void *"
である)。
.\"O .SH NOTES
.SH 注意
.\"O Using
.\"O .BR shmat ()
.\"O with
.\"O .I shmaddr
.\"O equal to NULL
.\"O is the preferred, portable way of attaching a shared memory segment.
共有メモリセグメントを付加する場合の移植性の高い方法としては、
.I shmaddr
を NULL にして
.BR shmat ()
を使用するのがよい。
.\"O Be aware that the shared memory segment attached in this way
.\"O may be attached at different addresses in different processes.
このような方法で付加される共有メモリセグメントは、
プロセスが異なれば別のアドレスに付加される、という点に注意すること。
.\"O Therefore, any pointers maintained within the shared memory must be
.\"O made relative (typically to the starting address of the segment),
.\"O rather than absolute.
よって共有メモリ内で管理されるポインタは、
絶対アドレスではなく、
(一般的にはセグメントの開始アドレスからの)
相対アドレスで作成するべきである。
.PP
.\"O On Linux, it is possible to attach a shared memory segment even if it
.\"O is already marked to be deleted.
.\"O However, POSIX.1-2001 does not specify this behavior and
.\"O many other implementations do not support it.
Linux では共有メモリセグメントに既に削除マークが付けられていても、
その共有メモリセグメントを付加することができる。
しかし POSIX.1-2001 ではこのような動作を指定しておらず、
他の多くの実装もこれをサポートしていない。
.LP
.\"O The following system parameter affects
.\"O .BR shmat ():
以下のシステム・パラメーターは、
.BR shmat ()
に影響する:
.TP
.\" FIXME A good explanation of the rationale for the existence
.\" of SHMLBA would be useful here
.B SHMLBA
.\"O Segment low boundary address multiple.
.\"O Must be page aligned.
.\"O For the current implementation the
.\"O .B SHMLBA
.\"O value is
.\"O .BR PAGE_SIZE .
セグメントの境界アドレスの最小倍数。ページ境界に合ってなければならない。
現在の実装では
.B SHMLBA
の値は
.B PAGE_SIZE
である。
.\" FIXME That last sentence isn't true for all Linux
.\" architectures (i.e., SHMLBA != PAGE_SIZE for some architectures)
.\" -- MTK, Nov 04
.PP
.\"O The implementation places no intrinsic limit on the per-process maximum
.\"O number of shared memory segments
.\"O .RB ( SHMSEG ).
現在の実装では、プロセスごとの
共有メモリ・セグメントの最大数
.RB ( SHMSEG )
に関する実装依存の制限はない。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR brk (2),
.BR mmap (2),
.BR shmctl (2),
.BR shmget (2),
.BR capabilities (7),
.BR shm_overview (7),
.BR svipc (7)
