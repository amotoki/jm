.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\" and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2002 Akihiro MOTOKI, all rights reserved.
.\" Translated Mon Mar  5 2003 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated Sun Sep 14 JST 2003 by Akihiro MOTOKI
.\" Updated 2008-02-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\" Updated 2008-08-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.TH GETTID 2 2008-04-14 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O gettid \- get thread identification
gettid \- スレッドID を取得する
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <sys/types.h>
.sp
.B pid_t gettid(void);
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR gettid ()
.\"O returns the caller's thread ID (TID).
.\"O In a single-threaded process, the thread ID
.\"O is equal to the process ID (PID, as returned by
.\"O .BR getpid (2)).
.\"O In a multithreaded process, all threads
.\"O have the same PID, but each one has a unique TID.
.BR gettid ()
は呼び出し元のスレッド ID (TID) を返す。
シングルスレッドのプロセスでは、スレッド ID は
.RB ( getpid (2)
が返すプロセス ID (PID) と等しい。
マルチスレッドのプロセスでは、全てのスレッドは同じ PID を持つが、
それぞれのスレッドは一意な TID を持つ。
.\"O For further details, see the discussion of
.\"O .BR CLONE_THREAD
.\"O in
.\"O .BR clone (2).
さらなる詳細は、
.BR clone (2)
の
.BR CLONE_THREAD
についての議論を参照すること。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success, returns the thread ID of the calling process.
成功の場合、呼び出し元のプロセスのスレッドID を返す。
.\"O .SH ERRORS
.SH エラー
.\"O This call is always successful.
このコールは常に成功する。
.\"O .SH VERSIONS
.SH バージョン
.\"O The
.\"O .BR gettid ()
.\"O system call first appeared on Linux in kernel 2.4.11.
.BR gettid ()
システムコールは、カーネル 2.4.11 の Linux で初めて登場した。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O .BR gettid ()
.\"O is Linux-specific and should not be used in programs that
.\"O are intended to be portable.
.BR gettid ()
は Linux 固有であり、
移植を想定したプログラムでは使用すべきではない。
.\"O .SH NOTES
.SH 注意
.\"O Glibc does not provide a wrapper for this system call; call it using
.\"O .BR syscall (2).
glibc はこのシステムコールに対するラッパー関数を提供していない。
.BR syscall (2)
を使って呼び出すこと。
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=6399
.\" "gettid() should have a wrapper"

.\"O The thread ID returned by this call is not the same thing as a
.\"O POSIX thread ID (i.e., the opaque value returned by
.\"O .BR pthread_self (3)).
このシステムコールが返すスレッド ID は
POSIX スレッド ID
.RB ( pthread_self (3)
が返す曖昧な値) と同じものではない。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR clone (2),
.BR fork (2),
.BR getpid (2)
