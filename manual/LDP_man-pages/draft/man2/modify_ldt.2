.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1995 Michael Chastain (mec@duracef.shout.net), 22 July 1995.
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2005-02-24, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2007-06-18, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.57
.\"
.\"WORD:	ldt			ldt
.\"WORD:	local descriptor table	ローカル・ディスクリプタ・テーブル
.\"WORD:	processer		プロセッサ
.\"WORD:	entry			エントリ
.\"
.TH MODIFY_LDT 2 2007-06-01 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O modify_ldt \- get or set ldt
modify_ldt \- ldt を設定または取得する
.\"O .SH SYNOPSIS
.SH 書式
.nf
.B #include <sys/types.h>
.sp
.BI "int modify_ldt(int " "func" ", void *" "ptr" ", unsigned long " "bytecount" );
.fi
.\"O .SH DESCRIPTION
.SH 説明
.\"O .BR modify_ldt ()
.\"O reads or writes the local descriptor table (ldt) for a process.
.\"O The ldt is a per-process memory management table used by the i386 processor.
.\"O For more information on this table, see an Intel 386 processor handbook.
.BR modify_ldt ()
はプロセスのローカル・ディスクリプタ・テーブル (local descriptor table; ldt)
を読み書きする。
ldt は i386 プロセッサで使用されるプロセスごとのメモリ管理テーブルである。
このテーブルに関してのより詳しい情報は Intel 386 processor handbook を
参照すること。
.PP
.\"O When
.\"O .I func
.\"O is 0,
.\"O .BR modify_ldt ()
.\"O reads the ldt into the memory pointed to by
.\"O .IR ptr .
.I func
が 0 ならば、
.BR modify_ldt ()
は ldt を
.I ptr
が指しているメモリに読み込む。
.\"O The number of bytes read is the smaller of
.\"O .I bytecount
.\"O and the actual size of the ldt.
読み込むバイト数は実際の ldt のサイズか
.I bytecount
より小さい方である。
.PP
.\"O When
.\"O .I func
.\"O is 1,
.\"O .BR modify_ldt ()
.\"O modifies one ldt entry.
.I func
が 1 ならば、
.BR modify_ldt ()
は ldt エントリの一つを変更する。
.\"O .I ptr
.\"O points to a
.\"O .I user_desc
.\"O structure
.\"O and
.\"O .I bytecount
.\"O must equal the size of this structure.
.I ptr
は
.I user_desc
構造体を指し、
.I bytecount
はこの構造体の大きさに等しくなければならない。
.\"
.\" FIXME ? say something about func == 2 ans func == 0x11?
.\" In Linux 2.4, func == 2 returned "the default ldt"
.\" In Linux 2.6, func == 2 is a nop, returning a zeroed out structure.
.\" Linux 2.4 and 2.6 implement an operation for func == 0x11

.\"O The
.\"O .I user_desc
.\"O structure is defined in \fI<asm/ldt.h>\fP as:
.I user_desc
構造体は \fI<asm/ldt.h>\fP で以下のように定義されている:
.in +4n
.nf

struct user_desc {
    unsigned int  entry_number;
    unsigned long base_addr;
    unsigned int  limit;
    unsigned int  seg_32bit:1;
    unsigned int  contents:2;
    unsigned int  read_exec_only:1;
    unsigned int  limit_in_pages:1;
    unsigned int  seg_not_present:1;
    unsigned int  useable:1;
};
.fi
.in
.PP
.\"O In Linux 2.4 and earlier, this structure was named
.\"O .IR modify_ldt_ldt_s .
Linux 2.4 以前では、この構造体は
.I modify_ldt_ldt_s
という名前であった。
.\" .PP
.\"O .\" The ldt is specific for the calling process. Any attempts to change
.\"O .\" the ldt to include the address space of another process or the kernel
.\"O .\" will result in a segmentation violation when trying to access the memory
.\"O .\" outside of the process address space. The memory protection is enforced
.\"O .\" at the paging layer.
.\" ldt は呼び出し元プロセスに固有のものである。
.\" 他のプロセスやカーネルのアドレス空間を含むように ldt を変更しようすると、
.\" プロセスアドレス空間の外のメモリにアクセスしようとしたときに、
.\" セグメンテーション違反 (segmentation violation) になる。
.\" メモリ保護はページングレイヤで実施される。
.\"O .SH "RETURN VALUE"
.SH 返り値
.\"O On success,
.\"O .BR modify_ldt ()
.\"O returns either the actual number of bytes read (for reading)
.\"O or 0 (for writing).
成功した場合は、
.BR modify_ldt ()
は (読み込みの場合は) 実際に読み込んだバイト数、
または (書き込みの場合は) 0 を返す。
.\"O On failure,
.\"O .BR modify_ldt ()
.\"O returns \-1 and sets
.\"O .I errno
.\"O to indicate the error.
失敗した場合は
.BR modify_ldt ()
は \-1 を返し、
.I errno
をエラーを示す値に設定する。
.\"O .SH ERRORS
.SH エラー
.TP
.B EFAULT
.\"O .I ptr
.\"O points outside the address space.
.I ptr
がアドレス空間の外を指している。
.TP
.B EINVAL
.\"O .I ptr
.\"O is 0,
.\"O or
.\"O .I func
.\"O is 1 and
.\"O .I bytecount
.\"O is not equal to the size of the structure
.\"O .IR modify_ldt_ldt_s ,
.\"O or
.\"O .I func
.\"O is 1 and the new ldt entry has invalid values.
.I ptr
が 0 である、
または
.I func
が 1 で
.I bytecount
が
.I modify_ldt_ldt_s
構造体のサイズと等しくないか、
.I func
が 1 で新しい ldt エントリが無効な値である。
.TP
.B ENOSYS
.\"O .I func
.\"O is neither 0 nor 1.
.I func
が 0 でも 1 でもない。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O This call is Linux-specific and should not be used in programs intended
.\"O to be portable.
このコールは Linux 特有であり、移植を意図したプログラムでは
使用してはいけない。
.\"O .SH NOTES
.SH 注意
.\"O Glibc does not provide a wrapper for this system call; call it using
.\"O .BR syscall (2).
glibc はこのシステムコールに対するラッパー関数を提供していない。
.BR syscall (2)
を使って呼び出すこと。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR vm86 (2)
