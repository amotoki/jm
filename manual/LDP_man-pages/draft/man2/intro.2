.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" 2007-10-23 mtk: moved the _syscallN specific material to the
.\"     new _syscall(2) page, and substantially enhanced and rewrote
.\"     the remaining material on this page.
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-02-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" 
.TH INTRO 2 2010-11-11 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O intro \- Introduction to system calls
intro \- システムコールの説明
.\"O .SH DESCRIPTION
.SH 説明
.\"O Section 2 of the manual describes the Linux system calls.
.\"O A system call is an entry point into the Linux kernel.
.\"O Usually, system calls are not invoked directly:
.\"O instead, most system calls have corresponding C library
.\"O wrapper functions which perform the steps required
.\"O (e.g., trapping to kernel mode) in order to invoke
.\"O the system call.
.\"O Thus, making a system call looks the same as invoking a normal
.\"O library function.
マニュアルの 2 章では Linux のシステムコールについて説明している。
システムコールは Linux カーネルへのエントリポイントである。
通常は、システムコールは直接起動される訳ではなく、
ほとんどのシステムコールには対応する C ライブラリのラッパー関数があり、
そのラッパー関数がシステムコールを呼び出すのに必要な処理を実行する。
そのため、システムコールを呼び出すのは通常のライブラリ関数を呼び出すのと
同じように見える。

.\"O For a list of the Linux system calls, see
.\"O .BR syscalls (2).
Linux のシステムコールのリストについては
.BR syscalls (2)
を参照のこと。
.\"O .SH RETURN VALUE
.SH 返り値
.\"O On error, most system calls return a negative error number
.\"O (i.e., the negated value of one of the constants described in
.\"O .BR errno (3)).
.\"O The C library wrapper hides this detail from the caller: when a
.\"O system call returns a negative value, the wrapper copies the
.\"O absolute value into the
.\"O .I errno
.\"O variable, and returns \-1 as the return value of the wrapper.
エラーの場合、ほとんどのシステムコールは負のエラー番号を返す
(具体的には
.BR errno (3)
で説明されている定数のいずれかを負にした値を返す)。
C ライブラリのラッパーは呼び出し元からこうした詳細を隠蔽している。
システムコールが負の値を返した場合、ラッパーは絶対値を
.I errno
変数にコピーし、ラッパーの返り値として \-1 を返す。

.\"O The value returned by a successful system call depends on the call.
.\"O Many system calls return 0 on success, but some can return nonzero
.\"O values from a successful call.
.\"O The details are described in the individual manual pages.
成功時にシステムコールが返す値はシステムコールにより異なる。
多くのシステムコールは成功時に 0 を返すが、
成功時に 0 以外の値を返すシステムコールもある。
詳細は個々のマニュアルページで説明されている。

.\"O In some cases,
.\"O the programmer must define a feature test macro in order to obtain
.\"O the declaration of a system call from the header file specified
.\"O in the man page SYNOPSIS section.
.\"O (Where required, these feature test macros must be defined before including
.\"O .I any
.\"O header files.)
.\"O In such cases, the required macro is described in the man page.
.\"O For further information on feature test macros, see
.\"O .BR feature_test_macros (7).
マニュアルページの「書式」の節に規定されたヘッダファイルから関数の定義を
得るために、プログラマが機能検査マクロを定義しなければならない場合がある
(機能検査マクロの定義が必要な場合、これらの機能検査マクロの定義は
「どの」ヘッダファイルのインクルードよりも前で行われなければならない)。
このような場合には、必要なマクロがマニュアルページで説明されている。
機能検査マクロのさらなる情報については、
.BR feature_test_macros (7)
を参照のこと。
.\"O .SH "CONFORMING TO"
.SH 準拠
.\"O Certain terms and abbreviations are used to indicate UNIX variants
.\"O and standards to which calls in this section conform.
.\"O See
.\"O .BR standards (7).
この章の関数が準拠する UNIX システムや標準を示すのにいくつかの単語や略号が
使用されている。
.BR standards (7)
を参照のこと。
.\"O .SH NOTES
.SH 注意
.\"O .SS "Calling Directly"
.SS "直接呼び出す"
.\"O In most cases, it is unnecessary to invoke a system call directly,
.\"O but there are times when the Standard C library does not implement
.\"O a nice wrapper function for you.
.\"O In this case, the programmer must manually invoke the system call using
.\"O .BR syscall (2).
.\"O Historically, this was also possible using one of the _syscall macros
.\"O described in
.\"O .BR _syscall (2).
ほとんどの場合、直接システムコールを呼び出す必要はないが、
場合によっては標準 C ライブラリに適切な関数が実装されていないこともある。
このような場合は、プログラマは
.BR syscall (2)
を使って、自分でシステムコールを呼び出さなければならない。
過去には、
.BR _syscall (2)
マクロの一つを使ってシステムコールの呼び出すこともできた。
.\"O .SS Authors and Copyright Conditions
.SS "著者と著作権"
.\"O Look at the header of the manual page source for the author(s) and copyright
.\"O conditions.
.\"O Note that these can be different from page to page!
著者と著作権 (copyright) に関しては各マニュアル・ページのソースのヘッダを
見ること。これらはページごとに異っている。
.\"O .SH "SEE ALSO"
.SH 関連項目
.ad l
.nh
.BR _syscall (2),
.BR syscall (2),
.BR syscalls (2),
.BR errno (3),
.BR intro (3),
.BR capabilities (7),
.BR credentials (7),
.BR feature_test_macros (7),
.BR mq_overview (7),
.BR path_resolution (7),
.BR pipe (7),
.BR pty (7),
.BR sem_overview (7),
.BR shm_overview (7),
.BR signal (7),
.BR svipc (7),
.BR standards (7),
.BR socket (7),
.BR symlink (7),
.BR time (7)
