.\" Copyright (c) 1997 John S. Kallal (kallal@voicenet.com)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" Some changes by tytso and aeb.
.\"
.\" 2004-12-16, John V. Belmonte/mtk, Updated init and quit scripts
.\" 2004-04-08, AEB, Improved description of read from /dev/urandom
.\" 2008-06-20, George Spelvin <linux@horizon.com>,
.\"             Matt Mackall <mpm@selenic.com>
.\"     Add a Usage subsection that recommends most users to use
.\"     /dev/urandom, and emphasizes parsimonious usage of /dev/random.
.\"
.\" Japanese Version Copyright (c) 1998
.\"           ISHIKAWA Mutsumi, all rights reserved.
.\" Translated into Japanese Mon Jan 12 03:20:27 JST 1998
.\"         by ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Japanese Version Last Modified Thu Feb  5 21:08:33 JST 1998
.\"	by ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Updated & Modified Sun Jun  6 14:48:03 JST 2004
.\"	by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Tue Jan 18 04:21:16 JST 2005 by Yuichi SATO
.\" Updated & Modified Fri Apr 22 03:44:01 JST 2005 by Yuichi SATO
.\" Updated 2008-08-13, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.\"WORD:	random generator	乱数ジェネレータ
.\"
.TH RANDOM 4 2010-08-29 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O random, urandom \- kernel random number source devices
random, urandom \- カーネル乱数ソースデバイス
.\"O .SH DESCRIPTION
.SH 説明
.\"O The character special files \fI/dev/random\fP and
.\"O \fI/dev/urandom\fP (present since Linux 1.3.30)
.\"O provide an interface to the kernel's random number generator.
(Linux 1.3.30 から提供されている) \fI/dev/random\fP 、
\fI/dev/urandom\fP キャラクタスペシャルファイルは
カーネル乱数ジェネレータへのインタフェースを提供する。
.\"O File \fI/dev/random\fP has major device number 1
.\"O and minor device number 8.
.\"O File \fI/dev/urandom\fP has major device number 1 and minor device number 9.
\fI/dev/random\fP ファイルはメジャーデバイス番号 1
マイナーデバイス番号 8 である。
\fI/dev/urandom\fP はメジャーデバイス番号 1
マイナーデバイス番号 9 である。
.LP
.\"O The random number generator gathers environmental noise
.\"O from device drivers and other sources into an entropy pool.
乱数ジェネレータはデバイスドライバやその他の源からの環境ノイズを
エントロピー・プールへ集める。
.\"O The generator also keeps an estimate of the
.\"O number of bits of noise in the entropy pool.
また、ジェネレータはエントロピー・プール内のノイズのビット数の推定値を
保持する。
.\"O From this entropy pool random numbers are created.
このエントロピー・プールから乱数が生成される。
.LP
.\"O When read, the \fI/dev/random\fP device will only return random bytes
.\"O within the estimated number of bits of noise in the entropy
.\"O pool.
.\"O \fI/dev/random\fP should be suitable for uses that need very
.\"O high quality randomness such as one-time pad or key generation.
読み込みが行われると、
\fI/dev/random\fP
デバイスはエントロピー・プールのノイズビットの数の推定値のうち、
ランダムバイトのみを返す。
\fI/dev/random\fP はワンタイムパッド (one-time pad) や鍵の生成のような
非常に高い品質を持った無作為性が必要になる用途に向いているだろう。
.\"O When the entropy pool is empty, reads from \fI/dev/random\fP will block
.\"O until additional environmental noise is gathered.
エントロピー・プールが空の時は、\fI/dev/random\fP からの読み出しは、
更なる環境ノイズが得られるまで、ブロックされる。
.LP
.\"O A read from the \fI/dev/urandom\fP device will not block
.\"O waiting for more entropy.
.\"O As a result, if there is not sufficient entropy in the
.\"O entropy pool, the returned values are theoretically vulnerable to a
.\"O cryptographic attack on the algorithms used by the driver.
.\"O Knowledge of how to do this is not available in the current unclassified
.\"O literature, but it is theoretically possible that such an attack may
.\"O exist.
.\"O If this is a concern in your application, use \fI/dev/random\fP
.\"O instead.
\fI/dev/urandom\fP デバイスから読み出しでは、
エントロピーがより高くなるのを待つためのブロックは行われない。
その結果、もしエントロピー・プールに十分なエントロピーが存在しない場合、
返り値はこのドライバで使われているアルゴリズムに基づく暗号攻撃に対して、
論理的には弱くなることになる。
この攻撃をどのように行うかという事については、現在研究論文などの
形で入手できる資料はない、しかし、そのような攻撃は論理的に存在可能である。
もし、この事が心配なら、(\fI/dev/urandom\fP ではなく)
\fI/dev/random\fP を利用すればいい。
.\"O .SS Usage
.SS 使い方
.\"O If you are unsure about whether you should use
.\"O .IR /dev/random
.\"O or
.\"O .IR /dev/urandom ,
.\"O then probably you want to use the latter.
.\"O As a general rule,
.\"O .IR /dev/urandom
.\"O should be used for everything except long-lived GPG/SSL/SSH keys.
.I /dev/random
と
.I /dev/urandom
のどちらを使うべきか迷った場合、たいていは
.I /dev/urandom
の方を使いたいと思っているはずだろう。
一般に、長期に渡って使われる GPG/SSL/SSH のキー以外の全てのものに
.I /dev/urandom
を使用すべきである。

.\"O If a seed file is saved across reboots as recommended below (all major
.\"O Linux distributions have done this since 2000 at least), the output is
.\"O cryptographically secure against attackers without local root access as
.\"O soon as it is reloaded in the boot sequence, and perfectly adequate for
.\"O network encryption session keys.
.\"O Since reads from
.\"O .I /dev/random
.\"O may block, users will usually want to open it in nonblocking mode
.\"O (or perform a read with timeout),
.\"O and provide some sort of user notification if the desired
.\"O entropy is not immediately available.
下記で推奨しているように再起動の前後で乱数種ファイルが保存される場合
(全ての主な Linux のディストリビューションは少なくとも 2000 年以降は
乱数種を保存するようになっている)、起動シーケンスにおいて乱数種が
再ロードされた直後から、その出力はローカルのルートアクセスができない
攻撃者に対して暗号的に安全なものとなり、ネットワーク暗号化のセッションキー
として使うには完全に最適なものとなる。
.I /dev/random
からの読み出しは停止 (block) する可能性があるので、ユーザは普通
このファイルを非停止 (nonblocking) モードで開こうとし
(もしくはタイムアウトを指定して読み出しを実行し)、希望するレベルの
エントロピーはすぐには利用できない場合には、何らかの通知を行うことだろう。

.\"O The kernel random-number generator is designed to produce a small
.\"O amount of high-quality seed material to seed a
.\"O cryptographic pseudo-random number generator (CPRNG).
.\"O It is designed for security, not speed, and is poorly
.\"O suited to generating large amounts of random data.
.\"O Users should be very economical in the amount of seed
.\"O material that they read from
.\"O .IR /dev/urandom
.\"O (and
.\"O .IR /dev/random );
.\"O unnecessarily reading large quantities of data from this device will have
.\"O a negative impact on other users of the device.
カーネルの乱数ジェネレータは、暗号疑似乱数ジェネレータ (Cryptographic
pseudo-random number generator; CPRNG) の種として使用できる
高品質な乱数種の材料を少し生成するために設計されている。
これは速度ではなく安全性を重視して設計されており、
ランダムなデータを大量に生成するのには全くもって適していない。
ユーザは
.I /dev/urandom
(と
.IR /dev/random )
から読み出す乱数種の材料の量をできるだけ節約すべきである。
このデバイスから不必要に大量のデータを読み出すと、このデバイスを使う
他のユーザにマイナスの影響を与えてしまうだろう。

.\"O The amount of seed material required to generate a cryptographic key
.\"O equals the effective key size of the key.
.\"O For example, a 3072-bit RSA
.\"O or Diffie-Hellman private key has an effective key size of 128 bits
.\"O (it requires about 2^128 operations to break) so a key generator only
.\"O needs 128 bits (16 bytes) of seed material from
.\"O .IR /dev/random .
暗号鍵を生成するのに必要な乱数種の材料の量は、鍵の実効サイズと同じである。
例えば、3072 ビットの RSA および Diffie-Hellman の秘密鍵の実効サイズは
128 ビット (この秘密鍵を破るには 2^128 回の操作が必要ということ) であり、
そのため鍵生成器が
.I /dev/random
から読み出す必要がある乱数種の材料の量は 128 ビット (16 バイト) だけである。

.\"O While some safety margin above that minimum is reasonable, as a guard
.\"O against flaws in the CPRNG algorithm, no cryptographic primitive
.\"O available today can hope to promise more than 256 bits of security,
.\"O so if any program reads more than 256 bits (32 bytes) from the kernel
.\"O random pool per invocation, or per reasonable reseed interval (not less
.\"O than one minute), that should be taken as a sign that its cryptography is
.\"O .I not
.\"O skilfully implemented.
CPRNG アルゴリズムの欠陥に対する保護として、この最小値に対していくらかの
安全上のマージンを取るのはもっともだが、現在利用可能な暗号プリミティブで
256 ビットより多くの安全な乱数を必要とするようなものはない。
起動する度に、もしくは乱数種を変更する妥当な間隔 (1 分より短くなることはない)
の度に、カーネルの乱数プールから 256 ビット (32 バイト) よりたくさん読み出す
ような場合には、そのプログラムの暗号処理がうまく実装されて「いない」可能性が
あると考えるべきであろう。
.\"O .SS Configuration
.SS 設定
.\"O If your system does not have
.\"O \fI/dev/random\fP and \fI/dev/urandom\fP created already, they
.\"O can be created with the following commands:
システムにあらかじめ作成された \fI/dev/random\fP と
\fI/dev/urandom\fP が存在しないなら、次のようなコマンドで作成できる。
.nf

    mknod \-m 644 /dev/random c 1 8
    mknod \-m 644 /dev/urandom c 1 9
    chown root:root /dev/random /dev/urandom
.fi

.\"O When a Linux system starts up without much operator interaction,
.\"O the entropy pool may be in a fairly predictable state.
オペレータの操作なしに Linux システムが起動した直後は、
エントロピー・プールは意外性の乏しい均一な状態にあるだろう。
.\"O This reduces the actual amount of noise in the entropy pool
.\"O below the estimate.
.\"O In order to counteract this effect, it helps to carry
.\"O entropy pool information across shut-downs and start-ups.
これにより、エントロピー・プールの実際のノイズ量は評価値より少なくなる。
この効果を打ち消すために、シャットダウンから (次の) 起動時まで持ち越した
エントロピー・プールの情報が助けになる。
.\"O To do this, add the following lines to an appropriate script
.\"O which is run during the Linux system start-up sequence:
エントロピー・プールを持ち越すためには、
Linux システムの起動時に実行される適切なスクリプトに、
以下の行を追加すればよい:
.nf

    echo "Initializing random number generator..."
    random_seed=/var/run/random-seed
.\"O     # Carry a random seed from start-up to start-up
.\"O     # Load and then save the whole entropy pool
    # 乱数種を今回のスタートアップから次回のスタートアップまで持ち越す。
    # ロードを行い、その後、全てのエントロピー・プールを保存する。
    if [ \-f $random_seed ]; then
        cat $random_seed >/dev/urandom
    else
        touch $random_seed
    fi
    chmod 600 $random_seed
    poolfile=/proc/sys/kernel/random/poolsize
    [ \-r $poolfile ] && bytes=\`cat $poolfile\` || bytes=512
    dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi

.\"O Also, add the following lines in an appropriate script which is
.\"O run during the Linux system shutdown:
また、Linux システムのシャットダウン時に実行される適切なスクリプトに、
以下の行を追加すればよい:
.nf

.\"O     # Carry a random seed from shut-down to start-up
.\"O     # Save the whole entropy pool
    # 乱数種を今回のシャットダウンから次回のスタートアップまで持ち越す。
    # 全てのエントロピー・プールを保存する。
    echo "Saving random seed..."
    random_seed=/var/run/random-seed
    touch $random_seed
    chmod 600 $random_seed
    poolfile=/proc/sys/kernel/random/poolsize
    [ \-r $poolfile ] && bytes=\`cat $poolfile\` || bytes=512
    dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi
.\"O .SS "/proc Interface"
.SS "/proc インタフェース"
.\"O The files in the directory
.\"O .I /proc/sys/kernel/random
.\"O (present since 2.3.16) provide an additional interface to the
.\"O .I /dev/random
.\"O device.
ディレクトリ
.I /proc/sys/kernel/random
にあるファイル (2.3.16 から存在する) は、
.I /dev/random
デバイスへのその他のインタフェースを提供する。
.LP
.\"O The read-only file
.\"O .I entropy_avail
.\"O gives the available entropy.
.\"O Normally, this will be 4096 (bits),
.\"O a full entropy pool.
読み込み専用のファイル
.I entropy_avail
は使用可能なエントロピーを表す。
通常、これは 4096 (ビット) になり、エントロピー・プールが満杯の状態である。
.LP
.\"O The file
.\"O .I poolsize
.\"O gives the size of the entropy pool.
ファイル
.I poolsize
はエントロピー・プールのサイズを表す。
.\"O The semantics of this file vary across kernel versions:
このファイルの意味はカーネルバージョンにより異なる。
.RS
.TP 12
Linux 2.4:
.\"O This file gives the size of the entropy pool in
.\"O .IR bytes .
.\"O Normally, this file will have the value 512, but it is writable,
.\"O and can be changed to any value for which an algorithm is available.
.\"O The choices are 32, 64, 128, 256, 512, 1024, or 2048.
このファイルはエントロピー・プールのサイズを「バイト」単位で規定する。
通常、このファイルの値は 512 になるが、書き込み可能であり、
アルゴリズムで利用可能な任意の値に変更できる。
選択可能な値は 32, 64, 128, 256, 512, 1024, 2048 である。
.TP
Linux 2.6:
.\"O This file is read-only, and gives the size of the entropy pool in
.\"O .IR bits .
.\"O It contains the value 4096.
このファイルは読み出し専用であり、
エントロピー・プールのサイズを「ビット」単位で規定する。
値は 4096 である。
.RE
.LP
.\"O The file
.\"O .I read_wakeup_threshold
.\"O contains the number of bits of entropy required for waking up processes
.\"O that sleep waiting for entropy from
.\"O .IR /dev/random .
ファイル
.I read_wakeup_threshold
は
.I /dev/random
からのエントロピーを待って休止しているプロセスを起こすのに必要な
エントロピーのビット数を保持している。
.\"O The default is 64.
デフォルトは 64 である。
.\"O The file
.\"O .I write_wakeup_threshold
.\"O contains the number of bits of entropy below which we wake up
.\"O processes that do a
.\"O .BR select (2)
.\"O or
.\"O .BR poll (2)
.\"O for write access to
.\"O .IR /dev/random .
ファイル
.I write_wakeup_threshold
はエントロピーのビット数を保持しており、この値以下になったら
.I /dev/random
への書き込みアクセスのために
.BR select (2)
または
.BR poll (2)
を実行するプロセスを起こす。
.\"O These values can be changed by writing to the files.
この値はファイルに書き込みを行うことによって変更できる。
.LP
.\"O The read-only files
.\"O .I uuid
.\"O and
.\"O .I boot_id
.\"O contain random strings like 6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9.
読み込み専用のファイル
.I uuid
と
.I boot_id
は 6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9 のような
ランダムな文字列を保持している。
.\"O The former is generated afresh for each read, the latter was
.\"O generated once.
前者は読み込みの度に新たに生成され、
後者は 1 度だけ生成される。
.\"O .SH FILES
.SH ファイル
/dev/random
.br
/dev/urandom
.\"O .\" .SH AUTHOR
.\" .SH 著者
.\"O .\" The kernel's random number generator was written by
.\"O .\" Theodore Ts'o (tytso@athena.mit.edu).
.\" カーネル・ランダムナンバー・ジェネレータは Theodora Ts'o
.\" (tytso@athena.mit.edu) によって書かれた。
.\"O .SH "SEE ALSO"
.SH 関連項目
mknod (1)
.br
RFC\ 1750, "Randomness Recommendations for Security"
.\" .SH 翻訳者
.\" 石川 睦 <ishikawa@linux.or.jp>
