.\" Copyright (c) 1995 Jim Van Zandt <jrv@vanzandt.mv.com> and aeb
.\" Sun Feb 26 11:46:23 MET 1995
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified, Sun Feb 26 15:04:20 1995, faith@cs.unc.edu
.\" Modified, Thu Apr 20 22:08:17 1995, jrv@vanzandt.mv.com
.\" Modified, Mon Sep 18 22:32:47 1995, hpa@storm.net (H. Peter Anvin)
.\" FIXME The following are not documented:
.\"     KDFONTOP (since 2.1.111)
.\"     KDGKBDIACRUC (since 2.6.24)
.\"     KDSKBDIACR
.\"     KDSKBDIACRUC (since 2.6.24)
.\"     KDKBDREP (since 2.1.113)
.\"     KDMAPDISP (not implemented as at 2.6.27)
.\"     KDUNMAPDISP (not implemented as at 2.6.27)
.\"     VT_LOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_UNLOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_GETHIFONTMASK (since 2.6.18)
.\"
.\" Japanese Version Copyright (c) 1996,1997 TAKAHASHI Mutsuji
.\"				   1998      ISHIKAWA Mutsumi
.\"                               all rights reserved.
.\" Translated Sun Jan 11 03:24:14 JST 1998
.\"         by TAKAHASHI Mutsuji <muz@ilp.iijnet.or.jp>
.\"            and ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\"
.\" Japanese Version Last Modified Thu Feb  5 17:35:37 JST 1998
.\"	by ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Updated & Modefied Sat Feb 27 1999 by Shouichi Saito
.\" Updated Tue Jan 28 JST 2003 by Kentaro Shirakata <argrath@ub32.org>
.\"
.TH CONSOLE_IOCTL 4 2009-02-28 "Linux" "Linux Programmer's Manual"
.\"O .SH NAME
.SH 名前
.\"O console_ioctl \- ioctl's for console terminal and virtual consoles
console_ioctl \- コンソール端末と仮想コンソールの ioctl
.\"O .SH DESCRIPTION
.SH 説明
.\"O The following Linux-specific
.\"O .BR ioctl (2)
.\"O requests are supported.
.\"O Each requires a third argument, assumed here to be \fIargp\fP.
次のような Linux 固有の
.BR ioctl (2)
がサポートされている。
それぞれ3番目の引数が必要である、ここでは \fIargp\fP とする。
.IP \fBKDGETLED\fP
.\"O Get state of LEDs.
.\"O \fIargp\fP points to a \fIchar\fP.
.\"O The lower three bits
.\"O of \fI*argp\fP are set to the state of the LEDs, as follows:
LED の状態を取得する。
\fIargp\fP は \fIchar\fP のポインターである。
\fI*argp\fP の下位 3 ビットに以下のように LED の状態がセットされる。

.\"O     LED_CAP       0x04   caps lock led
.\"O     LEC_NUM       0x02   num lock led
.\"O     LED_SCR       0x01   scroll lock led
    LED_CAP       0x04   キャピタルロックが点灯
    LEC_NUM       0x02   ナンバーロックが点灯
    LED_SCR       0x01   スクロールロックが点灯
.IP \fBKDSETLED\fP
.\"O Set the LEDs.
.\"O The LEDs are set to correspond to the lower three bits of
.\"O \fIargp\fP.
.\"O However, if a higher order bit is set,
.\"O the LEDs revert to normal: displaying the state of the
.\"O keyboard functions of caps lock, num lock, and scroll lock.
LEDを点灯させる。LEDは \fIargp\fP の下位 3 ビットに従い点灯される。
しかし、より高位のビットがセットされている時には、キャピタルロック、
ナンバーロック、スクロールロックのキーボード機能の状態を表示する LED は
通常状態に戻る。
.LP
.\"O Before 1.1.54, the LEDs just reflected the state of the corresponding
.\"O keyboard flags, and KDGETLED/KDSETLED would also change the keyboard
.\"O flags.
.\"O Since 1.1.54 the leds can be made to display arbitrary
.\"O information, but by default they display the keyboard flags.
.\"O The following two ioctl's are used to access the keyboard flags.
カーネル 1.1.54 以前は、LED はそれぞれのキーボードフラグの状態を反映する
だけで、KDGETLED/KDSETLED もキーボードフラグを変更するだけであった。
カーネルl 1.1.54 からは LED に任意の表示をする事ができるようになったが、
デフォルトではキーボードフラグを表示する。
次に示す 2 つの ioctl はキーボードフラグにアクセスするのに用いられる。
.IP \fBKDGKBLED\fP
.\"O Get keyboard flags CapsLock, NumLock, ScrollLock (not lights).
.\"O \fIargp\fP points to a char which is set to the flag state.
.\"O The low order three bits (mask 0x7) get the current flag state,
.\"O and the low order bits of the next nibble (mask 0x70) get
.\"O the default flag state.
.\"O (Since 1.1.54.)
キャピタルロック、ナンバーロック、スクロールロックの(LED の表示では
なく)キーボードフラグを得る。
\fIargp\fP はフラグの状態がセットされる文字変数を指す。
(0x7)でマスクして得られる下位 3 ビットが現在のフラグの状態を示し、
(0x70)でマスクして得られる次の 3 ビットがデフォルトのフラグの状態を
示す。(カーネル 1.1.54以降)
.IP \fBKDSKBLED\fP
.\"O Set keyboard flags CapsLock, NumLock, ScrollLock (not lights).
.\"O \fIargp\fP has the desired flag state.
.\"O The low order three bits (mask 0x7) have the flag state,
.\"O and the low order bits of the next nibble (mask 0x70) have
.\"O the default flag state.
.\"O (Since 1.1.54.)
キャピタルロック、ナンバーロック、スクロールロックの(LED の表示ではなく)
キーボードフラグをセットする。
\fIargp\fP がセットしたいフラグである。
(0x7)でマスクして得られる下位 3 ビットがフラグの状態で、(0x70)でマスクして
得られる次の 3 ビットがデフォルトのフラグの状態である。(カーネル
1.1.54以降)
.IP \fBKDGKBTYPE\fP
.\"O Get keyboard type.
.\"O This returns the value KB_101, defined as 0x02.
キーボードの種類を得る。これは値 0x02 と定義されている KB_101を返す。
.IP \fBKDADDIO\fP
.\"O Add I/O port as valid.
.\"O Equivalent to \fPioperm(arg,1,1)\fP.
I/Oポートを有効な物として加える。これは \fIioperm(arg,1,1)\fP と等価である。
.IP \fBKDDELIO\fP
.\"O Delete I/O port as valid.
.\"O Equivalent to \fIioperm(arg,1,0)\fP.
I/Oポートを有効な物から外す。これは \fIioperm(arg,1,0)\fP と等価である。
.IP \fBKDENABIO\fP
.\"O Enable I/O to video board.
.\"O Equivalent to \fIioperm(0x3b4, 0x3df-0x3b4+1, 1)\fP.
ビデオボードへの I/O を可能にする。
これは \fIioperm(0x3b4, 0x3df-0x3b4+1, 1)\fP と等価である。
.IP \fBKDDISABIO\fP
.\"O Disable I/O to video board.
.\"O Equivalent to \fIioperm(0x3b4, 0x3df-0x3b4+1, 0)\fP.
ビデオボードへの I/O を不可能にする。
これは \fIioperm(0x3b4, 0x3df-0x3b4+1, 0)\fP と等価である。
.IP \fBKDSETMODE\fP
.\"O Set text/graphics mode.
.\"O \fIargp\fP is one of these:
テキスト/グラフィクスモードを設定する。
\fIargp\fP は次のうちのどれか：

    KD_TEXT       0x00
    KD_GRAPHICS   0x01
.IP \fBKDGETMODE\fP
.\"O Get text/graphics mode.
.\"O \fIargp\fP points to a \fIlong\fP which is set to one
.\"O of the above values.
テキスト/グラフィクスモードを取得する。
\fIargp\fP が指す \fIlong\fP 型変数に
上述の値のどちらかがセットされる。
.IP \fBKDMKTONE\fP
.\"O Generate tone of specified length.
.\"O The lower 16 bits of \fIargp\fP specify the period in clock cycles,
.\"O and the upper 16 bits give the duration in msec.
.\"O If the duration is zero, the sound is turned off.
.\"O Control returns immediately.
.\"O For example, \fIargp\fP = (125<<16) + 0x637 would specify
.\"O the beep normally associated with a ctrl-G.
.\"O (Thus since 0.99pl1; broken in 2.1.49-50.)
指定された長さのトーンを発生する。
\fIargp\fP の下位 16 ビットはクロックサイクルを単位にして周期を指定し、
上位 16 ビットが msec の単位で表した、(トーンを発生させる)時間を指定する。
トーンを発生させる時間がゼロのときは、サウンドはオフになる。
制御は直ちに戻る。
例えば、\fIargp\fP = (125<<16) + 0x637 とすれば、通常 ctrl-G を押した時に
発生する音になる。
(カーネル 0.99pl1 以降;この機能は カーネル 2.1.49 から
2.1.50 ではバグのため動作しない)
.IP \fBKIOCSOUND\fP
.\"O Start or stop sound generation.
.\"O The lower 16 bits of
.\"O \fIargp\fP specify the period in clock cycles
.\"O (that is, \fIargp\fP = 1193180/frequency).
.\"O \fIargp\fP = 0 turns sound off.
.\"O In either case, control returns immediately.
音の発生の開始や停止を行う。
\fIargp\fP の下位 16 ビットはクロックサイクルを単位として周期を示す。
(つまり \fIargp\fP = 1193180/周波数)。
\fIargp\fP = 0 の場合、サウンドはオフになる。
どちらの場合でも、ただちに制御は戻る。
.IP \fBGIO_CMAP\fP
.\"O Get the current default color map from kernel.
.\"O \fIargp\fP points to
.\"O a 48-byte array.
.\"O (Since 1.3.3.)
現在のデフォルトのカラーマップをカーネルより取得する。
.\"O \fIargp\fP は 48 バイトの配列へのポインター。(カーネル 1.3.3 以降)
.IP \fBPIO_CMAP\fP
.\"O Change the default text-mode color map.
.\"O \fIargp\fP points to a
.\"O 48-byte array which contains, in order, the Red, Green, and Blue
.\"O values for the 16 available screen colors: 0 is off, and 255 is full
.\"O intensity.
.\"O The default colors are, in order: black, dark red, dark
.\"O green, brown, dark blue, dark purple, dark cyan, light grey, dark
.\"O grey, bright red, bright green, yellow, bright blue, bright purple,
.\"O bright cyan and white.
.\"O (Since 1.3.3.)
デフォルトのテキストモードのカラーマップを変更する。
\fIargp\fP が指す 48 バイトの配列中には、16 の可能なスクリーンの色を、
赤、緑、青の順に 0 をオフ、255を最大強度とした値として納める。
デフォルトの色は順に、黒、濃い赤、濃い緑、茶、濃い青、濃い紫、濃いシアン、
明るい灰色、濃い灰色、明るい赤、明るい緑、黄、明るい青、明るい紫、
明るいシアン、白である。(カーネル 1.3.3以降)
.IP \fBGIO_FONT\fP
.\"O Gets 256-character screen font in expanded form.
.\"O \fIargp\fP points to an 8192 byte array.
.\"O Fails with error code \fBEINVAL\fP if the
.\"O currently loaded font is a 512-character font, or if the console is
.\"O not in text mode.
拡張された形式で 256 文字のスクリーンフォントを得る。
\fIargp\fP は 8192 バイトの配列を指す。
現在ロードされているフォントが 512 文字のフォントであるか、コンソールが
テキストモードでない時には失敗し \fBEINVAL\fP のエラーコードを返す。
.IP \fBGIO_FONTX\fP
.\"O Gets screen font and associated information.
.\"O \fIargp\fP points to a
.\"O struct consolefontdesc (see \fBPIO_FONTX\fP).
.\"O On call, the
.\"O \fIcharcount\fP field should be set to the maximum number of
.\"O characters that would fit in the buffer pointed to by \fIchardata\fP.
.\"O On return, the \fIcharcount\fP and \fIcharheight\fP are filled with
.\"O the respective data for the currently loaded font, and the
.\"O \fIchardata\fP array contains the font data if the initial value of
.\"O \fIcharcount\fP indicated enough space was available; otherwise the
.\"O buffer is untouched and \fIerrno\fP is set to \fBENOMEM\fP.
.\"O (Since 1.3.1.)
スクリーンフォントとそれに関連した情報を取得する。
\fIargp\fP は構造体 consolefontdesc (\fBPIO_FONTX\fP を参照のこと)を指す。
関数呼び出しのときには、\fIcharcount\fP には、\fIchardata\fP が指す
バッファにおさまる最大の文字数をセットしなければならない。
関数呼び出しから戻った時には \fIcharcount\fP と \fIcharheight\fP には、
現在ロードされているフォントの該当するデータが収められている。
配列 \fIchardata\fP には、最初に \fIcharcount\fP にいれた値によって
フォントを収めるのに十分なスペースがあるとわかればフォントデータが収められる。
そうでない時には、バッファは変更されず、 \fIerrno\fP に \fBENOMEM\fP が
セットされる(カーネル 1.3.1 以降)。
.IP \fBPIO_FONT\fP
.\"O Sets 256-character screen font.
.\"O Load font into the EGA/VGA character
.\"O generator.
.\"O \fIargp\fP points to a 8192 byte map, with 32 bytes per
.\"O character.
.\"O Only first \fIN\fP of them are used for an 8x\fIN\fP font
.\"O (0 < \fIN\fP <= 32).
.\"O This call also invalidates the Unicode mapping.
256 文字のフォントをセットする。EGA/VGA キャラクタージェネレーター
(character generator) にフォントをロードする。
\fIargp\fP は、8192 バイト(一文字 32 バイト)のマップを指す。
マップのうち、最初の \fIN\fP のみが 8x\fIN\fP のフォントのために
用いられる(0 < \fIN\fP <= 32)。
この呼び出しをすると Unicode のマッピングが無効になる。
.IP \fBPIO_FONTX\fP
.\"O Sets screen font and associated rendering information.
.\"O \fIargp\fP
.\"O points to a
スクリーンフォントと、それに関連するレンダリング情報をセットする。
\fIargp\fP は、以下の構造体を指す。

.in +4n
.nf
struct consolefontdesc {
.\"O     unsigned short charcount;  /* characters in font
.\"O                                   (256 or 512) */
.\"O     unsigned short charheight; /* scan lines per
.\"O                                   character (1-32) */
.\"O     char          *chardata;   /* font data in
.\"O                                   expanded form */
    unsigned short charcount;  /* フォントの文字数
                                  (256 または 512) */
    unsigned short charheight; /* 一文字の走査線の数
                                  (1-32) */
    char          *chardata;   /* 展開されたフォントデータ */
};
.fi
.in

.\"O If necessary, the screen will be appropriately resized, and
.\"O \fBSIGWINCH\fP sent to the appropriate processes.
.\"O This call also invalidates the Unicode mapping.
.\"O (Since 1.3.1.)
必要ならスクリーンは適当にサイズ変更され、\fBSIGWINCH\fP が適切な
プロセスに送られる。
このコールにより Unicode のマッピングが無効になる。
.IP \fBPIO_FONTRESET\fP
.\"O Resets the screen font, size and Unicode mapping to the bootup
.\"O defaults.
.\"O \fIargp\fP is unused, but should be set to NULL to
.\"O ensure compatibility with future versions of Linux.
.\"O (Since 1.3.28.)
スクリーンフォント、サイズ、 Unicode マッピングをブート時のデフォルト値に
リセットする。\fIargp\fP は用いられないが、将来のバージョンの
Linux との互換性を保つために NULL にセットすべきである。
.IP \fBGIO_SCRNMAP\fP
.\"O Get screen mapping from kernel.
.\"O \fIargp\fP points to an area of size
.\"O E_TABSZ, which is loaded with the font positions used to display each
.\"O character.
.\"O This call is likely to return useless information if the
.\"O currently loaded font is more than 256 characters.
スクリーンマッピングをカーネルより取得する。\fIargp\fP はサイズ E_TABSZ の
領域を指す。その領域には各キャラクターを表示するのに用いられるフォントの
位置がロードされている。
この呼び出しは現在ロードされているフォントが 256 文字よりも多い時には
無意味な情報を返す事が多い。
.IP \fBGIO_UNISCRNMAP\fP
.\"O Get full Unicode screen mapping from kernel.
.\"O \fIargp\fP points to an
.\"O area of size E_TABSZ*sizeof(unsigned short), which is loaded with the
.\"O Unicodes each character represent.
.\"O A special set of Unicodes,
.\"O starting at U+F000, are used to represent "direct to font" mappings.
.\"O (Since 1.3.1.)
フル Unicode スクリーンマッピングをカーネルより取得する。
\fIargp\fP はサイズ E_TABSZ*sizeof(unsigned short) の領域を指す。
その領域には各キャラクターを示す Unicode がロードされている。
U+F000 に始まる Unicode の特別な集合は、「フォント直接な(direct to font)」
マッピングを示すのに用いられる(カーネル 1.3.1 以降)。
.IP \fBPIO_SCRNMAP\fP
.\"O Loads the "user definable" (fourth) table in the kernel which maps
.\"O bytes into console screen symbols.
.\"O \fIargp\fP points to an area of
.\"O size E_TABSZ.
「ユーザー定義可能な(user definable)」(4番目の)テーブルをカーネルに
ロードする。そのテーブルは各バイトをスクリーンシンボルにマッピングする。
\fIargp\fP はサイズE_TABSZの領域を指す。
.IP \fBPIO_UNISCRNMAP\fP
.\"O Loads the "user definable" (fourth) table in the kernel which maps
.\"O bytes into Unicodes, which are then translated into screen symbols
.\"O according to the currently loaded Unicode-to-font map.
.\"O Special Unicodes starting at U+F000 can be used to map directly to the font
.\"O symbols.
.\"O (Since 1.3.1.)
「ユーザー定義可能な」(4番目の)テーブルをカーネルにロードする。
そのテーブルは各バイトをユニコードにマッピングし、その後、
現在ロードされているユニコードからフォントへのマップに従い
スクリーンシンボルに変換される。
U+F000 に始まるユニコードは直接フォントシンボルにマッピングするのに
使える(カーネル 1.3.1 以降)
.IP \fBGIO_UNIMAP\fP
.\"O Get Unicode-to-font mapping from kernel.
.\"O \fIargp\fP points to a
Unicode からフォントへのマッピングをカーネルから取得する。
\fIargp\fP は、

.in +4n
.nf
struct unimapdesc {
    unsigned short  entry_ct;
    struct unipair *entries;
};
.fi
.in

という構造体を指す。
.\"O where \fIentries\fP points to an array of
ここで \fIentries\fP は、

.in +4n
.nf
struct unipair {
    unsigned short unicode;
    unsigned short fontpos;
};
.fi
.in

という構造体の配列へのポインターである。
.\"O (Since 1.1.92.)
(カーネル 1.1.92 以降)
.IP \fBPIO_UNIMAP\fP
.\"O Put unicode-to-font mapping in kernel.
.\"O \fIargp\fP points to a
.\"O \fIstruct unimapdesc\fP.
.\"O (Since 1.1.92)
Unicode からフォントへのマッピングをカーネルにセットする。\fIargp\fP
は構造体 \fIstruct unimapdesc\fP へのポインターである。(カーネル 1.1.92 以降)
.IP \fBPIO_UNIMAPCLR\fP
.\"O Clear table, possibly advise hash algorithm.
.\"O \fIargp\fP points to a
テーブルをクリアし、その事をハシュアルゴリズムに伝える。
\fIargp\fPは

.in +4n
.nf
struct unimapinit {
    unsigned short advised_hashsize;  /* 0 if no opinion */
    unsigned short advised_hashstep;  /* 0 if no opinion */
    unsigned short advised_hashlevel; /* 0 if no opinion */
};
.fi
.in

という構造体を指すポインターである。
.\"O (Since 1.1.92.)
(カーネル 1.1.92 以降)
.IP \fBKDGKBMODE\fP
.\"O Gets current keyboard mode.
.\"O \fIargp\fP points to a \fIlong\fP which is set to one
.\"O of these:
現在のキーボードモードを取得する。\fIargp\fP の指す \fIlong\fP 型変数が、
次のうちのどれかに設定される。

    K_RAW         0x00
    K_XLATE       0x01
    K_MEDIUMRAW   0x02
    K_UNICODE     0x03
.IP \fBKDSKBMODE\fP
.\"O Sets current keyboard mode.
.\"O \fIargp\fP is a \fIlong\fP equal to one of the above values.
現在のキーボードモードを設定する。
\fIargp\fP は上記の値のうちのどれかに等しい \fIlong\fP にする。
.IP \fBKDGKBMETA\fP
.\"O Gets meta key handling mode.
.\"O \fIargp\fP points to a \fIlong\fP which is
.\"O set to one of these:
メタキーハンドリングモード(meta key handling mode)を取得する。
\fIargp\fP が指す \fIlong\fP 型変数は、次のうちのどれかに設定される。

    K_METABIT     0x03   set high order bit
    K_ESCPREFIX   0x04   escape prefix
.IP \fBKDSKBMETA\fP
.\"O Sets meta key handling mode.
.\"O \fIargp\fP is a \fIlong\fP equal to one of the above values.
メタキーハンドリングモードを設定する。
\fIargp\fP は上記の値のどれかに等しい \fIlong\fP にする。
.IP \fBKDGKBENT\fP
.\"O Gets one entry in key translation table (keycode to action code).
.\"O \fIargp\fP points to a
キーコードをアクションコードに変換するキー変換表のエントリーの一つを
取得する。
\fIargp\fP は、

.in +4n
.nf
struct kbentry {
    unsigned char  kb_table;
    unsigned char  kb_index;
    unsigned short kb_value;
};
.fi
.in

へのポインターである。
.\"O with the first two members filled in:
.\"O \fIkb_table\fP selects the key table (0 <= \fIkb_table\fP < MAX_NR_KEYMAPS),
.\"O and \fIkb_index\fP is the keycode (0 <= \fIkb_index\fP < NR_KEYS).
.\"O \fIkb_value\fP is set to the corresponding action code,
.\"O or K_HOLE if there is no such key,
.\"O or K_NOSUCHMAP if \fIkb_table\fP is invalid.
最初の2つの要素、\fIkb_table\fP には選択するキーテーブル (0 <=
\fIkb_table\fP < MAX_NR_KEYMAPS)、\fIkb_index\fP にはキーコード(0 <=
\fIkb_index\fP < NR_KEYS)を設定する。
\fIkb_value\fP は対応するアクションコード、または、そのようなキーが
ないときには K_HOLE、\fIkb_table\fP が無効な時には K_NOSUCHMAP に設定される。
.IP \fBKDSKBENT\fP
.\"O Sets one entry in translation table.
.\"O \fIargp\fP points to
.\"O a \fIstruct kbentry\fP.
変換テーブルのエントリーの一つを設定する。\fIargp\fP は
構造体 \fIstruct kbentry\fP へのポインターである。
.IP \fBKDGKBSENT\fP
.\"O Gets one function key string.
.\"O \fIargp\fP points to a
ファンクションキーの文字列を取得する。\fIargp\fP は、

.in +4n
.nf
struct kbsentry {
    unsigned char kb_func;
    unsigned char kb_string[512];
};
.fi
.in

という構造体へのポインターである。

.\"O \fIkb_string\fP is set to the (null-terminated) string corresponding to
.\"O the \fIkb_func\fPth function key action code.
\fIkb_func\fP 番目のファンクションキーのアクションコードに対応する
(NULL で終端された)文字列が \fIkb_string\fP に設定される。
.IP \fBKDSKBSENT\fP
.\"O Sets one function key string entry.
.\"O \fIargp\fP points to
.\"O a \fIstruct kbsentry\fP.
ファンクションキーの文字列のエントリーを設定する。\fIargp\fP は、
構造体 \fIstruct kbsentry\fP へのポインターである。
.IP \fBKDGKBDIACR\fP
.\"O Read kernel accent table.
.\"O \fIargp\fP points to a
カーネルのアクセントテーブル(accent table)を読み込む。\fIargp\fPは、

.in +4n
.nf
struct kbdiacrs {
    unsigned int   kb_cnt;
    struct kbdiacr kbdiacr[256];
};
.fi
.in

という構造体へのポインターである。
.\"O where \fIkb_cnt\fP is the number of entries in the array, each of which
.\"O is a
ここで、\fIkb_cnt\fP は配列中のエントリーの個数で、個々のエントリーは、

.in +4n
.nf
struct kbdiacr {
    unsigned char diacr;
    unsigned char base;
    unsigned char result;
};
.fi
.in

という構造体である。
.IP \fBKDGETKEYCODE\fP
.\"O Read kernel keycode table entry (scan code to keycode).
.\"O \fIargp\fP points to a
カーネルの(スキャンコードからキーコードへ
変換する)キーコードテーブルエントリーを読み込む。
\fIargp\fP は、

.in +4n
.nf
struct kbkeycode {
    unsigned int scancode;
    unsigned int keycode;
};
.fi
.in

へのポインターである。
.\"O \fIkeycode\fP is set to correspond to the given \fIscancode\fP.
.\"O (89 <= \fIscancode\fP <= 255 only.
.\"O For 1 <= \fIscancode\fP <= 88, \fIkeycode\fP==\fIscancode\fP.)
.\"O (Since 1.1.63.)
\fIkeycode\fP は、\fIscancode\fP に対応した値に設定される。(ただし、89
<= \fIscancode\fP <= 255 のみについて。1 <= \fIscancode\fP <= 88 では
\fIkeycode\fP == \fIscancode\fP である。)
(カーネル 1.1.63 以降)
.IP \fBKDSETKEYCODE\fP
.\"O Write kernel keycode table entry.
.\"O \fIargp\fP points to
.\"O a \fIstruct kbkeycode\fP.
.\"O (Since 1.1.63.)
カーネルのキーコードテーブルエントリーを書き込む。\fIargp\fP は構造体
\fIstruct kbkeycode\fP へのポインターである。
(カーネル 1.1.63 以降)
.IP \fBKDSIGACCEPT\fP
.\"O The calling process indicates its willingness to accept the signal
.\"O \fIargp\fP when it is generated by pressing an appropriate key combination.
.\"O (1 <= \fIargp\fP <= NSIG).
.\"O (See spawn_console() in linux/drivers/char/keyboard.c.)
この関数呼び出しは、特別な組合せでキーを押した時に発生するシグナル
\fIargp\fP (1 <= \fIargp\fP <= NSIG) を進んで受け付けるかどうかを示す。
(linux/drivers/char/keyboard.c の Spawn_console() を見よ。)
.IP \fBVT_OPENQRY\fP
.\"O Returns the first available (non-opened) console.
.\"O \fIargp\fP points to an \fIint\fP which is set to the
.\"O number of the vt (1 <= \fI*argp\fP <= MAX_NR_CONSOLES).
最初の空いている(まだオープンされていない)コンソールを返す。
\fIargp\fP の指す \fIint\fP 型の整数には、vt の番号がセットされる
(1 <= \fI*argp\fP <= MAX_NR_CONSOLES)。
.IP \fBVT_GETMODE\fP
.\"O Get mode of active vt.
.\"O \fIargp\fP points to a
アクティブな vt のモードを取得する。\fIargp\fPは、

.in +4n
.nf
struct vt_mode {
   char mode;     /* vt mode */
   char waitv;    /* if set, hang on writes if not active */
   short relsig;  /* signal to raise on release req */
   short acqsig;  /* signal to raise on acquisition */
   short frsig;   /* unused (set to 0) */
};
.fi
.in

.\"O which is set to the mode of the active vt.
.\"O \fImode\fP is set to one of these values:
という構造体を指すポインタであり、アクティブな vt のモードが
セットされる。
\fImode\fP は次のどれかに設定される：

.\"O     VT_AUTO       auto vt switching
.\"O     VT_PROCESS    process controls switching
.\"O     VT_ACKACQ     acknowledge switch
   VT_AUTO       自動vt切替え
   VT_PROCESS    プロセスコントロール切替え
   VT_ACKACQ     アクノリッジ切替え
.IP \fBVT_SETMODE\fP
.\"O Set mode of active vt.
.\"O \fIargp\fP points to
.\"O a \fIstruct vt_mode\fP.
アクティブな vt のモードを設定する。\fIargp\fP は構造体
\fIstruct vt_mode\fP への
ポインターである。
.IP \fBVT_GETSTATE\fP
.\"O Get global vt state info.
.\"O \fIargp\fP points to a
グローバルな vt の状態の情報を取得する。\fIargp\fPは、

.in +4n
.nf
struct vt_stat {
   unsigned short v_active;  /* active vt */
   unsigned short v_signal;  /* signal to send */
   unsigned short v_state;   /* vt bit mask */
};
.fi
.in

へのポインターである。
.\"O For each vt in use, the corresponding bit in the \fIv_state\fP member is set.
.\"O (Kernels 1.0 through 1.1.92.)
使用されているそれぞれの vt につき \fIv_state\fP の対応するビットが
セットされる。
(カーネルl 1.0 から 1.1.92 まで)
.IP \fBVT_RELDISP\fP
.\"O Release a display.
ディスプレーを解放する。
.IP \fBVT_ACTIVATE\fP
.\"O Switch to vt \fIargp\fP (1 <= \fIargp\fP <= MAX_NR_CONSOLES).
\fIargp\fP (1 <= \fIargp\fP <= MAX_NR_CONSOLES)の vt に切替える。
.IP \fBVT_WAITACTIVE\fP
.\"O Wait until vt \fIargp\fP has been activated.
\fIargp\fPの vt がアクティブになるまで待つ。
.IP \fBVT_DISALLOCATE\fP
.\"O Deallocate the memory associated with vt \fIargp\fP.
.\"O (Since 1.1.54.)
\fIargp\fP の vt に結びつけられたメモリーを解放する。
(カーネル 1.1.54 以降)
.IP \fBVT_RESIZE\fP
.\"O Set the kernel's idea of screensize.
.\"O \fIargp\fP points to a
カーネルが認識するスクリーンサイズを設定する。\fIargp\fP は、

.in +4n
.nf
struct vt_sizes {
   unsigned short v_rows;       /* # rows */
   unsigned short v_cols;       /* # columns */
   unsigned short v_scrollsize; /* no longer used */
};
.fi
.in

へのポインターである。
.\"O Note that this does not change the videomode.
.\"O See
.\"O .BR resizecons (8).
.\"O (Since 1.1.54.)
これはビデオモードを変更しない事に注意。
.BR resizecons (8)
を見よ(カーネル 1.1.54 以降)。
.IP \fBVT_RESIZEX\fP
.\"O Set the kernel's idea of various screen parameters.
.\"O \fIargp\fP points to a
カーネルが認識する各種のスクリーンパラメータを設定する。\fIargp\fP は、

.in +4n
.nf
struct vt_consize {
    unsigned short v_rows;  /* number of rows */
    unsigned short v_cols;  /* number of columns */
    unsigned short v_vlin;  /* number of pixel rows
                               on screen */
    unsigned short v_clin;  /* number of pixel rows
                               per character */
    unsigned short v_vcol;  /* number of pixel columns
                               on screen */
    unsigned short v_ccol;  /* number of pixel columns
                               per character */
};
.fi
.in

へのポインターである。

.\"O Any parameter may be set to zero, indicating "no change", but if
.\"O multiple parameters are set, they must be self-consistent.
.\"O Note that this does not change the videomode.
.\"O See
.\"O .BR resizecons (8).
.\"O (Since 1.3.3.)
パラメータはゼロであってもよい。そのときは「変更しないこと」を
意味するが、複数のパラメータが設定された時にはそれらの間で矛盾が
ないようにしなければならない。
この関数呼び出しによってもビデオモードは変更されない事に注意。
.BR resizecons (8)
を参照の事(カーネル 1.3.3 以降)。
.PP
.\"O The action of the following ioctls depends on the first byte in the struct
.\"O pointed to by \fIargp\fP, referred to here as the \fIsubcode\fP.
.\"O These are legal only for the superuser or the owner of the current tty.
以下の ioctl がどのように動作をするかは、\fIargp\fP が指す構造体の
最初のバイト(ここでは \fIsubcode\fP と呼ぶ)に依存する。
これらの呼出しは、スーパーユーザーか現在の tty のオーナにのみ許される。
.IP "\fBTIOCLINUX, subcode=0\fP"
.\"O Dump the screen.
.\"O Disappeared in 1.1.92.  (With kernel 1.1.92 or later, read from
.\"O /dev/vcsN or /dev/vcsaN instead.)
スクリーンをダンプ(dump)する
カーネル 1.1.92 以降でなくなった(1.1.92 以降では、代わりに /dev/vcsN
または /dev/vcsaN より読み込む)。
.IP "\fBTIOCLINUX, subcode=1\fP"
.\"O Get task information.
.\"O Disappeared in 1.1.92.
タスク情報を取得する。カーネル 1.1.92 でなくなった。
.IP "\fBTIOCLINUX, subcode=2\fP"
.\"O Set selection.
.\"O \fIargp\fP points to a
選択を設定する。
\fIargp\fP が指すのは、
.in +4n
.nf

struct {
   char subcode;
   short xs, ys, xe, ye;
   short sel_mode;
}

.fi
.in
.\"O \fIxs\fP and \fIys\fP are the starting column and row.
.\"O \fIxe\fP and \fIye\fP are the ending
.\"O column and row.
.\"O (Upper left corner is row=column=1.)
.\"O \fIsel_mode\fP is 0 for character-by-character selection,
.\"O 1 for word-by-word selection,
.\"O or 2 for line-by-line selection.
.\"O The indicated screen characters are highlighted and saved
.\"O in the static array sel_buffer in devices/char/console.c.
であり、ここで
\fIxs\fP と \fIys\fP は始めの桁と行で、\fIxe\fP と \fIye\fP は終りの桁と
行である。
(左上の隅が 桁=行=1 )
\fIsel_mode\fP は 0 が文字毎の選択で、1は語毎の選択、2は行毎の選択を
意味する。
示されたスクリーン上の文字はハイライト表示され devices/char/console.c の
静的配列 sel_buffer に保存される。
.IP "\fBTIOCLINUX, subcode=3\fP"
.\"O Paste selection.
.\"O The characters in the selection buffer are
.\"O written to \fIfd\fP.
選択したものをペーストする。
選択バッファ中の文字 が \fIfd\fP に書き出される。
.IP "\fBTIOCLINUX, subcode=4\fP"
.\"O Unblank the screen.
スクリーンをアンブランク(unblank)する。
.IP "\fBTIOCLINUX, subcode=5\fP"
.\"O Sets contents of a 256-bit look up table defining characters in a "word",
.\"O for word-by-word selection.
.\"O (Since 1.1.32.)
語毎の選択のための「語」中の文字を規定している 256 ビットのルックアップ
テーブルの内容を設定する(カーネル 1.1.32 以降)。
.IP "\fBTIOCLINUX, subcode=6\fP"
.\"O \fIargp\fP points to a char which is set to the value of the kernel
.\"O variable \fIshift_state\fP.
.\"O (Since 1.1.32.)
\fIargp\fP は文字変数を指すポインタで、その内容がカーネル変数
\fIshift_state\fPの値に設定される(カーネル 1.1.32 以降)。
.IP "\fBTIOCLINUX, subcode=7\fP"
.\"O \fIargp\fP points to a char which is set to the value of the kernel
.\"O variable \fIreport_mouse\fP.
.\"O (Since 1.1.33.)
\fIargp\fP は文字変数を指すポインタで、その内容がカーネル変数
\fIreport_mouse\fP の値に設定される(カーネル 1.1.33 以降)。
.IP "\fBTIOCLINUX, subcode=8\fP"
.\"O Dump screen width and height, cursor position, and all the
.\"O character-attribute pairs.
.\"O (Kernels 1.1.67 through 1.1.91 only.
.\"O With kernel 1.1.92 or later, read from /dev/vcsa* instead.)
スクリーン幅、スクリーン高さ、カーソル位置、全ての文字属性の組をダンプする
(カーネル 1.1.67 から 1.1.91までのみ。
カーネル 1.1.92 以降では /dev/vcsa*より読み込む)。
.IP "\fBTIOCLINUX, subcode=9\fP"
.\"O Restore screen width and height, cursor position, and all the
.\"O character-attribute pairs.
.\"O (Kernels 1.1.67 through 1.1.91 only.
.\"O With kernel 1.1.92 or later, write to /dev/vcsa* instead.)
スクリーン幅、スクリーン高さ、カーソル位置、全ての文字属性の組を復元する
(カーネル 1.1.67 から 1.1.91 までのみ。
カーネル 1.1.92 以降では /dev/vcsa* に書き込む)。
.IP "\fBTIOCLINUX, subcode=10\fP"
.\"O Handles the Power Saving
.\"O feature of the new generation of monitors.
.\"O VESA screen blanking mode is set to \fIargp\fP[1], which governs what
.\"O screen blanking does:
新世代モニターのパワーセーブ機能を制御する。
VESA スクリーンブランキングモードが \fIargp\fP[1]に設定される。
その値はスクリーンブランキングがどのように行われるかを示す。以下がその
値である。

.\"O     \fI0\fP: Screen blanking is disabled.
	\fI0\fP: スクリーンブランキングなし。

.\"O     \fI1\fP: The current video adapter
.\"O register settings are saved, then the controller is programmed to turn off
.\"O the vertical synchronization pulses.
.\"O This puts the monitor into "standby" mode.
.\"O If your monitor has an Off_Mode timer, then
.\"O it will eventually power down by itself.
	\fI1\fP:現在のビデオアダプターレジスタが保存されたあと、
コントローラは垂直同期パルスをオフにするようプログラムされる。これにより
モニターは「スタンバイ」モードにはいる。
モニターに Off_Mode タイマが備わっておれば、最終的にはモニターが自分で
電源を落す。

.\"O     \fI2\fP: The current
.\"O settings are saved, then both the vertical and horizontal
.\"O synchronization pulses are turned off.
.\"O This puts the monitor into "off" mode.
.\"O If your monitor has no Off_Mode timer,
.\"O or if you want your monitor to power down immediately when the
.\"O blank_timer times out, then you choose this option.
.\"O (\fICaution:\fP Powering down frequently will damage the monitor.)
	\fI2\fP:現在の設定を保存した後、垂直、水平同期パルスがオフになる。
これによりモニターは「オフ」モードになる。
モニターに Off_Mode タイマーがない時、または、blank_timer がタイムアウトしたら
すぐにモニターの電源を落したいときにこの選択肢を選ぶ。
(注意：頻繁にモニターの電源を切るとモニターを痛める。)

.\"O (Since 1.1.76.)
(カーネル 1.1.76 以降)

.\"O .SH "RETURN VALUE"
.SH 戻り値
.\"O On success, 0 is returned.
.\"O On error \-1 is returned, and \fIerrno\fP is set.
成功時には 0 が返される。エラーに対しては \-1 が返され、
\fIerrno\fP が設定される。
.\"O .SH ERRORS
.SH エラー
.\"O \fIerrno\fP may take on these values:
\fIerrno\fP は次のような値をとる:
.TP
.B EBADF
.\"O The file descriptor is invalid.
ファイルディスクリプタが無効。
.TP
.B ENOTTY
.\"O The file descriptor is not associated with a character special device,
.\"O or the specified request does not apply to it.
ファイルディスクリプタがキャラクタ・スペシャルデバイスと関連付けられて
いない。または、要求されたものがそれに当てはまらない。
.TP
.B EINVAL
.\"O The file descriptor or \fIargp\fP is invalid.
ファイルディスクリプタまたは \fIargp\fP が無効。
.TP
.B EPERM
.\"O Insufficient permission.
権限が不十分。

.\"O .SH NOTES
.SH 注意
.\"O .BR Warning :
.\"O Do not regard this man page as documentation of the Linux console ioctl's.
.\"O This is provided for the curious only, as an alternative to reading the
.\"O source.
.\"O Ioctl's are undocumented Linux internals, liable to be changed
.\"O without warning.
.\"O (And indeed, this page more or less describes the
.\"O situation as of kernel version 1.1.94;
.\"O there are many minor and not-so-minor
.\"O differences with earlier versions.)
.BR 警告 :
このマニュアルページを Linux のコンソール ioctl を文書化したものと思わない事。
これは、興味がある人がソースを読むことの代わりになるように用意した物である。
ioctl は文書化されない Linux の内部機能であって、警告なしに
変更されることがある。
(そして、このページはカーネル 1.1.94 のときの状況を記述した物で、それは
以前のバージョンと比べれば、多くの違いがある)

.\"O Very often, ioctl's are introduced for communication between the
.\"O kernel and one particular well-known program (fdisk, hdparm, setserial,
.\"O tunelp, loadkeys, selection, setfont, etc.), and their behavior will be
.\"O changed when required by this particular program.
ioctl はカーネルと、ある特定のよく知られたプログラムとの情報交換のために
導入される事が非常に多い(fdisk, hdparm, setserial,tunelp, loadkeys,
selection, setfont など)。そのため ioctl の動作は、その特定のプログラムが
必要とした時には変更になる。

.\"O Programs using these ioctl's will not be portable to other versions
.\"O of UNIX, will not work on older versions of Linux, and will not work
.\"O on future versions of Linux.
これらの ioctl を使ったプログラムは他のバージョンの UNIX との互換性が
ないし、古いバージョンの Linux では、走らない。さらに将来のバージョンの
Linux では走らなくなるかも知れない。

.\"O Use POSIX functions.
POSIX 機能を使いなさい。
.\"O .SH "SEE ALSO"
.SH 関連項目
.BR dumpkeys (1),
.BR kbd_mode (1),
.BR loadkeys (1),
.BR mknod (1),
.BR setleds (1),
.BR setmetamode (1),
.BR execve (2),
.BR fcntl (2),
.BR ioperm (2),
.BR termios (3),
.BR console (4),
.BR console_codes (4),
.BR mt (4),
.BR sd (4),
.BR tty (4),
.BR tty_ioctl (4),
.BR ttyS (4),
.BR vcs (4),
.BR vcsa (4),
.BR charsets (7),
.BR mapscrn (8),
.BR resizecons (8),
.BR setfont (8),
.IR /usr/include/linux/kd.h ,
.I /usr/include/linux/vt.h
