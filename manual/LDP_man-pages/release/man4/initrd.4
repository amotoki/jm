.\" -*- nroff -*-
.\" This man-page is Copyright (C) 1997 John S. Kallal
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and author(s) of this work.
.\"
.\" If the you wish to distribute versions of this work under other
.\" conditions than the above, please contact the author(s) at the following
.\" for permission:
.\"
.\"  John S. Kallal -
.\"	email: <kallal@voicenet.com>
.\"	mail: 518 Kerfoot Farm RD, Wilmington, DE 19803-2444, USA
.\"	phone: (302)654-5478
.\"
.\" $Id: initrd.4,v 1.1.1.1 1999/07/19 01:49:27 cvs Exp $
.\"
.\" Japanese Version Copyright (c) 1997,1998
.\"           ISHIKAWA Mutsumi, all rights reserved.
.\" Translated 1997-12-15, ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Modified 1998-02-09, ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Updated & Modified 2005-10-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH INITRD 4 2010-09-04 "Linux" "Linux Programmer's Manual"
.SH 名前
initrd \- ブートローダによって初期化された RAM ディスク
.SH 設定
.I /dev/initrd
は、メジャー番号 1、マイナー番号 250 が割り当てられた
読み込み専用のブロックデバイスである。
普通、
.I /dev/initrd
の所有者は
.I root.disk
であり、モードは 400 (root のみが読み出し可能) である。
もし、Linux システムに作成済の
.I /dev/initrd
ファイルがなかった場合、以下のコマンドで作成することができる:
.nf
\fB
        mknod \-m 400 /dev/initrd b 1 250
        chown root:disk /dev/initrd
\fP
.fi
.PP
また、
.I /dev/initrd
を使用するためには、
"RAM disk" と "Initial RAM disk" の両方の機能が
Linux カーネルに直接組み込まれていなければならない
(例えば、カーネルのコンパイル時の設定で
.B CONFIG_BLK_DEV_RAM=y
かつ
.B CONFIG_BLK_DEV_INITRD=y
とする)。
.I /dev/initrd
を使用する場合には、RAM ディスクドライバをモジュールとして
ロードすることはできない。
.\"
.\"
.\"
.SH 説明
.I /dev/initrd
スペシャルファイルは読み込み専用のブロックデバイスである。
このデバイスはカーネルが起動される前にブートローダ (boot loader)
によって初期化 (例えば、ロード) される RAM ディスクである。
その後、カーネルは
.I /dev/initrd
の内容を二段階のシステム起動 (two-phase system boot-up)
で利用することができる。
.PP
最初のブートアップ段階 (first boot-up phase) では、カーネルは
(例えば、ブートローダによって初期化された RAM disk である)
.I /dev/initrd
の内容を初期ルートファイルシステム (root file-system) としてマウント
して起動する。
第二段階では初期ルートデバイスに含まれているものから、追加のドライ
バやその他のモジュールがロードされる。
追加のモジュールがロードされた後、新しいルートファイルシステム
(すなわち、通常時のルートファイルシステム)
が別のデバイスからマウントされる。
.\"
.\"
.\"
.SS ブートアップ作業
.B initrd
を利用した時は、システムは次のようにブートする:
.IP 1. 3
ブートローダはカーネルプログラムと
.I /dev/initrd
の内容をメモリにロードする。
.IP 2.
カーネル起動時、カーネルは
.I /dev/initrd
デバイスの内容を展開 (uncompress) し、
.I /dev/ram0
にコピーする。さらに、
.I /dev/initrd
の使っていたメモリを解放する。
.IP 3.
カーネルは
.I /dev/ram0
デバイスを初期のルートファイルシステムとして読み書き可能な形式でマウン
トする。
.IP 4.
指示されたルートファイルシステムが初期ルートファイルシステム
(例えば
.IR /dev/ram0 )
と同一の場合は、カーネルは普通のブートシーケンスのための最後のステップを
省略する。
.IP 5.
.I /linuxrc
という実行可能なファイルが初期ルートファイルシステムに存在すれば、
.I /linuxrc
を UID 0 (すなわち、root) の権限で実行する。
.RI ( /linuxrc
ファイルは実行可能パーミッションが与えられていなければならない。
.I /linuxrc
は正当な実行ファイルであればよく、シェルスクリプトでも構わない。)
.IP 6.
.I /linuxrc
が実行されない、または、
.I /linuxrc
の実行が終了した時は、通常時ルートファイルシステムがマウントされる。
.RI ( /linuxrc
を終了した時、何らかのファイルシステムが初期ルートファイルシステム上に
マウントされている場合のカーネルの動作は
\fB決められていない (不定である)\fR。
現在のカーネルがどのように動作するかは、
「注意」のセクションを参照のこと。)
.IP 7.
通常時ルートファイルシステムに
ディレクトリ
.I /initrd
があれば、
.I /dev/ram0
デバイスは
.I /
から
.I /initrd
に移動される。
.I /initrd
ディレクトリが存在しない場合は、
.I /dev/ram0
はアンマウントされる。
.RI ( /
が
.I /initrd
に移動された場合には、
.I /dev/ram0
はアンマウントされず、その結果、
.I /dev/ram0
で走り始めたプロセスはそのまま残る事ができる。
もし、
.I /initrd
ディレクトリが通常時ルートファイルシステムに存在せず、
.I /linuxrc
が終了した時に
.I /dev/ram0
上で実行された、なんらかのプロセスが走り続けていた場合の
カーネルの動作は
.BR "決められていない (不定である)" 。
現在のカーネルが、この時どのような動作をするかについては、
「注意」を参照のこと。)
.IP 8.
普通のブートシーケンス (例えば、
.I /sbin/init
の起動) が通常時ルートファイルシステム上で行われる。
.\"
.\"
.\"
.SS オプション
.B initrd
を用いる場合に、カーネルのブートアップ操作に影響を与える
ブートローダ・オプションは次のようなものがある、
.TP
.BI initrd= "filename"
.I /dev/initrd
の内容としてロードするファイルを指定する。
.B LOADLIN
では、これはコマンドラインオプションである。
.B LILO
では、
.B LILO
の設定ファイル
.I /etc/lilo.config
内でコマンドとして使用しなければならない。
このオプションで指定されるファイルは、多くの場合 gzip 圧縮された
ファイルシステムイメージである。
.TP
.B noinitrd
この起動オプションは二段階の起動操作を無効にする。
カーネルは
.I /dev/initrd
が初期化されていない場合と同様の、通常のブートアップ動作を行う。
このオプションを用いると、ブートローダによってメモリ上にロードされた
.I /dev/initrd
の内容はそのまま保存される。
つまり、このオプションを用いることによって、
.I /dev/initrd
の内容を (ブート以外の目的に) 利用することが可能になる。また、その内容は
ファイルシステムイメージに限定されない。
しかし、
.I /dev/initrd
デバイスは読みだしのみ可能であり、システムの起動後 1 度しか読み出す事
ができない。
.TP
.BI root= "device-name"
通常時ルートファイルシステムとして使われるデバイスを指定する。
.B LOADLIN
では、これはコマンドラインオプションである。
.B LILO
ではコマンドラインオプション、または、
.B LILO
の設定ファイルである
.I /etc/lilo.config
のオプションラインとして使用する。
このオプションで指定されるデバイスは、適切なルートファイルシステムとし
てマウント可能なデバイスでなければならない。
.\"
.\"
.\"
.SS 通常時ルートファイルシステムの変更
デフォルトでは、カーネルの設定
(例えば、
.BR rdev (8)
を用いてカーネルファイル内にセットされたもの、または、コンパイル時にカー
ネルファイル内に埋め込まれたもの)、
または、ブートローダのオプション設定によって指定されたものが通常時ルー
トファイルシステムとして使われる。
NFS マウントされた通常時ルートファイルシステムを利用する場合、
.B nfs_root_name
と
.B nfs_root_addrs
ブートオプションを使って NFS の設定を与えなければならない。
NFS マウントされたルート (ファイルシステム) についての
より詳しい情報は、カーネルのドキュメントファイル
.B Documentation/filesystems/nfsroot.txt
を参照のこと。
ルートファイルシステムの設定についてのより詳しい情報は、
.B LILO
と
.B LOADLIN
のドキュメントも参照のこと。
.PP
また、
.I /linuxrc
を用いる事によっても通常時ルートファイルシステムデバイスを変更すること
ができる。
.I /linuxrc
を用いて、通常時ルートデバイスを変更するためには、
.I /proc
がマウントされていなければならない。
.I /proc
をマウントした後で、
.I /linuxrc
は proc ファイル
.IR /proc/sys/kernel/real-root-dev ,
.IR /proc/sys/kernel/nfs-root-name ,
.I /proc/sys/kernel/nfs-root-addrs
に書き込みを行い、通常時ルートデバイスを変更する。
(NFS ではない) 物理的なルートデバイスの場合、
.I /linuxrc
が新しいルートファイルシステムのデバイス番号を
.I /proc/sys/kernel/real-root-dev
に書き込むことで、ルートデバイスが変更される。
NFS ルートファイルシステムの場合、
.I /linuxrc
が NFS の設定を
.I /proc/sys/kernel/nfs-root-name
と
.I /proc/sys/kernel/nfs-root-addrs
に書き込み、それから
.I /proc/sys/kernel/real-root-dev
に (疑似 NFS デバイスナンバーである) 0xff を書き込むことで、
ルートデバイスが変更される。
例えば、次のシェルコマンドラインにより、通常時ルートデバイスを
.I /dev/hdb1
に変更できるだろう:
.nf

    echo 0x365 >/proc/sys/kernel/real-root-dev

.fi
また、NFS の場合、次のようなシェルコマンドラインにより、
193.8.232.2 という IP アドレスを持つ "idefix" という名前の
システムの、通常時ルートデバイスとして、
ローカルネットワークの 193.8.232.2 という IP アドレスを持つ NFS サーバの
NFS ディレクトリ
.I /var/nfsroot
をマウントするように変更できる:
.nf

    echo /var/nfsroot >/proc/sys/kernel/nfs-root-name
    echo 193.8.232.2:193.8.232.7::255.255.255.0:idefix \\
        >/proc/sys/kernel/nfs-root-addrs
    echo 255 >/proc/sys/kernel/real-root-dev
.fi

.BR 注意 :
ルートファイルシステムを変更するために
.I /proc/sys/kernel/real-root-dev
を使うのは以前の方法である。
ルートファイルシステムを変更する新しい方法についての情報は、
カーネルソースに含まれる
.I Documentation/initrd.txt
ファイルや、
.BR pivot_root (2)
や
.BR pivot_root (8)
を参照してほしい。
.\" FIXME マニュアルページで pivot_root の仕組みを説明する必要がある。
.\"
.\"
.\"
.SS 使い方
.B initrd
が実装された主な目的は、システムインストール時に、モジュール化されたカー
ネルの設定を可能にすることであった。
.PP
次のような流れのシステムインストールが可能になる:
.IP 1. 3
ローダプログラムは、フロッピーやその他のメディアから、
最小限のカーネル (例えば、
.IR /dev/ram ,
.IR /dev/initrd ,
ext2 ファイルシステムのみのサポートしたカーネル) をブートし、
gzip 圧縮された初期ファイルシステムイメージを
.I /dev/initrd
にロードする。
.IP 2.
実行ファイル
.I /linuxrc
は、(1) 通常時ルートファイルシステムのマウントに何が必要か
(すなわち、デバイスタイプ、デバイスドライバ、ファイルシステム)、
(2) 配布メディアに何が必要か (例えば、CD-ROM, ネットワーク、テープなど)
を決定する。決定は、ユーザへの問い合わせ、自動検出、あるいはその両者の
方法を組み合わせて行われる。
.IP 3.
実行ファイル
.I /linuxrc
は、初期ルートファイルシステムから必要なモジュールをロードする。
.IP 4.
実行ファイル
.I /linuxrc
は、ルートファイルシステムを作成し、配置する (この段階では、通常時ルー
トファイルシステムは完全なシステムである必要はない)。
.IP 5.
実行ファイル
.I /linuxrc
は、
.I /proc/sys/kernel/real-root-dev
を設定し、
.IR /proc "、"
マウントされている通常時ファイルシステム及びその他のファイルシステム
をアンマウントし、
実行を終了する。
.IP 6.
次に、カーネルは、通常時ルートファイルシステムをマウントする。
.IP 7.
この段階で、ファイルシステムは全く変更が行われていない状態で、
アクセスできる状態になる。
また、ブートローダをインストールすることができる。
.IP 8.
ブートローダを設定し、システム起動時に使用されるカーネルモジュールのセッ
トを含んだファイルシステムを
.I /dev/initrd
にロードする (例えば、
.I /dev/ram0
デバイスの内容を修正し、アンマウントする。最後に、
.I /dev/ram0
のイメージをファイルに書き出す)。
.IP 9.
これで、システムがブート可能になる。この後、さらにその他のインストール
の作業を実行できる。
.PP
上記の動作での
.I /dev/initrd
の役割のキーポイントは、初期カーネルの選択や大きなジェネリックカーネル、
カーネルの再構築なしに、通常のシステム操作で再利用可能な設定データを利
用することにある。
.PP
2 番目のケースは、一つの管理上のネットワークにおいて、異なる設定のハー
ドウェアのシステム上で Linux を動作させるためのインストールを行う場合
である。
このようなケースの場合、ごく小数のカーネルのセット (理想的にはたった一
つのカーネル) のみを利用し、システム固有の設定情報は可能な限り小さくす
ることが望ましいであろう。
この場合、全ての必要なモジュールが入った共通ファイルを作成する。
そして、
.I /linuxrc
ファイル、または、
.I /linuxrc
から実行されるファイルのみを異なったものにしておく。
.PP
3 番目のケースは、より便利な復旧用ディスクを作る場合である。
ルートファイルシステムのパーティションの位置といった情報は
ブート時に必要ないため、
.I /dev/initrd
からロードされたシステムは、
必要な正常性チェックを行った後で、ユーザへの問い合わせや自動検出
(もしくはその両方) を行うことができるようになる。
.PP
(他にもたくさん例があるだろうが) 最後の例としては、
.B initrd
を利用すると、CD-ROM 上の Linux ディストリビューションを
より簡単に CD-ROM からインストールすることができるだろう。
ディストリビューションは、
.B LOADLIN
を使って、フロッピーを全く利用せずに CD-ROM から
.I /dev/initrd
を直接ロードすることができる。
また、
.B LILO
ブートフロッピーを使ってブートを行い、
.I /dev/initrd
を通して CD-ROM からより大きな RAM ディスクを起動することもできる。
.\"
.\"
.\"
.SH ファイル
.I /dev/initrd
.br
.I /dev/ram0
.br
.I /linuxrc
.br
.I /initrd
.\"
.\"
.\"
.SH 注意
.IP 1. 3
現在のカーネルでは、
.I /dev/ram0
が
.I /
から
.I /initrd
に移動された際に、移動時にマウントされていたファイルシステムは、
その後も継続的にアクセス可能である。しかし、
.I /proc/mounts
のエントリは更新されない。
.IP 2.
現在のカーネルでは、ディレクトリ
.I /initrd
が存在しない場合、
.I /dev/ram0
を何らかのプロセスが利用していたり、何らかのファイルシステムが
.I /dev/ram0
上にマウントされていると、
.I /dev/ram0
は完全にはアンマウント「されない」。
.I /dev/ram0
が、完全にアンマウント「されなければ」、
.I /dev/ram0
はメモリ上に残ってしまうはずである。
.IP 3.
.I /dev/initrd
の利用者は、上記の注意事項で述べた動作に依存しないようにすべきである。
これらの動作は Linux カーネルの将来のバージョンでは変更される
かもしれないからだ。
.\"
.\"
.\"
.\" .SH 著者
.\" .BR initrd
.\" デバイスのためのカーネルコードは Werner Almesberger <almesber@lrc.epfl.ch>
.\" と Hans Lermen <lermen@elserv.ffm.fgan.de> によって書かれた。
.\" .BR initrd
.\" のためのコードは、開発者向けバージョンの 1.3.73 で
.\" メインの Linux カーネルに組み込まれた。
.SH 関連項目
.BR chown (1),
.BR mknod (1),
.BR ram (4),
.BR freeramdisk (8),
.BR rdev (8)

カーネルソースパッケージに含まれるドキュメントファイル
.IR initrd.txt "、"
LILO のドキュメント、LOADLIN のドキュメント、SYSLINUX のドキュメント。
