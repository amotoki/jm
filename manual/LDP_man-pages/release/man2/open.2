.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"             and Copyright (C) 2008 Greg Banks
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 1996-04-13 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-05-13 by Thomas Koenig
.\" Modified 1996-12-20 by Michael Haardt
.\" Modified 1999-02-19 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1998-11-28 by Joseph S. Myers <jsm28@hermes.cam.ac.uk>
.\" Modified 1999-06-03 by Michael Haardt
.\" Modified 2002-05-07 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-12-08, mtk, reordered flags list alphabetically
.\" 2004-12-08, Martin Pool <mbp@sourcefrog.net> (& mtk), added O_NOATIME
.\" 2007-09-18, mtk, Added description of O_CLOEXEC + other minor edits
.\" 2008-01-03, mtk, with input from Trond Myklebust
.\"     <trond.myklebust@fys.uio.no> and Timo Sirainen <tss@iki.fi>
.\"     Rewrite description of O_EXCL.
.\" 2008-01-11, Greg Banks <gnb@melbourne.sgi.com>: add more detail
.\"     on O_DIRECT.
.\" 2008-02-26, Michael Haardt: Reorganized text for O_CREAT and mode
.\"
.\" FIXME . Apr 08: The next POSIX revision has O_EXEC, O_SEARCH, and
.\" O_TTYINIT.  Eventually these may need to be documented.  --mtk
.\" FIXME Linux 2.6.33 has O_DSYNC, and a hidden __O_SYNC.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-08-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-05-25, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2002-01-02, Yuichi SATO
.\" Updated & Modified 2002-07-07, Yuichi SATO
.\" Updated & Modified 2002-09-19, Yuichi SATO
.\" Updated & Modified 2003-07-30, Yuichi SATO
.\" Updated & Modified 2003-11-27, Yuichi SATO
.\" Updated & Modified 2005-01-01, Yuichi SATO
.\" Updated & Modified 2005-09-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2005-10-14, Akihiro MOTOKI
.\" Updated & Modified 2006-01-18, Akihiro MOTOKI
.\" Updated & Modified 2006-04-15, Akihiro MOTOKI, LDP v2.29
.\" Updated 2007-01-07, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-10-12, Akihiro MOTOKI, LDP v2.66
.\" Updated 2008-02-12, Akihiro MOTOKI, LDP v2.77
.\" Updated 2008-04-04, Akihiro MOTOKI, LDP v2.79
.\" Updated 2008-08-08, Akihiro MOTOKI, LDP v3.05
.\" Updated 2010-04-23, Akihiro MOTOKI, LDP v3.24
.\" Updated 2012-05-08, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2012-05-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-08-16, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH OPEN 2 2013\-08\-09 Linux "Linux Programmer's Manual"
.SH 名前
open, creat \- ファイルやデバイスのオープン、作成を行う
.SH 書式
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/stat.h>\fP
\fB#include <fcntl.h>\fP
.sp
\fBint open(const char *\fP\fIpathname\fP\fB, int \fP\fIflags\fP\fB);\fP
\fBint open(const char *\fP\fIpathname\fP\fB, int \fP\fIflags\fP\fB, mode_t \fP\fImode\fP\fB);\fP

\fBint creat(const char *\fP\fIpathname\fP\fB, mode_t \fP\fImode\fP\fB);\fP
.fi
.SH 説明
ファイルの \fIpathname\fP を与えると、 \fBopen\fP()  はファイルディスクリプタを返す。
ファイルディスクリプタは、この後に続くシステムコール (\fBread\fP(2), \fBwrite\fP(2), \fBlseek\fP(2),
\fBfcntl\fP(2) など)  で使用される小さな非負の整数である。 このシステムコールが成功した場合に返されるファイルディスクリプタは
そのプロセスがその時点でオープンしていないファイルディスクリプタの うち最小の数字のものとなる。
.PP
デフォルトでは、新しいファイルディスクリプタは \fBexecve\fP(2) を実行した後も
オープンされたままとなる (つまり、 \fBfcntl\fP(2) に説明がある \fBFD_CLOEXEC\fP
ファイルディスクリプタフラグは最初は無効である; 後述の \fBO_CLOEXEC\fP フラグ
を使うとこのデフォルトを変更することができる)。 ファイルオフセット
(file offset) はファイルの先頭に設定される (\fBlseek\fP(2) 参照)。
.PP
\fBopen\fP()  を呼び出すと、「オープンファイル記述」 \fI(open file description)\fP
が作成される。ファイル記述とは、システム全体の オープン中のファイルのテーブルのエントリである。 このエントリは、ファイルオフセットとファイル状態フラグ
(\fBfcntl\fP(2)  \fBF_SETFL\fP 操作により変更可能) が保持する。 ファイルディスクリプタはこれらのエントリの一つへの参照である。
この後で \fIpathname\fP が削除されたり、他のファイルを参照するように変更されたりしても、 この参照は影響を受けない。
新しいオープンファイル記述は最初は他のどのプロセスとも 共有されていないが、 \fBfork\fP(2)  で共有が起こる場合がある。
.PP
引き数 \fIflags\fP には、アクセスモード \fBO_RDONLY\fP, \fBO_WRONLY\fP, \fBO_RDWR\fP
のどれかひとつが入っていなければならない。 これらはそれぞれ読み込み専用、書き込み専用、読み書き用に ファイルをオープンすることを要求するものである。

.\" SUSv4 divides the flags into:
.\" * Access mode
.\" * File creation
.\" * File status
.\" * Other (O_CLOEXEC, O_DIRECTORY, O_NOFOLLOW)
.\" though it's not clear what the difference between "other" and
.\" "File creation" flags is.  I raised an Aardvark to see if this
.\" can be clarified in SUSv4; 10 Oct 2008.
.\" http://thread.gmane.org/gmane.comp.standards.posix.austin.general/64/focus=67
.\" TC1 (balloted in 2013), resolved this, so that those three constants
.\" are also categorized" as file status flags.
.\"
さらに、 \fIflags\fP には、ファイル作成フラグ (file creation flag) とファイル状態フラグ (file status
flag) を 0 個以上「ビット単位の OR (bitwise\-or)」で 指定することができる。 \fIファイル作成フラグ\fP は
\fBO_CLOEXEC\fP, \fBO_CREAT\fP, \fBO_DIRECTORY\fP, \fBO_EXCL\fP, \fBO_NOCTTY\fP,
\fBO_NOFOLLOW\fP, \fBO_TRUNC\fP, \fBO_TTY_INIT\fP である。 \fIファイル状態フラグ\fP
は以下のリストのうち上記以外の残りのものである。 二種類のフラグの違いは、ファイル状態フラグの方は \fBfcntl\fP(2)
を使ってその内容を取得したり (場合によっては) 変更したりできる点にある。 ファイル作成フラグとファイル状態フラグの全リストを以下に示す:
.TP 
\fBO_APPEND\fP
.\" For more background, see
.\" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=453946
.\" http://nfs.sourceforge.net/
The file is opened in append mode.  Before each \fBwrite\fP(2), the file offset
is positioned at the end of the file, as if with \fBlseek\fP(2).  \fBO_APPEND\fP
may lead to corrupted files on NFS filesystems if more than one process
appends data to a file at once.  This is because NFS does not support
appending to a file, so the client kernel has to simulate it, which can't be
done without a race condition.
.TP 
\fBO_ASYNC\fP
シグナル駆動 I/O (signal\-driven I/O) を有効にする: このファイルディスクリプタへの
入力または出力が可能になった場合に、シグナルを生成する (デフォルトは \fBSIGIO\fP であるが、 \fBfcntl\fP(2)
によって変更可能である)。 この機能が使用可能なのは端末、疑似端末、ソケットのみであり、 (Linux 2.6 以降では) パイプと FIFO
に対しても使用できる。 さらに詳しい説明は \fBfcntl\fP(2)  を参照すること。
.TP 
\fBO_CLOEXEC\fP (Linux 2.6.23 以降)
.\" This flag fixes only one form of the race condition;
.\" The race can also occur with, for example, descriptors
.\" returned by accept(), pipe(), etc.
新しいファイルディスクリプタに対して close\-on\-exec フラグを有効にする。 このフラグを指定することで、プログラムは
\fBFD_CLOEXEC\fP フラグをセットするための \fBfcntl\fP(2)  \fBF_SETFD\fP 操作を別途呼び出す必要がなくなる。
また、ある種のマルチスレッドのプログラムはこのフラグの使用は 不可欠である。なぜなら、個別に \fBFD_CLOEXEC\fP フラグを設定する
\fBfcntl\fP(2)  \fBF_SETFD\fP 操作を呼び出したとしても、あるスレッドがファイルディスクリプタを オープンするのと同時に別のスレッドが
\fBfork\fP(2)  と \fBexecve\fP(2)  を実行するという競合条件を避けるのには十分ではないからである。
.TP 
\fBO_CREAT\fP
.\" As at 2.6.25, bsdgroups is supported by ext2, ext3, ext4, and
.\" XFS (since 2.6.14).
If the file does not exist it will be created.  The owner (user ID) of the
file is set to the effective user ID of the process.  The group ownership
(group ID) is set either to the effective group ID of the process or to the
group ID of the parent directory (depending on filesystem type and mount
options, and the mode of the parent directory, see the mount options
\fIbsdgroups\fP and \fIsysvgroups\fP described in \fBmount\fP(8)).
.RS
.PP
\fImode\fP は新しいファイルを作成する場合に使用するアクセス許可 (permission) を指定する。 \fIflags\fP に \fBO_CREAT\fP
が指定されている場合、 \fImode\fP を指定しなければならない。 \fBO_CREAT\fP が指定されていない場合、 \fImode\fP は無視される。
有効なアクセス許可は、普段と同じようにプロセスの \fIumask\fP によって修正され、作成されたファイルの許可は \fI(mode\ &\ ~umask)\fP となる。 このモードは、新しく作成されたファイルに対するそれ以降のアクセス にのみ適用される点に注意すること。
読み取り専用のファイルを作成する \fBopen\fP()  コールであっても、 読み書き可能なファイルディスクリプタを返すことがありうる。
.PP
\fImode\fP のために以下のシンボル定数が提供されている :
.TP  9
\fBS_IRWXU\fP
00700 ユーザー (ファイルの所有者) に読み込み、書き込み、 実行の許可がある。
.TP 
\fBS_IRUSR\fP
00400 ユーザーに読み込みの許可がある。
.TP 
\fBS_IWUSR\fP
00200 ユーザーに書き込みの許可がある。
.TP 
\fBS_IXUSR\fP
00100 ユーザーに実行の許可がある。
.TP 
\fBS_IRWXG\fP
00070 グループに読み込み、書き込み、実行の許可がある。
.TP 
\fBS_IRGRP\fP
00040 グループに読み込みの許可がある。
.TP 
\fBS_IWGRP\fP
00020 グループに書き込みの許可がある。
.TP 
\fBS_IXGRP\fP
00010 グループに実行の許可がある。
.TP 
\fBS_IRWXO\fP
00007 他人 (others) に読み込み、書き込み、実行の許可がある。
.TP 
\fBS_IROTH\fP
00004 他人に読み込みの許可がある。
.TP 
\fBS_IWOTH\fP
00002 他人に書き込みの許可がある。
.TP 
\fBS_IXOTH\fP
00001 他人に実行の許可がある。
.RE
.TP 
\fBO_DIRECT\fP (Linux 2.4.10 以降)
このファイルに対する I/O のキャッシュの効果を最小化しようとする。このフラグを使うと、一般的に性能が低下する。
しかしアプリケーションが独自にキャッシングを行っているような 特別な場合には役に立つ。 ファイルの I/O はユーザー空間バッファに対して直接行われる。
\fBO_DIRECT\fP フラグ自身はデータを同期で転送しようとはするが、 \fBO_SYNC\fP
フラグのようにデータと必要なメタデータの転送が保証されるわけではない。同期 I/O を保証するためには、 \fBO_DIRECT\fP に加えて
\fBO_SYNC\fP を使用しなければならない。下記の「注意」の節の議論も参照。
.sp
ブロックデバイスに対する似通った意味のインターフェースが \fBraw\fP(8)  で説明されている (但し、このインタフェースは非推奨である)。
.TP 
\fBO_DIRECTORY\fP
.\" But see the following and its replies:
.\" http://marc.theaimsgroup.com/?t=112748702800001&r=1&w=2
.\" [PATCH] open: O_DIRECTORY and O_CREAT together should fail
.\" O_DIRECTORY | O_CREAT causes O_DIRECTORY to be ignored.
\fIpathname\fP がディレクトリでなければオープンは失敗する。 このフラグは Linux 特有であり、 \fBopendir\fP(3)  が FIFO
やテープデバイスに対してコールされた場合の サービス不能 (denial\-of\-service) 攻撃を避けるために カーネル 2.1.126
で追加された。
.TP 
\fBO_EXCL\fP
この呼び出しでファイルが作成されることを保証する。このフラグが \fBO_CREAT\fP と
一緒に指定され、 \fIpathname\fP のファイルが既に存在した場合、 \fBopen\fP() は失敗
する。

.\" POSIX.1-2001 explicitly requires this behavior.
これら二つのフラグが指定された際、シンボリックリンクは辿られない。 \fIpathname\fP がシンボリックリンクの場合、
シンボリックリンクがどこを指しているかに関わらず \fBopen\fP()  は失敗する。

一般的には、 \fBO_CREAT\fP を指定せずに \fBO_EXCL\fP を使用した場合の
\fBO_EXCL\fP の動作は規定されていない。
これには一つ例外があり、Linux 2.6 以降では、
\fIpathname\fP がブロックデバイスを参照している場合、
\fBO_CREAT\fP なしで \fBO_EXCL\fP を使用することができる。
システムがそのブロックデバイスを使用中の場合 (例えば、
マウントされているなど)、 \fBopen\fP() はエラー \fBEBUSY\fP で失敗する。

On NFS, \fBO_EXCL\fP is supported only when using NFSv3 or later on kernel 2.6
or later.  In NFS environments where \fBO_EXCL\fP support is not provided,
programs that rely on it for performing locking tasks will contain a race
condition.  Portable programs that want to perform atomic file locking using
a lockfile, and need to avoid reliance on NFS support for \fBO_EXCL\fP, can
create a unique file on the same filesystem (e.g., incorporating hostname
and PID), and use \fBlink\fP(2)  to make a link to the lockfile.  If \fBlink\fP(2)
returns 0, the lock is successful.  Otherwise, use \fBstat\fP(2)  on the unique
file to check if its link count has increased to 2, in which case the lock
is also successful.
.TP 
\fBO_LARGEFILE\fP
(LFS) \fIoff_t\fP ではサイズを表せない (だだし \fIoff64_t\fP ではサイズを表せる)ファ
イルをオープン可能にする。この定義を有効にするためには、(\fIどの\fPヘッダファイ
ルをインクルードするよりも前に) \fB_LARGEFILE64_SOURCE\fP マクロを定義しなければ
ならない。
32 ビットシステムにおいて大きなファイルにアクセスしたい場合、
(\fBO_LARGEFILE\fP を使うよりも) \fB_FILE_OFFSET_BITS\fP 機能検査マクロを 64 に
セットする方が望ましい方法である (\fBfeature_test_macros\fP(7) を参照)。
.TP 
\fBO_NOATIME\fP (Linux 2.6.8 以降)
.\" The O_NOATIME flag also affects the treatment of st_atime
.\" by mmap() and readdir(2), MTK, Dec 04.
Do not update the file last access time (\fIst_atime\fP in the inode)  when the
file is \fBread\fP(2).  This flag is intended for use by indexing or backup
programs, where its use can significantly reduce the amount of disk
activity.  This flag may not be effective on all filesystems.  One example
is NFS, where the server maintains the access time.
.TP 
\fBO_NOCTTY\fP
\fIpathname\fP が端末 (terminal) デバイス \(em \fBtty\fP(4) 参照 \(em を指している
場合に、たとえそのプロセスが制御端末を持っていなくても、オープンしたファイル
は制御端末にはならない。
.TP 
\fBO_NOFOLLOW\fP
.\" The headers from glibc 2.0.100 and later include a
.\" definition of this flag; \fIkernels before 2.1.126 will ignore it if
.\" used\fP.
\fIpathname\fP がシンボリックリンクだった場合、オープンは失敗する。 これは FreeBSD の拡張で、Linux には バージョン
2.1.126 で追加された。 このフラグが指定された場合でも \fIpathname\fP の前の方の要素 (最後のディレクトリセパレータより前の部分)
にあるシンボリックリンクについてはリンクが辿られる。 下記の \fBO_PATH\fP も参照のこと。
.TP 
\fBO_NONBLOCK\fP または \fBO_NDELAY\fP
可能ならば、ファイルは非停止 (nonblocking) モードでオープンされる。
\fBopen\fP() も、返したファイルディスクリプタに対する以後のすべての操作も呼び出
したプロセスを待たせることはない。 FIFO (名前付きパイプ) を扱う場合には
\fBfifo\fP(7) も参照すること。 強制ファイルロック (mandatory file lock) やファイ
ルリース (file lease) と組み合わせた場合の、 \fBO_NONBLOCK\fP の効果についての
議論は、 \fBfcntl\fP(2) を参照すること。
.TP 
\fBO_PATH\fP (Linux 2.6.39 以降)
.\" commit 1abf0c718f15a56a0a435588d1b104c7a37dc9bd
.\" commit 326be7b484843988afe57566b627fb7a70beac56
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
.\"
.\" http://thread.gmane.org/gmane.linux.man/2790/focus=3496
.\"	Subject: Re: [PATCH] open(2): document O_PATH
.\"	Newsgroups: gmane.linux.man, gmane.linux.kernel
.\"
Obtain a file descriptor that can be used for two purposes: to indicate a
location in the filesystem tree and to perform operations that act purely at
the file descriptor level.  The file itself is not opened, and other file
operations (e.g., \fBread\fP(2), \fBwrite\fP(2), \fBfchmod\fP(2), \fBfchown\fP(2),
\fBfgetxattr\fP(2), \fBmmap\fP(2))  fail with the error \fBEBADF\fP.

The following operations \fIcan\fP be performed on the resulting file
descriptor:
.RS
.IP * 3
.\" commit 332a2e1244bd08b9e3ecd378028513396a004a24
.\" fstat(): commit 55815f70147dcfa3ead5738fd56d3574e2e3c1c2
\fBclose\fP(2); \fBfchdir\fP(2)  (since Linux 3.5); \fBfstat\fP(2)  (since Linux
3.6).
.IP *
Duplicating the file descriptor (\fBdup\fP(2), \fBfcntl\fP(2)  \fBF_DUPFD\fP, etc.).
.IP *
Getting and setting file descriptor flags (\fBfcntl\fP(2)  \fBF_GETFD\fP and
\fBF_SETFD\fP).
.IP *
Retrieving open file status flags using the \fBfcntl\fP(2)  \fBF_GETFL\fP
operation: the returned flags will include the bit \fBO_PATH\fP.

.IP *
Passing the file descriptor as the \fIdirfd\fP argument of \fBopenat\fP(2)  and
the other "*at()" system calls.
.IP *
Passing the file descriptor to another process via a UNIX domain socket (see
\fBSCM_RIGHTS\fP in \fBunix\fP(7)).
.RE
.IP
When \fBO_PATH\fP is specified in \fIflags\fP, flag bits other than \fBO_DIRECTORY\fP
and \fBO_NOFOLLOW\fP are ignored.

If the \fBO_NOFOLLOW\fP flag is also specified, then the call returns a file
descriptor referring to the symbolic link.  This file descriptor can be used
as the \fIdirfd\fP argument in calls to \fBfchownat\fP(2), \fBfstatat\fP(2),
\fBlinkat\fP(2), and \fBreadlinkat\fP(2)  with an empty pathname to have the calls
operate on the symbolic link.
.TP 
\fBO_SYNC\fP
ファイルは同期 (synchronous) I/O モードでオープンされる。 \fBopen\fP()  が返したファイルディスクリプタに対して
\fBwrite\fP(2)  を行うと、必ず呼び出したプロセスをブロックし、 該当ハードウェアに物理的に書き込まれるまで返らない。
\fI以下の「注意」の章も参照。\fP
.TP 
\fBO_TRUNC\fP
ファイルが既に存在し、通常ファイルであり、 書き込み可モードでオープンされている (つまり、 \fBO_RDWR\fPまたは\fBO_WRONLY\fP の)
場合、長さ 0 に切り詰め (truncate) られる。 ファイルが FIFO または端末デバイスファイルの場合、 \fBO_TRUNC\fP
フラグは無視される。 それ以外の場合、 \fBO_TRUNC\fP の効果は未定義である。
.PP
これらの選択フラグのいくつかはファイルをオープンした後でも \fBfcntl\fP(2)  を使用して変更することができる。

\fBcreat\fP()  は \fIflags\fP に \fBO_CREAT|O_WRONLY|O_TRUNC\fP を指定して \fBopen\fP()
を行うのと等価である。
.SH 返り値
\fBopen\fP()  と \fBcreat\fP()  は新しいファイルディスクリプタを返す。 エラーが発生した場合は \-1 を返す (その場合は
\fIerrno\fP が適切に設定される)。
.SH エラー
.TP 
\fBEACCES\fP
ファイルに対する要求されたアクセスが許されていないか、 \fIpathname\fP のディレクトリ部分の何れかのディレクトリに検索許可がなかった。
またはファイルが存在せず、親ディレクトリへの書き込み許可がなかった。 (\fBpath_resolution\fP(7)  も参照すること。)
.TP 
\fBEDQUOT\fP
Where \fBO_CREAT\fP is specified, the file does not exist, and the user's quota
of disk blocks or inodes on the filesystem has been exhausted.
.TP 
\fBEEXIST\fP
\fIpathname\fP は既に存在し、 \fBO_CREAT\fP と \fBO_EXCL\fP が使用された。
.TP 
\fBEFAULT\fP
\fIpathname\fP がアクセス可能なアドレス空間の外を指している。
.TP 
\fBEFBIG\fP
\fBEOVERFLOW\fP 参照。
.TP 
\fBEINTR\fP
遅いデバイス (例えば FIFO、 \fBfifo\fP(7)  参照) のオープンが完了するのを待って停止している間に
システムコールがシグナルハンドラにより割り込まれた。 \fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
The filesystem does not support the \fBO_DIRECT\fP flag. See \fBNOTES\fP for more
information.
.TP 
\fBEISDIR\fP
\fIpathname\fP はディレクトリを参照しており、書き込み要求が含まれていた (つまり \fBO_WRONLY\fP または \fBO_RDWR\fP
が設定されている)。
.TP 
\fBELOOP\fP
\fIpathname\fP を解決する際に遭遇したシンボリックリンクが多過ぎる。 または \fBO_NOFOLLOW\fP が指定されており、
\fIpathname\fP がシンボリックリンクだった。
.TP 
\fBEMFILE\fP
プロセスがオープンしているファイル数がすでに最大数に達している。
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP が長過ぎる。
.TP 
\fBENFILE\fP
オープンされているファイルの総数がシステムの制限に達している。
.TP 
\fBENODEV\fP
\fIpathname\fP がデバイススペシャルファイルを参照しており、対応するデバイスが存在しない。 (これは Linux
カーネルのバグであり、この場合には \fBENXIO\fP が返されるべきである)
.TP 
\fBENOENT\fP
\fBO_CREAT\fP が設定されておらず、かつ指定されたファイルが存在しない。 または、 \fIpathname\fP のディレクトリ部分が存在しないか壊れた
(dangling) シンボリックリンクである。
.TP 
\fBENOMEM\fP
十分なカーネルメモリーがない。
.TP 
\fBENOSPC\fP
\fIpathname\fP を作成する必要があるが、 \fIpathname\fP を含んでいるデバイスに新しいファイルのための空き容量がない。
.TP 
\fBENOTDIR\fP
\fIpathname\fP に含まれるディレクトリ部分のどれかが実際にはディレクトリでない。 または \fBO_DIRECTORY\fP が指定されており、
\fIpathname\fP がディレクトリでない。
.TP 
\fBENXIO\fP
\fBO_NONBLOCK\fP | \fBO_WRONLY\fP が設定されており、指定したファイルが FIFO で
そのファイルを読み込みのためにオープンしているプロセスが存在しない。 または、ファイルがデバイススペシャルファイルで 対応するデバイスが存在しない。
.TP 
\fBEOVERFLOW\fP
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=7253
.\" "Open of a large file on 32-bit fails with EFBIG, should be EOVERFLOW"
.\" Reported 2006-10-03
\fIpathname\fP が参照しているのが、大き過ぎてオープンできない通常のファイルである。 通常、このエラーが発生するは、32
ビットプラットフォーム上で \fI\-D_FILE_OFFSET_BITS=64\fP を指定せずにコンパイルされたアプリケーションが、ファイルサイズが
\fI(2<31)\-1\fP ビットを超えるファイルを開こうとした場合である。 上記の \fBO_LARGEFILE\fP も参照。 これは
POSIX.1\-2001 で規定されているエラーである。 2.6.24 より前のカーネルでは、Linux はこの場合にエラー \fBEFBIG\fP
を返していた。
.TP 
\fBEPERM\fP
.\" Strictly speaking, it's the filesystem UID... (MTK)
\fBO_NOATIME\fP フラグが指定されたが、呼び出し元の実効ユーザー ID が ファイルの所有者と一致せず、かつ呼び出し元に特権
(\fBCAP_FOWNER\fP)  がない。
.TP 
\fBEROFS\fP
\fIpathname\fP refers to a file on a read\-only filesystem and write access was
requested.
.TP 
\fBETXTBSY\fP
\fIpathname\fP が現在実行中の実行イメージを参照しており、書き込みが要求された。
.TP 
\fBEWOULDBLOCK\fP
\fBO_NONBLOCK\fP フラグが指定されたが、そのファイルには矛盾するリースが設定されていた (\fBfcntl\fP(2)  参照)。
.SH 準拠
SVr4, 4.3BSD, POSIX.1\-2001.  フラグ \fBO_DIRECTORY\fP, \fBO_NOATIME\fP,
\fBO_NOFOLLOW\fP, \fBO_PATH\fP は Linux 特有のものであり、 これらのフラグの定義を得るためには、
(「どの」ヘッダファイルをインクルードするよりも前に)  \fB_GNU_SOURCE\fP を定義する必要があるかもしれない。

\fBO_CLOEXEC\fP フラグは POSIX.1\-2001 では規定されていないが、 POSIX.1\-2008 で規定されている。

\fBO_DIRECT\fP は POSIX では規定されていない。 \fBO_DIRECT\fP の定義を得るには
(「どの」ヘッダファイルをインクルードするよりも前に)  \fB_GNU_SOURCE\fP を定義しなければならない。
.SH 注意
Linux では、 \fBO_NONBLOCK\fP フラグは、 open を実行したいが read または write を実行する意図は
必ずしもないことを意味する。 これは \fBioctl\fP(2)  のためのファイルディスクリプタを取得するために、
デバイスをオープンするときによく用いられる。

.\" See for example util-linux's disk-utils/setfdprm.c
.\" For some background on access mode 3, see
.\" http://thread.gmane.org/gmane.linux.kernel/653123
.\" "[RFC] correct flags to f_mode conversion in __dentry_open"
.\" LKML, 12 Mar 2008
「アクセスモード」の値 \fBO_RDONLY\fP, \fBO_WRONLY\fP, \fBO_RDWR\fP は、 \fIflags\fP
に指定できる他の値と違い、個々のビットを指定するものではなく、 これらの値は \fIflags\fP の下位 2 ビットを定義する。 \fBO_RDONLY\fP,
\fBO_WRONLY\fP, \fBO_RDWR\fP はそれぞれ 0, 1, 2 に定義されている。 言い換えると、 \fBO_RDONLY |
O_WRONLY\fP の組み合わせは論理的に間違いであり、確かに \fBO_RDWR\fP と同じ意味ではない。 Linux
では、特別な、非標準なアクセスモードとして 3 (バイナリでは 11) が 予約されており \fIflags\fP に指定できる。
このアクセスモードを指定すると、ファイルの読み出し/書き込み許可をチェックし、 読み出しにも書き込みにも使用できないディスクリプタを返す。
この非標準のアクセスモードはいくつかの Linux ドライバで、デバイス固有の \fBioctl\fP(2)
操作にのみ使用されるディスクリプタを返すために使われている。
.LP
.\" Linux 2.0, 2.5: truncate
.\" Solaris 5.7, 5.8: truncate
.\" Irix 6.5: truncate
.\" Tru64 5.1B: truncate
.\" HP-UX 11.22: truncate
.\" FreeBSD 4.7: truncate
\fBO_RDONLY | O_TRUNC\fP の影響は未定義であり、その動作は実装によって異なる。 多くのシステムではファイルは実際に切り詰められる。
.PP
NFS を実現しているプロトコルには多くの不備があり、特に \fBO_SYNC\fP と \fBO_NDELAY\fP に影響する。

POSIX provides for three different variants of synchronized I/O,
corresponding to the flags \fBO_SYNC\fP, \fBO_DSYNC\fP, and \fBO_RSYNC\fP.  Currently
(2.6.31), Linux implements only \fBO_SYNC\fP, but glibc maps \fBO_DSYNC\fP and
\fBO_RSYNC\fP to the same numerical value as \fBO_SYNC\fP.  Most Linux filesystems
don't actually implement the POSIX \fBO_SYNC\fP semantics, which require all
metadata updates of a write to be on disk on returning to user space, but
only the \fBO_DSYNC\fP semantics, which require only actual file data and
metadata necessary to retrieve it to be on disk by the time the system call
returns.

\fBopen\fP()  はスペシャルファイルをオープンすることができるが、 \fBcreat\fP()  でスペシャルファイルを作成できない点に注意すること。
代わりに \fBmknod\fP(2)  を使用する。
.LP
On NFS filesystems with UID mapping enabled, \fBopen\fP()  may return a file
descriptor but, for example, \fBread\fP(2)  requests are denied with
\fBEACCES\fP.  This is because the client performs \fBopen\fP()  by checking the
permissions, but UID mapping is performed by the server upon read and write
requests.

ファイルが新しく作成されると、 ファイルの \fIst_atime\fP, \fIst_ctime\fP, \fIst_mtime\fP フィールド
(それぞれ最終アクセス時刻、最終状態変更時刻、最終修正時刻である。 \fBstat\fP(2)  参照) が現在時刻に設定される。 さらに親ディレクトリの
\fIst_ctime\fP と \fIst_mtime\fP も現在時刻に設定される。 それ以外の場合で、O_TRUNC フラグでファイルが修正されたときは、
ファイルの \fIst_ctime\fP と \fIst_mtime\fP フィールドが現在時刻に設定される。
.SS O_DIRECT
.LP
The \fBO_DIRECT\fP flag may impose alignment restrictions on the length and
address of user\-space buffers and the file offset of I/Os.  In Linux
alignment restrictions vary by filesystem and kernel version and might be
absent entirely.  However there is currently no filesystem\-independent
interface for an application to discover these restrictions for a given file
or filesystem.  Some filesystems provide their own interfaces for doing so,
for example the \fBXFS_IOC_DIOINFO\fP operation in \fBxfsctl\fP(3).
.LP
Under Linux 2.4, transfer sizes, and the alignment of the user buffer and
the file offset must all be multiples of the logical block size of the
filesystem.  Under Linux 2.6, alignment to 512\-byte boundaries suffices.
.LP
メモリバッファがプライベートマッピング (\fBmmap\fP(2) の \fBMAP_PRIVATE\fP
フラグで作成されたマッピング) の場合には、\fBO_DIRECT\fP I/O は
\fBfork\fP(2) システムコールと同時に決して実行すべきではない
(プライベートマッピングには、ヒープ領域に割り当てられたメモリや静的に
割り当てたバッファも含まれる)。非同期 I/O インターフェース (AIO) 経由
やプロセス内の他のスレッドから発行された、このような I/O は、
\fBfork\fP(2) が呼び出される前に完了されるべきである。
そうしなかった場合、データ破壊や、親プロセスや子プロセスでの予期しない
動作が起こる可能性がある。
\fBO_DIRECT\fP I/O 用のメモリバッファが \fBshmat\fP(2) や\fBMAP_SHARED\fP フラグ
付きの \fBmmap\fP(2) で作成された場合には、この制限はあてはまらない。
\fBmadvise\fP(2) でメモリバッファにアドバイス \fBMADV_DONTFORK\fP が設定され
ている場合にも、この制限はあてはまらない(\fBMADV_DONTFORK\fP はそのメモリ
バッファが \fBfork\fP(2) 後に子プロセスからは利用できないことを保証するも
のである)。
.LP
\fBO_DIRECT\fP フラグは SGI IRIX で導入された。SGI IRIX にも Linux 2.4 と同様の (ユーザーバッファの)
アラインメントの制限がある。 また、IRIX には適切な配置とサイズを取得するための \fBfcntl\fP(2)  コールがある。 FreeBSD 4.x
も同じ名前のフラグを導入したが、アラインメントの制限はない。
.LP
\fBO_DIRECT\fP support was added under Linux in kernel version 2.4.10.  Older
Linux kernels simply ignore this flag.  Some filesystems may not implement
the flag and \fBopen\fP()  will fail with \fBEINVAL\fP if it is used.
.LP
Applications should avoid mixing \fBO_DIRECT\fP and normal I/O to the same
file, and especially to overlapping byte regions in the same file.  Even
when the filesystem correctly handles the coherency issues in this
situation, overall I/O throughput is likely to be slower than using either
mode alone.  Likewise, applications should avoid mixing \fBmmap\fP(2)  of files
with direct I/O to the same files.
.LP
The behaviour of \fBO_DIRECT\fP with NFS will differ from local filesystems.
Older kernels, or kernels configured in certain ways, may not support this
combination.  The NFS protocol does not support passing the flag to the
server, so \fBO_DIRECT\fP I/O will bypass the page cache only on the client;
the server may still cache the I/O.  The client asks the server to make the
I/O synchronous to preserve the synchronous semantics of \fBO_DIRECT\fP.  Some
servers will perform poorly under these circumstances, especially if the I/O
size is small.  Some servers may also be configured to lie to clients about
the I/O having reached stable storage; this will avoid the performance
penalty at some risk to data integrity in the event of server power
failure.  The Linux NFS client places no alignment restrictions on
\fBO_DIRECT\fP I/O.
.PP
まとめると、 \fBO_DIRECT\fP は、注意して使うべきであるが、強力なツールとなる可能性を持っている。 アプリケーションは \fBO_DIRECT\fP
をデフォルトでは無効になっている性能向上のためのオプションと 考えておくのがよいであろう。
.PP
.RS
「O_DIRECT でいつも困るのは、インタフェース全部が本当にお馬鹿な点だ。 たぶん危ないマインドコントロール剤で
頭がおかしくなったサルが設計したんじゃないかな」 \(em Linus
.RE
.SH バグ
.\" FIXME . Check bugzilla report on open(O_ASYNC)
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=5993
現在のところ、 \fBopen\fP()  の呼び出し時に \fBO_ASYNC\fP を指定してシグナル駆動 I/O を有効にすることはできない。
このフラグを有効にするには \fBfcntl\fP(2)  を使用すること。
.SH 関連項目
\fBchmod\fP(2), \fBchown\fP(2), \fBclose\fP(2), \fBdup\fP(2), \fBfcntl\fP(2), \fBlink\fP(2),
\fBlseek\fP(2), \fBmknod\fP(2), \fBmmap\fP(2), \fBmount\fP(2), \fBopenat\fP(2), \fBread\fP(2),
\fBsocket\fP(2), \fBstat\fP(2), \fBumask\fP(2), \fBunlink\fP(2), \fBwrite\fP(2),
\fBfopen\fP(3), \fBfifo\fP(7), \fBpath_resolution\fP(7), \fBsymlink\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.54 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
