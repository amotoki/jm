.\" Copyright (C) 1995, Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Created   1995-08-06 Thomas K. Dyas <tdyas@eden.rutgers.edu>
.\" Modified  2000-07-01 aeb
.\" Modified  2002-07-23 aeb
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Sat Mar  1 00:55:10 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified Mon Sep 23 21:15:17 JST 2000
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2002-09-24 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Modified 2005-02-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SETFSUID 2 2013\-08\-08 Linux "Linux Programmer's Manual"
.SH 名前
setfsuid \- ファイルシステムのチェックに用いられるユーザ ID を設定する
.SH 書式
\fB#include <sys/fsuid.h>\fP
.sp
\fBint setfsuid(uid_t \fP\fIfsuid\fP\fB);\fP
.SH 説明
The system call \fBsetfsuid\fP()  changes the value of the caller's filesystem
user ID\(emthe user ID that the Linux kernel uses to check for all accesses
to the filesystem.  Normally, the value of the filesystem user ID will
shadow the value of the effective user ID.  In fact, whenever the effective
user ID is changed, the filesystem user ID will also be changed to the new
value of the effective user ID.

通常、 \fBsetfsuid\fP()  や \fBsetfsgid\fP() を明示的に呼び出すのは、Linux NFS サーバー のように、
ファイルアクセスに用いるユーザID / グループID を変更しなければならないが、 対応する実(real)/実効(effective) ユーザID /
グループID は変更したくないような プログラムに限られる。 NFS サーバーのようなプログラムで、通常のユーザID を変更すると、
プロセスを望まないシグナルにさらす可能性があり、 セキュリティホールになる。(下記参照)

\fBsetfsuid\fP()  will succeed only if the caller is the superuser or if
\fIfsuid\fP matches either the caller's real user ID, effective user ID, saved
set\-user\-ID, or current filesystem user ID.
.SH 返り値
On both success and failure, this call returns the previous filesystem user
ID of the caller.
.SH バージョン
.\" This system call is present since Linux 1.1.44
.\" and in libc since libc 4.7.6.
このシステムコールはバージョン 1.2 以降の Linux に存在する。
.SH 準拠
\fBsetfsuid\fP()  は Linux 特有であり、移植を想定したプログラムで使用してはいけない。
.SH 注意
glibc が引き数がユーザID として不正だと判断した場合は、 システムコールを行わず \fIerrno\fP に \fBEINVAL\fP を設定して \-1
が返される。
.LP
At the time when this system call was introduced, one process could send a
signal to another process with the same effective user ID.  This meant that
if a privilged process changed its effective user ID for the purpose of file
permission checking, then it could become vulnerable to receiving signals
sent by another (unprivileged) process with the same user ID.  The
filesystem user ID attribute was thus added to allow a process to change its
user ID for the purposes of file permission checking without at the same
time becoming vulnerable to receiving unwanted signals.  Since Linux 2.0,
signal permission handling is different (see \fBkill\fP(2)), with the result
that a process change can change its effective user ID without being
vulnerable to receiving signals from unwanted processes.  Thus,
\fBsetfsuid\fP()  is nowadays unneeded and should be avoided in new
applications (likewise for \fBsetfsgid\fP(2)).

元々の Linux の \fBsetfsuid\fP() システムコールは
16 ビットのグループ ID だけに対応していた。
その後、Linux 2.4 で、32 ビットの ID に対応した
\fBsetfsuid32\fP() が追加された。
glibc の \fBsetfsuid\fP() のラッパー関数は
カーネルバージョンによるこの違いを吸収している。
.SH バグ
No error indications of any kind are returned to the caller, and the fact
that both successful and unsuccessful calls return the same value makes it
impossible to directly determine whether the call succeeded or failed.
Instead, the caller must resort to looking at the return value from a
further call such as \fIsetfsuid(\-1)\fP (which will always fail), in order to
determine if a preceding call to \fBsetfsuid\fP()  changed the filesystem user
ID.  At the very least, \fBEPERM\fP should be returned when the call fails
(because the caller lacks the \fBCAP_SETUID\fP capability).
.SH 関連項目
\fBkill\fP(2), \fBsetfsgid\fP(2), \fBcapabilities\fP(7), \fBcredentials\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.54 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
