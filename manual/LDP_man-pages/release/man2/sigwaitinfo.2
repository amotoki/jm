.\" Copyright (c) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SIGWAITINFO 2 2012\-07\-21 Linux "Linux Programmer's Manual"
.SH 名前
sigwaitinfo, sigtimedwait \- キューに入れられたシグナルを同期して待つ
.SH 書式
.nf
\fB#include <signal.h>\fP
.sp
\fBint sigwaitinfo(const sigset_t *\fP\fIset\fP\fB, siginfo_t *\fP\fIinfo\fP\fB);\fP
.sp
\fBint sigtimedwait(const sigset_t *\fP\fIset\fP\fB, siginfo_t *\fP\fIinfo\fP\fB, \fP
\fB                 const struct timespec *\fP\fItimeout\fP\fB);\fP
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
\fBsigwaitinfo\fP(), \fBsigtimedwait\fP(): _POSIX_C_SOURCE\ >=\ 199309L
.SH 説明
\fBsigwaitinfo\fP()  suspends execution of the calling thread until one of the
signals in \fIset\fP is pending (If one of the signals in \fIset\fP is already
pending for the calling thread, \fBsigwaitinfo\fP()  will return immediately.)

\fBsigwaitinfo\fP()  removes the signal from the set of pending signals and
returns the signal number as its function result.  If the \fIinfo\fP argument
is not NULL, then the buffer that it points to is used to return a structure
of type \fIsiginfo_t\fP (see \fBsigaction\fP(2))  containing information about the
signal.
.PP
If multiple signals in \fIset\fP are pending for the caller, the signal that is
retrieved by \fBsigwaitinfo\fP()  is determined according to the usual ordering
rules; see \fBsignal\fP(7)  for further details.
.PP
\fBsigtimedwait\fP() は、 \fBsigwaitinfo\fP() と次の点を除いて全く同じように
動作する。この関数にはもう 1 つの引き数 \fItimeout\fP があり、シグナル待ち
でスレッドが一時停止する最小時間を指定することができる(この時間はシステ
ムクロックの粒度に切り上げられ、カーネルのスケジューリング遅延により
少しだけ長くなる可能性がある)。この引き数の型は以下のとおりである:
.sp
.in +4n
.nf
struct timespec {
    long    tv_sec;         /* 秒 */
    long    tv_nsec;        /* ナノ秒 */
}
.fi
.in
.sp
この構造体の 2 つのフィールドがともに 0 の場合、ポーリングが行われる: \fBsigtimedwait\fP()  は、呼び出し側プロセスに対して
待機しているシグナルの情報を返して戻るか、 \fIset\fP のうちのどのシグナルも待機していない場合はエラーを返して戻る。
.SH 返り値
成功した場合、 \fBsigwaitinfo\fP()  と \fBsigtimedwait\fP()  はシグナル番号 (すなわち 0 より大きい数) を返す。
失敗した場合、2 つの関数は \-1 を返し、 \fIerrno\fP はエラーを表す値に設定される。
.SH エラー
.TP 
\fBEAGAIN\fP
No signal in \fIset\fP was became pending within the \fItimeout\fP period
specified to \fBsigtimedwait\fP().
.TP 
\fBEINTR\fP
シグナル待ちがシグナルハンドラによって中断 (interrupt) された (このハンドラは \fIset\fP にあるシグナル以外のものである)。
\fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
\fItimeout\fP が不正である。
.SH 準拠
POSIX.1\-2001.
.SH 注意
In normal usage, the calling program blocks the signals in \fIset\fP via a
prior call to \fBsigprocmask\fP(2)  (so that the default disposition for these
signals does not occur if they become pending between successive calls to
\fBsigwaitinfo\fP()  or \fBsigtimedwait\fP())  and does not establish handlers for
these signals.  In a multithreaded program, the signal should be blocked in
all threads, in order to prevent the signal being treated according to its
default disposition in a thread other than the one calling \fBsigwaitinfo\fP()
or \fBsigtimedwait\fP()).

指定されたスレッドに対する処理待ちのシグナルの集合は、 そのスレッド自体宛ての処理待ちのシグナル集合と、プロセス全体宛ての
処理待ちのシグナル集合をあわせたものである (\fBsignal\fP(7)  参照)。

\fBSIGKILL\fP と \fBSIGSTOP\fP を待とうとした場合、黙って無視される。

If multiple threads of a process are blocked waiting for the same signal(s)
in \fBsigwaitinfo\fP()  or \fBsigtimedwait\fP(), then exactly one of the threads
will actually receive the signal if it becomes pending for the process as a
whole; which of the threads receives the signal is indeterminate.

POSIX では \fBsigtimedwait\fP()  の引き数 \fItimeout\fP の値を NULL にした場合の意味を未定義としている。
\fBsigwaitinfo\fP()  を呼び出したのと同じ意味としてもよいことになっており、 実際 Linux ではこのように動作する。

Linux では、 \fBsigwaitinfo\fP()  は \fBsigtimedwait\fP()  を用いて実装されたライブラリ関数である。
.SH 関連項目
\fBkill\fP(2), \fBsigaction\fP(2), \fBsignal\fP(2), \fBsignalfd\fP(2), \fBsigpending\fP(2),
\fBsigprocmask\fP(2), \fBsigqueue\fP(3), \fBsigsetops\fP(3), \fBsigwait\fP(3),
\fBsignal\fP(7), \fBtime\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.50 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
