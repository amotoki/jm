.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2010 Intel Corporation
.\" Author: Andi Kleen
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH KEXEC_LOAD 2 2010\-11\-04 Linux "Linux Programmer's Manual"
.SH 名前
kexec_load \- load a new kernel for later execution
.SH 書式
\fB#include <linux/kexec.h>\fP
.br
\fBlong kexec_load(unsigned long \fP\fIentry\fP\fB, unsigned long
\fP\fInr_segments\fP\fB,\fP
.br
\fB struct kexec_segment *\fP\fIsegments\fP\fB, unsigned long \fP\fIflags\fP\fB);\fP
.SH 説明
The \fBkexec_load\fP()  system call loads a new kernel that can be executed
later by \fBreboot\fP(2).
.PP
The \fIflags\fP argument is a mask whose high\-order bits control the operation
of the call.  The following values can be specified in \fIflags\fP:
.TP 
\fBKEXEC_ON_CRASH\fP (since Linux 2.6.13)
.\" FIXME figure out how this is really used
Execute the new kernel automatically on a system crash.
.TP 
\fBKEXEC_PRESERVE_CONTEXT\fP (since Linux 2.7.27)
Preserve the system hardware and software states before executing the new
kernel.  This could be used for system suspend.  This flag is only available
if the kernel was configured with \fBCONFIG_KEXEC_JUMP\fP, and is only
effective if \fInr_segments\fP is greater than 0.
.PP
The low\-order bits of \fIflags\fP contain the architecture of the
to\-be\-executed kernel.  Specify (OR) the constant \fBKEXEC_ARCH_DEFAULT\fP to
use the current architecture, or one of the following architecture constants
\fBKEXEC_ARCH_386\fP, \fBKEXEC_ARCH_X86_64\fP, \fBKEXEC_ARCH_PPC\fP,
\fBKEXEC_ARCH_PPC64\fP, \fBKEXEC_ARCH_IA_64\fP, \fBKEXEC_ARCH_ARM\fP,
\fBKEXEC_ARCH_S390\fP, \fBKEXEC_ARCH_SH\fP, \fBKEXEC_ARCH_MIPS\fP, and
\fBKEXEC_ARCH_MIPS_LE\fP.  The architecture must be executable on the CPU of
the system.

The \fIentry\fP argument is the physical entry address in the kernel image.
The \fInr_segments\fP argument is the number of segments pointed to by the
\fIsegments\fP pointer.  The \fIsegments\fP argument is an array of
\fIkexec_segment\fP structures which define the kernel layout:
.in +4n
.nf

struct kexec_segment {
    void   *buf;        /* Buffer in user space */
    size_t  bufsz;      /* Buffer length in user space */
    void   *mem;        /* Physical address of kernel */
    size_t  memsz;      /* Physical address length */
};
.fi
.in
.PP
.\" FIXME elaborate on the following:
The kernel image defined by \fIsegments\fP is copied from the calling process
into previously reserved memory.
.SH 返り値
On success, \fBkexec_load\fP()  returns 0.  On error, \-1 is returned and
\fIerrno\fP is set to indicate the error.
.SH エラー
.TP 
\fBEBUSY\fP
Another crash kernel is already being loaded or a crash kernel is already in
use.
.TP 
\fBEINVAL\fP
.\" KEXEC_SEGMENT_MAX == 16
\fIflags\fP is invalid; or \fInr_segments\fP is too large
.TP 
\fBEPERM\fP
The caller does not have the \fBCAP_SYS_BOOT\fP capability.
.SH バージョン
The \fBkexec_load\fP()  system call first appeared in Linux 2.6.13.
.SH 準拠
このシステムコールは Linux 固有である。
.SH 注意
Currently, there is no glibc support for \fBkexec_load\fP().  Call it using
\fBsyscall\fP(2).
.PP
.\" FIXME Andi submitted a patch for this.
.\" Check if it got accepted later.
The required constants are in the kernel source file \fIlinux/kexec.h\fP, which
is not currently exported to glibc.  Therefore, these constants must be
defined manually.

This system call is only available if the kernel was configured with
\fBCONFIG_KEXEC\fP.
.SH 関連項目
\fBreboot\fP(2), \fBsyscall\fP(2)
