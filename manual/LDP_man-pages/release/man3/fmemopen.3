.\" Copyright 2005 walter harms (walter.harms@informatik.uni-oldenburg.de),
.\" and Copyright 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Distributed under the GPL.
.\" 2008-12-04, Petr Baudis <pasky@suse.cz>: Document open_wmemstream()
.\"
.\" Japanese Version Copyright (c) 2005, 2006 Akihiro MOTOKI
.\"                     all rights reserved.
.\" Translated 2005-12-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-01-20, Akihiro MOTOKI
.\" Updated 2006-07-20, Akihiro MOTOKI
.\" Updated 2008-11-08, Akihiro MOTOKI, LDP v3.13
.\" Updated 2010-04-18, Akihiro MOTOKI, LDP v3.24
.\"
.TH FMEMOPEN 3 2010-09-15 "GNU" "Linux Programmer's Manual"
.SH 名前
fmemopen, open_memstream, open_wmemstream \-  メモリをストリームとしてオープンする
.SH 書式
.nf
.B #include <stdio.h>

.BI "FILE *fmemopen(void *"buf ", size_t "size ", const char *" mode ");"

.BI "FILE *open_memstream(char **" ptr ", size_t *" sizeloc );

.B #include <wchar.h>

.BI "FILE *open_wmemstream(wchar_t **" ptr ", size_t *" sizeloc );
.fi
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR fmemopen (),
.BR open_memstream (),
.BR open_wmemstream ():
.PD 0
.ad l
.RS 4
.TP 4
glibc 2.10 以降:
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP
glibc 2.10 より前:
_GNU_SOURCE
.RE
.ad
.PD
.SH 説明
.BR fmemopen ()
関数は、ストリームをオープンし、そのストリームに
.I mode
で指定されたアクセス許可を設定する。
そのストリームを通じて、
.I buf
で指定された文字列やメモリバッファへの読み書きができる。
このバッファは少なくとも
.I size
バイトの長さでなければならない。
.PP
引き数
.I mode
は
.BR fopen (3)
の場合と同じである。
.I mode
で追記モード (append mode) が指定された場合、ファイル位置の初期値は
バッファ中の最初の NULL バイト (\(aq\\0\(aq) の位置に設定される。
それ以外の場合は、ファイル位置の初期値はバッファの先頭になる。
glibc 2.9 以降では、文字 'b' を
.I mode
の二番目の文字として指定することができる。
この文字は「バイナリ」モードを指定するものである。
このモードでは、書き込み時に文字列終端のヌルバイトが黙って追加
されることはない。また、
.BR fseek (3)
.B SEEK_END
は、文字列の長さからの相対値ではなく、バッファの末尾
.RI ( size
で指定した値) からの相対値となる。
.PP
書き込み用にオープンされたストリームをフラッシュ
.RB ( fflush (3))
やクローズ
.RB ( fclose (3))
した時に、
(バッファに空きがあれば) NULL バイトがバッファの末尾に書き込まれる。
このようにするためには、呼び出し元は
バッファに 1バイト余裕を作る
.RI ( size
にこの 1バイトを含めた値を指定する) 必要がある。

バッファに
.I size
バイトよりたくさん書き込もうとした場合には、エラーとなる。
(デフォルトでは、このようなエラーが見えるのは
.I stdio
バッファがフラッシュされた時だけである。
.I setbuf(fp,\ NULL)
を使ってバッファリングを無効にする方法は、
出力操作を行った時点でエラーを検出するのに役立つ。
別の方法としては、
.IR "setbuffer(fp, buf, size)"
を使って、呼び出し側が明示的に
stdio ストリームバッファとして
.I buf
を指定し、バッファの指定時にバッファのサイズを
stdio に教える方法がある。)
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=1995
.\" and
.\" http://sources.redhat.com/ml/libc-alpha/2006-04/msg00064.html
.PP
読み出し用にオープンされたストリームでは、
バッファ内に NULL バイト (\(aq\\0\(aq) があっても
読み出し操作がファイル末尾 (end-of-file) を返すことはない。
バッファからの読み出しでファイル末尾が返るのは、
ファイルポインタがバッファの先頭から
.I size
バイトを越えて先に進もうとした場合だけである。
.PP
.I buf
に NULL が指定された場合、
.BR fmemopen ()
は動的に
.I size
バイトの長さのバッファを確保する。
この方法は、一時バッファにデータの書き込みを行ってから、
その内容を再度読み出すようなアプリケーションで有用である。
このバッファはストリームがクローズされるときに自動的に解放される。
呼び出し元からはこの関数が割り当てた一時バッファへのポインタ値を
知る方法は存在しない点に注意 (下記の
.BR open_memstream ()
も参照)。

.BR open_memstream ()
関数は、バッファへの書き込み用にストリームをオープンする。
バッファは
.RB ( malloc (3)
を使って) 動的に割り当てられ、必要に応じて自動的に伸長する。
ストリームをクローズした後で、呼び出し元はこのバッファを
.BR free (3)
すべきである。

このストリームが
クローズ
.RB ( fclose (3))
されたりフラッシュ
.RB ( fflush (3))
された時に、
.I ptr
と
.I sizeloc
の値はそれぞれバッファへのポインタとそのサイズに更新される。
これらの値は、呼び出し元がそのストリームに新たな書き込みを
行わない場合に限り有効である。
ストリームに書き込みを行った際には、これらの変数を参照する前に
ストリームを再度フラッシュしなければならない。

バッファ末尾の NULL バイトは保持される。
この NULL バイトは
.I sizeloc
に格納されるサイズには「含まれない」。

ストリームのファイル位置は
.BR fseek (3)
や
.BR fseeko (3)
で変更できる。
すでにデータが書き込まれた領域の末尾より先にファイル位置を動かすと、
その間の領域は 0 で埋められる。

.BR open_wmemstream ()
は
.BR open_memstream ()
と同様だが、バイトではなくワイド文字に対して操作を行う点が異なる。
.SH 返り値
成功して終了した場合には、
.BR fmemopen (),
.BR open_memstream (),
.BR open_wmemstream ()
は
.I FILE
ポインタを返す。
失敗した場合は、 NULL を返し、
.I errno
にエラーを示す値をセットする。
.SH バージョン
.BR fmemopen ()
と
.BR open_memstream ()
は glibc 1.0.x ですでに利用可能であった。
.BR open_wmemstream ()
は glibc 2.4 以降で利用可能である。
.SH 準拠
POSIX.1-2008.
これらの関数は POSIX.1-2001 では規定れていないが、
Linux 以外のシステムで広く利用可能である。
.SH 注意
これらの関数が返すファイルストリームに対応するファイル
ディスクリプタはない (つまり、返されたストリームに対して
.BR fileno (3)
を呼び出すとエラーが返ることになる)。
.SH バグ
バージョン 2.7 より前の glibc では、
.BR open_memstream ()
で作成されたストリームの末尾より先にファイル位置を動かしても、
バッファが伸長されず、
.BR fseek (3)
が失敗し \-1 が返る。
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=1996
.SH 例
このプログラムは
.BR fmemopen ()
を使って出力バッファをオープンし、
.BR open_memstream ()
を使って動的にサイズが変化する出力バッファをオープンしている。
(プログラムの第一コマンドライン引き数から取った) 入力文字列を
スキャンして整数を読み込み、これらの整数の二乗を出力バッファに書き出す。
このプログラムの実行例は以下のようになる。
.in +4n
.nf

.RB "$" " ./a.out \(aq1 23 43\(aq"
size=11; ptr=1 529 1849
.fi
.in
.SS プログラムのソース
\&
.nf
#define _GNU_SOURCE
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    FILE *out, *in;
    int v, s;
    size_t size;
    char *ptr;

    if (argc != 2) {
	fprintf(stderr, "Usage: %s <file>\\n", argv[0]);
	exit(EXIT_FAILURE);
    }

    in = fmemopen(argv[1], strlen(argv[1]), "r");
    if (in == NULL)
        handle_error("fmemopen");

    out = open_memstream(&ptr, &size);
    if (out == NULL)
        handle_error("open_memstream");

    for (;;) {
        s = fscanf(in, "%d", &v);
        if (s <= 0)
            break;

        s = fprintf(out, "%d ", v * v);
        if (s == \-1)
            handle_error("fprintf");
    }
    fclose(in);
    fclose(out);
    printf("size=%ld; ptr=%s\\n", (long) size, ptr);
    free(ptr);
    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
.BR fopen (3),
.BR fopencookie (3)
