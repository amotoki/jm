.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)exec.3	6.4 (Berkeley) 4/19/91
.\"
.\" Converted for Linux, Mon Nov 29 11:12:48 1993, faith@cs.unc.edu
.\" Updated more for Linux, Tue Jul 15 11:54:18 1997, pacman@cqc.com
.\" Modified, 24 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added note on casting NULL
.\"
.\" Japanese Version Copyright (c) 1998 Masato Taruishi
.\"         all rights reserved.
.\" Translated 1998-05-27, Masato Taruishi
.\" Modified 1998-08-08, Fujiwara Teruyoshi <fujiwara@linux.or.jp>
.\" Modified 2000-10-06, Kentaro Shirakata <argrath@ub32.org>
.\" Modified 2005-02-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2010-10-27, Akihiro Motoki <amotoki@dd.iij4u.or.jp>, LDP v3.29
.\"
.\"WORD:        null-terminated strings    NULLで終わる文字列
.\"WORD:        anti-Trojan-horse measure  トロイの木馬対策
.\"WORD:	external variable          外部変数
.\"WORD:        current  directory first   カレントディレクトリが最初
.\"WORD:        the attempted execve       呼び出そうとしたexecve
.\"WORD:        variadic function          可変長引き数関数
.\"WORD:        semantics                  (プログラムの)動作
.\"
.TH EXEC 3  2010-09-25 "GNU" "Linux Programmer's Manual"
.SH 名前
execl, execlp, execle, execv, execvp, execvpe \- ファイルを実行する
.SH 書式
.B #include <unistd.h>
.sp
.B extern char **environ;
.sp
.BI "int execl(const char *" path ", const char *" arg ", ...);"
.br
.BI "int execlp(const char *" file ", const char *" arg ", ...);"
.br
.BI "int execle(const char *" path ", const char *" arg ,
.br
.BI "           ..., char * const " envp "[]);"
.br
.BI "int execv(const char *" path ", char *const " argv "[]);"
.br
.BI "int execvp(const char *" file ", char *const " argv "[]);"
.br
.BI "int execvpe(const char *" file ", char *const " argv "[],"
.br
.BI "           char *const " envp "[]);"
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR execvpe ():
_GNU_SOURCE
.SH 説明
.BR exec ()
ファミリーの関数は現在のプロセスイメージを新しいプロセスイメージで置き
換える。このマニュアルで説明されている関数は
.BR execve (2)
のフロントエンドである。
(現在のプロセスイメージの置き換えについての詳細は
.BR execve (2)
のマニュアルを参照)
.PP
これらの関数の最初の引き数は、実行されるファイルの名前である。
.PP
関数
.BR execl (),
.BR execlp (),
.BR execle ()
の
.I "const char *arg"
とそれに続く省略部分は
.IR arg0 ,
.IR arg1 ,
\&...,
.I argn
とみなされる。
これらには、実行されるプログラムで利用可能な引き数のリストを指定する
(引き数のリストは NULL で終端された文字列へのポインタから構成される)。
慣習として、最初の引き数は、実行されるファイル名
へのポインタにする。引き数のリストは必ず NULL
で終わらなければならず、これらの関数は可変長引き数関数なので、
このポインタは
.I "(char *) NULL"
とキャストしなければならない。
.PP
関数
.BR execv (),
.BR execvp (),
.BR execvpe ()
は、利用可能な引き数リスト (NULL で終端された文字列への
ポインタの配列) を新しいプログラムに渡す。
慣習として、最初の引き数は実行されるファイル名へ
のポインタにする。ポインタの配列は必ず
NULL で終わらなければならない。
.PP
関数
.BR execle (),
.BR execvpe ()
では、呼び出し元が引き数
.I envp
経由実行されるプログラムの環境を指定することができる。
.I envp
引き数は、NULL で終端された文字列へのポインタの配列であり、
NULL ポインタで終わらなければならない。
他の関数では、呼び出し元のプロセスの外部変数
.B environ
から新しいプロセス用の環境を与える。
.SS execlp() と execvp() の特別な動作
.PP
関数
.BR execlp (),
.BR execvp (),
.BR execvpe ()
は、指定されたファイル名がスラッシュ (/) を含んでいない場合、
シェルと同じ動作で実行可能なファイルを探索する。
ファイルの検索は、環境変数
.B PATH
で指定されたコロン区切りのディレクトリのパス名のリストを対象に行われる。
この変数が定義されていない場合、パス名のリストのデフォルト値として、
カレントディレクトリの後ろに、
.I confstr(_CS_PATH)
が返すディレクトリのリストをつなげた値が使用される (この
.BR confstr (3)
の呼び出しでは通常 "/bin:/usr/bin" が返される)。

指定されたファイル名がスラッシュを含む場合、
.B PATH
は無視され、指定されたパス名のファイルが実行される。

さらに、いくつかのエラーは特別に処理される。

ファイルが実行ファイルでない場合 (このとき呼び出そうとした
.BR execve (2)
はエラー
.B EACCES
で失敗する)、これらの関数は残りの検索パスの検索を続ける。
他にファイルが見つからなくなった場合
.I errno
に
.B EACCES
を設定し復帰する。
.\" fujiwara: 個人的には「復帰する」の方が好き(^_^;

ファイルのヘッダが実行形式として認識できない場合
(このとき呼び出そうとした
.BR execve (2)
はエラー
.B ENOEXEC
で失敗する)、これらの関数はそのファイルを最初の引き数としたシェル
.RI ( /bin/sh )
を実行する (これにも失敗した場合、これ以上の検索は行われない)。
.SH 返り値
.BR exec ()
群の関数が復帰するのは、エラーが発生した場合のみである。
返り値は \-1 で、
.I errno
にエラーの内容がセットされる。
.SH エラー
これら全ての関数は失敗する場合がある。その場合、
.BR execve (2)
に対して規定されたエラーが
.I errno
に設定される。
.SH バージョン
.BR execvpe ()
関数は glibc 2.11 で初めて登場した。
.SH 準拠
POSIX.1-2001, POSIX.1-2008.

.BR execvpe ()
関数は GNU による拡張である。
.SH 注意
Linux 以外のシステムには、
(環境変数 \fBPATH\fR が定義されていないときの)
デフォルトのパスにおいて、カレント・ディレクトリが
.I /bin
と
.I /usr/bin
の後ろに配置されるものもある。
これはトロイの木馬対策のためである。
Linux では、デフォルトのパスに、昔ながらの「現在のディレクトリを
先に探索」というルールを使っている。
.PP
ファイルを実行しようとしている間にエラーが発生した時の
.BR execlp ()
と
.BR execvp ()
のふるまいについて歴史的な慣習はあるが、伝統的に文書として記載されておらず、
POSIX 標準でも規定されていない。BSD (またおそらく他のシステム) では、
.B ETXTBSY
が発生した場合、自動的に中断 (sleep) し再試行を行う。
Linux はそれをハードエラーとして取り扱い即座に復帰する。
.PP
伝統的に、関数
.BR execlp ()
と
.BR execvp ()
は、上で説明したエラーと、これら 2 つの関数自身が返す
.B ENOMEM
と
.B E2BIG
以外の全てのエラーを無視していたが、
今では、上で説明した以外のエラーが発生した場合でも、
返ってくるよう変更された。
.SH 関連項目
.BR sh (1),
.BR execve (2),
.BR fork (2),
.BR ptrace (2),
.BR fexecve (3),
.BR environ (7)
