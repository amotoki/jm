.\"-
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)symlink.7	8.3 (Berkeley) 3/31/94
.\" $FreeBSD: src/bin/ln/symlink.7,v 1.30 2005/02/13 22:25:09 ru Exp $
.\"
.\" 2008-06-11, mtk, Taken from FreeBSD 6.2 and heavily edited for
.\"     specific Linux details, improved readability, and man-pages style.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYMLINK 7 2008\-06\-18 Linux "Linux Programmer's Manual"
.SH 名前
symlink \- symbolic link handling
.SH "SYMBOLIC LINK HANDLING"
Symbolic links are files that act as pointers to other files.  To understand
their behavior, you must first understand how hard links work.

A hard link to a file is indistinguishable from the original file because it
is a reference to the object underlying the original filename.  (To be
precise: each of the hard links to a file is a reference to the same
\fIi\-node number\fP, where an i\-node number is an index into the i\-node table,
which contains metadata about all files on a file system.  See \fBstat\fP(2).)
Changes to a file are independent of the name used to reference the file.
Hard links may not refer to directories (to prevent the possibility of loops
within the file system tree, which would confuse many programs)  and may not
refer to files on different file systems (because i\-node numbers are not
unique across file systems).

A symbolic link is a special type of file whose contents are a string that
is the pathname another file, the file to which the link refers.  In other
words, a symbolic link is a pointer to another name, and not to an
underlying object.  For this reason, symbolic links may refer to directories
and may cross file system boundaries.

There is no requirement that the pathname referred to by a symbolic link
should exist.  A symbolic link that refers to a pathname that does not exist
is said to be a \fIdangling link\fP.

Because a symbolic link and its referenced object coexist in the file system
name space, confusion can arise in distinguishing between the link itself
and the referenced object.  On historical systems, commands and system calls
adopted their own link\-following conventions in a somewhat ad\-hoc fashion.
Rules for a more uniform approach, as they are implemented on Linux and
other systems, are outlined here.  It is important that site\-local
applications also conform to these rules, so that the user interface can be
as consistent as possible.
.SS "Symbolic link ownership, permissions, and timestamps"
The owner and group of an existing symbolic link can be changed using
\fBlchown\fP(2).  The only time that the ownership of a symbolic link matters
is when the link is being removed or renamed in a directory that has the
sticky bit set (see \fBstat\fP(2)).

The last access and last modification timestamps of a symbolic link can be
changed using \fButimensat\fP(2)  or \fBlutimes\fP(3).

.\" Linux does not currently implement an lchmod(2).
.\"
.\" The
.\" 4.4BSD
.\" system differs from historical
.\" 4BSD
.\" systems in that the system call
.\" .BR chown (2)
.\" has been changed to follow symbolic links.
.\" The
.\" .BR lchown (2)
.\" system call was added later when the limitations of the new
.\" .BR chown (2)
.\" became apparent.
On Linux, the permissions of a symbolic link are not used in any operations;
the permissions are always 0777 (read, write, and execute for all user
categories), and can't be changed.
.SS "Handling of symbolic links by system calls and commands"
Symbolic links are handled either by operating on the link itself, or by
operating on the object referred to by the link.  In the latter case, an
application or system call is said to \fIfollow\fP the link.  Symbolic links
may refer to other symbolic links, in which case the links are dereferenced
until an object that is not a symbolic link is found, a symbolic link that
refers to a file which does not exist is found, or a loop is detected.
(Loop detection is done by placing an upper limit on the number of links
that may be followed, and an error results if this limit is exceeded.)

There are three separate areas that need to be discussed.  They are as
follows:
.IP 1. 3
Symbolic links used as filename arguments for system calls.
.IP 2.
Symbolic links specified as command\-line arguments to utilities that are not
traversing a file tree.
.IP 3.
Symbolic links encountered by utilities that are traversing a file tree
(either specified on the command line or encountered as part of the file
hierarchy walk).
.SS "System calls"
The first area is symbolic links used as filename arguments for system
calls.

Except as noted below, all system calls follow symbolic links.  For example,
if there were a symbolic link \fIslink\fP which pointed to a file named
\fIafile\fP, the system call \fIopen("slink" ...\&)\fP would return a file
descriptor referring to the file \fIafile\fP.

.\" Maybe one day: .BR fchownat (2)
Various system calls do not follow links, and operate on the symbolic link
itself.  They are: \fBlchown\fP(2), \fBlgetxattr\fP(2), \fBllistxattr\fP(2),
\fBlremovexattr\fP(2), \fBlsetxattr\fP(2), \fBlstat\fP(2), \fBreadlink\fP(2),
\fBrename\fP(2), \fBrmdir\fP(2), and \fBunlink\fP(2).  Certain other system calls
optionally follow symbolic links.  They are: \fBfaccessat\fP(2),
\fBfchownat\fP(2), \fBfstatat\fP(2), \fBlinkat\fP(2), \fBopen\fP(2), \fBopenat\fP(2), and
\fButimensat\fP(2); see their manual pages for details.  Because \fBremove\fP(3)
is an alias for \fBunlink\fP(2), that library function also does not follow
symbolic links.  When \fBrmdir\fP(2)  is applied to a symbolic link, it fails
with the error \fBENOTDIR\fP.  The \fBlink\fP(2)  warrants special discussion.
POSIX.1\-2001 specifies that \fBlink\fP(2)  should dereference \fIoldpath\fP if it
is a symbolic link.  However, Linux does not do this.  (By default Solaris
is the same, but the POSIX.1\-2001 specified behavior can be obtained with
suitable compiler options.)  The upcoming POSIX.1 revision changes the
specification to allow either behavior in an implementation.
.SS "Commands not traversing a file tree"
The second area is symbolic links, specified as command\-line filename
arguments, to commands which are not traversing a file tree.

Except as noted below, commands follow symbolic links named as command\-line
arguments.  For example, if there were a symbolic link \fIslink\fP which
pointed to a file named \fIafile\fP, the command \fIcat slink\fP would display the
contents of the file \fIafile\fP.

It is important to realize that this rule includes commands which may
optionally traverse file trees, e.g., the command \fIchown file\fP is included
in this rule, while the command \fIchown\ \-R file\fP, which performs a tree
traversal, is not.  (The latter is described in the third area, below.)

If it is explicitly intended that the command operate on the symbolic link
instead of following the symbolic link, e.g., it is desired that \fIchown
slink\fP change the ownership of the file that \fIslink\fP is, whether it is a
symbolic link or not, the \fI\-h\fP option should be used.  In the above
example, \fIchown root slink\fP would change the ownership of the file referred
to by \fIslink\fP, while \fIchown\ \-h root slink\fP would change the ownership of
\fIslink\fP itself.

There are some exceptions to this rule:
.IP * 2
The \fBmv\fP(1)  and \fBrm\fP(1)  commands do not follow symbolic links named as
arguments, but respectively attempt to rename and delete them.  (Note, if
the symbolic link references a file via a relative path, moving it to
another directory may very well cause it to stop working, since the path may
no longer be correct.)
.IP *
The \fBls\fP(1)  command is also an exception to this rule.  For compatibility
with historic systems (when \fBls\fP(1)  is not doing a tree walk, i.e., the
\fI\-R\fP option is not specified), the \fBls\fP(1)  command follows symbolic links
named as arguments if the \fI\-H\fP or \fI\-L\fP option is specified, or if the
\fI\-F\fP, \fI\-d\fP, or \fI\-l\fP options are not specified.  (The \fBls\fP(1)  command is
the only command where the \fI\-H\fP and \fI\-L\fP options affect its behavior even
though it is not doing a walk of a file tree.)
.IP *
.\"
.\"The 4.4BSD system differs from historical 4BSD systems in that the
.\".BR chown (1)
.\"and
.\".BR chgrp (1)
.\"commands follow symbolic links specified on the command line.
The \fBfile\fP(1)  command is also an exception to this rule.  The \fBfile\fP(1)
command does not follow symbolic links named as argument by default.  The
\fBfile\fP(1)  command does follow symbolic links named as argument if the
\fI\-L\fP option is specified.
.SS "Commands traversing a file tree"
The following commands either optionally or always traverse file trees:
\fBchgrp\fP(1), \fBchmod\fP(1), \fBchown\fP(1), \fBcp\fP(1), \fBdu\fP(1), \fBfind\fP(1),
\fBls\fP(1), \fBpax\fP(1), \fBrm\fP(1), and \fBtar\fP(1).

It is important to realize that the following rules apply equally to
symbolic links encountered during the file tree traversal and symbolic links
listed as command\-line arguments.

The \fIfirst rule\fP applies to symbolic links that reference files other than
directories.  Operations that apply to symbolic links are performed on the
links themselves, but otherwise the links are ignored.

The command \fIrm\ \-r slink directory\fP will remove \fIslink\fP, as well as any
symbolic links encountered in the tree traversal of \fIdirectory\fP, because
symbolic links may be removed.  In no case will \fBrm\fP(1)  affect the file
referred to by \fIslink\fP.

The \fIsecond rule\fP applies to symbolic links that refer to directories.
Symbolic links that refer to directories are never followed by default.
This is often referred to as a "physical" walk, as opposed to a "logical"
walk (where symbolic links the refer to directories are followed).

Certain conventions are (should be) followed as consistently as possible by
commands that perform file tree walks:
.IP * 2
A command can be made to follow any symbolic links named on the command
line, regardless of the type of file they reference, by specifying the \fI\-H\fP
(for "half\-logical") flag.  This flag is intended to make the command\-line
name space look like the logical name space.  (Note, for commands that do
not always do file tree traversals, the \fI\-H\fP flag will be ignored if the
\fI\-R\fP flag is not also specified.)

For example, the command \fIchown\ \-HR user slink\fP will traverse the file
hierarchy rooted in the file pointed to by \fIslink\fP.  Note, the \fI\-H\fP is not
the same as the previously discussed \fI\-h\fP flag.  The \fI\-H\fP flag causes
symbolic links specified on the command line to be dereferenced for the
purposes of both the action to be performed and the tree walk, and it is as
if the user had specified the name of the file to which the symbolic link
pointed.
.IP *
A command can be made to follow any symbolic links named on the command
line, as well as any symbolic links encountered during the traversal,
regardless of the type of file they reference, by specifying the \fI\-L\fP (for
"logical") flag.  This flag is intended to make the entire name space look
like the logical name space.  (Note, for commands that do not always do file
tree traversals, the \fI\-L\fP flag will be ignored if the \fI\-R\fP flag is not
also specified.)

For example, the command \fIchown\ \-LR user slink\fP will change the owner of
the file referred to by \fIslink\fP.  If \fIslink\fP refers to a directory,
\fBchown\fP will traverse the file hierarchy rooted in the directory that it
references.  In addition, if any symbolic links are encountered in any file
tree that \fBchown\fP traverses, they will be treated in the same fashion as
\fIslink\fP.
.IP *
A command can be made to provide the default behavior by specifying the
\fI\-P\fP (for "physical") flag.  This flag is intended to make the entire name
space look like the physical name space.
.PP
For commands that do not by default do file tree traversals, the \fI\-H\fP,
\fI\-L\fP, and \fI\-P\fP flags are ignored if the \fI\-R\fP flag is not also specified.
In addition, you may specify the \fI\-H\fP, \fI\-L\fP, and \fI\-P\fP options more than
once; the last one specified determines the command's behavior.  This is
intended to permit you to alias commands to behave one way or the other, and
then override that behavior on the command line.

The \fBls\fP(1)  and \fBrm\fP(1)  commands have exceptions to these rules:
.IP * 2
The \fBrm\fP(1)  command operates on the symbolic link, and not the file it
references, and therefore never follows a symbolic link.  The \fBrm\fP(1)
command does not support the \fI\-H\fP, \fI\-L\fP, or \fI\-P\fP options.
.IP *
To maintain compatibility with historic systems, the \fBls\fP(1)  command acts
a little differently.  If you do not specify the \fI\-F\fP, \fI\-d\fP or \fI\-l\fP
options, \fBls\fP(1)  will follow symbolic links specified on the command
line.  If the \fI\-L\fP flag is specified, \fBls\fP(1)  follows all symbolic links,
regardless of their type, whether specified on the command line or
encountered in the tree walk.
.SH 関連項目
\fBchgrp\fP(1), \fBchmod\fP(1), \fBfind\fP(1), \fBln\fP(1), \fBls\fP(1), \fBmv\fP(1),
\fBrm\fP(1), \fBlchown\fP(2), \fBlink\fP(2), \fBlstat\fP(2), \fBreadlink\fP(2),
\fBrename\fP(2), \fBsymlink\fP(2), \fBunlink\fP(2), \fButimensat\fP(2), \fBlutimes\fP(3),
\fBpath_resolution\fP(7)
