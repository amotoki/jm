# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-04-17 13:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: build/C/man7/inotify.7:26
#, no-wrap
msgid "INOTIFY"
msgstr ""

#. type: TH
#: build/C/man7/inotify.7:26
#, no-wrap
msgid "2014-04-01"
msgstr ""

#. type: TH
#: build/C/man7/inotify.7:26 build/C/man2/inotify_add_watch.2:28 build/C/man2/inotify_init.2:29 build/C/man2/inotify_rm_watch.2:27
#, no-wrap
msgid "Linux"
msgstr ""

#. type: TH
#: build/C/man7/inotify.7:26 build/C/man2/inotify_add_watch.2:28 build/C/man2/inotify_init.2:29 build/C/man2/inotify_rm_watch.2:27
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:27 build/C/man2/inotify_add_watch.2:29 build/C/man2/inotify_init.2:30 build/C/man2/inotify_rm_watch.2:28
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:29
msgid "inotify - monitoring filesystem events"
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:29 build/C/man2/inotify_add_watch.2:35 build/C/man2/inotify_init.2:39 build/C/man2/inotify_rm_watch.2:36
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:37
msgid ""
"The I<inotify> API provides a mechanism for monitoring filesystem events.  "
"Inotify can be used to monitor individual files, or to monitor directories.  "
"When a directory is monitored, inotify will return events for the directory "
"itself, and for files inside the directory."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:39
msgid "The following system calls are used with this API:"
msgstr ""

#. type: IP
#: build/C/man7/inotify.7:39 build/C/man7/inotify.7:50 build/C/man7/inotify.7:63 build/C/man7/inotify.7:69 build/C/man7/inotify.7:72
#, no-wrap
msgid "*"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:50
msgid ""
"B<inotify_init>(2)  creates an inotify instance and returns a file "
"descriptor referring to the inotify instance.  The more recent "
"B<inotify_init1>(2)  is like B<inotify_init>(2), but has a I<flags> argument "
"that provides access to some extra functionality."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:63
msgid ""
"B<inotify_add_watch>(2)  manipulates the \"watch list\" associated with an "
"inotify instance.  Each item (\"watch\") in the watch list specifies the "
"pathname of a file or directory, along with some set of events that the "
"kernel should monitor for the file referred to by that pathname.  "
"B<inotify_add_watch>(2)  either creates a new watch item, or modifies an "
"existing watch.  Each watch has a unique \"watch descriptor\", an integer "
"returned by B<inotify_add_watch>(2)  when the watch is created."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:69
msgid ""
"When events occur for monitored files and directories, those events are made "
"available to the application as structured data that can be read from the "
"inotify file descriptor using B<read>(2)  (see below)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:72
msgid "B<inotify_rm_watch>(2)  removes an item from an inotify watch list."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:79
msgid ""
"When all file descriptors referring to an inotify instance have been closed "
"(using B<close>(2)), the underlying object and its resources are freed for "
"reuse by the kernel; all associated watches are automatically freed."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:88
msgid ""
"With careful programming, an application can use inotify to efficiently "
"monitor and cache the state of a set of filesystem objects.  However, robust "
"applications should allow for the fact that bugs in the monitoring logic or "
"races of the kind described below may leave the cache inconsistent with the "
"filesystem state.  It is probably wise to to do some consistency checking, "
"and rebuild the cache when inconsistencies are detected."
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:88
#, no-wrap
msgid "Reading events from an inotify file descriptor"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:101
msgid ""
"To determine what events have occurred, an application B<read>(2)s from the "
"inotify file descriptor.  If no events have so far occurred, then, assuming "
"a blocking file descriptor, B<read>(2)  will block until at least one event "
"occurs (unless interrupted by a signal, in which case the call fails with "
"the error B<EINTR>; see B<signal>(7))."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:105
msgid ""
"Each successful B<read>(2)  returns a buffer containing one or more of the "
"following structures:"
msgstr ""

#.  FIXME . The type of the 'wd' field should probably be "int32_t".
#.  I submitted a patch to fix this.  See the LKML thread
#.  "[patch] Fix type errors in inotify interfaces", 18 Nov 2008
#.  Glibc bug filed: http://sources.redhat.com/bugzilla/show_bug.cgi?id=7040
#. type: Plain text
#: build/C/man7/inotify.7:120
#, no-wrap
msgid ""
"struct inotify_event {\n"
"    int      wd;       /* Watch descriptor */\n"
"    uint32_t mask;     /* Mask of events */\n"
"    uint32_t cookie;   /* Unique cookie associating related\n"
"                          events (for rename(2)) */\n"
"    uint32_t len;      /* Size of I<name> field */\n"
"    char     name[];   /* Optional null-terminated name */\n"
"};\n"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:127
msgid ""
"I<wd> identifies the watch for which this event occurs.  It is one of the "
"watch descriptors returned by a previous call to B<inotify_add_watch>(2)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:130
msgid "I<mask> contains bits that describe the event that occurred (see below)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:142
msgid ""
"I<cookie> is a unique integer that connects related events.  Currently this "
"is used only for rename events, and allows the resulting pair of "
"B<IN_MOVED_FROM> and B<IN_MOVED_TO> events to be connected by the "
"application.  For all other event types, I<cookie> is set to 0."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:151
msgid ""
"The I<name> field is present only when an event is returned for a file "
"inside a watched directory; it identifies the file pathname relative to the "
"watched directory.  This pathname is null-terminated, and may include "
"further null bytes (\\(aq\\e0\\(aq) to align subsequent reads to a suitable "
"address boundary."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:161
msgid ""
"The I<len> field counts all of the bytes in I<name>, including the null "
"bytes; the length of each I<inotify_event> structure is thus I<sizeof(struct "
"inotify_event)+len>."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:172
msgid ""
"The behavior when the buffer given to B<read>(2)  is too small to return "
"information about the next event depends on the kernel version: in kernels "
"before 2.6.21, B<read>(2)  returns 0; since kernel 2.6.21, B<read>(2)  fails "
"with the error B<EINVAL>.  Specifying a buffer of size"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:174
#, no-wrap
msgid "    sizeof(struct inotify_event) + NAME_MAX + 1\n"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:176
msgid "will be sufficient to read at least one event."
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:176
#, no-wrap
msgid "inotify events"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:196
msgid ""
"The B<inotify_add_watch>(2)  I<mask> argument and the I<mask> field of the "
"I<inotify_event> structure returned when B<read>(2)ing an inotify file "
"descriptor are both bit masks identifying inotify events.  The following "
"bits can be specified in I<mask> when calling B<inotify_add_watch>(2)  and "
"may be returned in the I<mask> field returned by B<read>(2):"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:197
#, no-wrap
msgid "B<IN_ACCESS> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:202
msgid "File was accessed (e.g., B<read>(2), B<execve>(2))."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:202
#, no-wrap
msgid "B<IN_ATTRIB> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:217
msgid ""
"Metadata changed\\(emfor example, permissions (e.g., B<chmod>(2)), "
"timestamps (e.g., B<utimensat>(2)), extended attributes (B<setxattr>(2)), "
"link count (since Linux 2.6.25; e.g., for the target of B<link>(2)  and for "
"B<unlink>(2)), and user/group ID (e.g., B<chown>(2))."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:217
#, no-wrap
msgid "B<IN_CLOSE_WRITE> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:220
msgid "File opened for writing was closed."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:220
#, no-wrap
msgid "B<IN_CLOSE_NOWRITE> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:223
msgid "File not opened for writing was closed."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:223
#, no-wrap
msgid "B<IN_CREATE> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:233
msgid ""
"File/directory created in watched directory (e.g., B<open>(2)  B<O_CREAT>, "
"B<mkdir>(2), B<link>(2), B<symlink>(2), B<bind>(2)  on a UNIX domain "
"socket)."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:233
#, no-wrap
msgid "B<IN_DELETE> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:236
msgid "File/directory deleted from watched directory."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:236
#, no-wrap
msgid "B<IN_DELETE_SELF>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:247
msgid ""
"Watched file/directory was itself deleted.  (This event also occurs if an "
"object is moved to another filesystem, since B<mv>(1)  in effect copies the "
"file to the other filesystem and then deletes it from the original "
"filesystem.)  In addition, an B<IN_IGNORED> event will subsequently be "
"generated for the watch descriptor."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:247
#, no-wrap
msgid "B<IN_MODIFY> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:252
msgid "File was modified (e.g., B<write>(2), B<truncate>(2))."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:252
#, no-wrap
msgid "B<IN_MOVE_SELF>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:255
msgid "Watched file/directory was itself moved."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:255
#, no-wrap
msgid "B<IN_MOVED_FROM> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:259
msgid ""
"Generated for the directory containing the old filename when a file is "
"renamed."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:259
#, no-wrap
msgid "B<IN_MOVED_TO> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:263
msgid ""
"Generated for the directory containing the new filename when a file is "
"renamed."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:263
#, no-wrap
msgid "B<IN_OPEN> (*)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:266
msgid "File was opened."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:275
msgid ""
"When monitoring a directory, the events marked with an asterisk (*) above "
"can occur for files in the directory, in which case the I<name> field in the "
"returned I<inotify_event> structure identifies the name of the file within "
"the directory."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:283
msgid ""
"The B<IN_ALL_EVENTS> macro is defined as a bit mask of all of the above "
"events.  This macro can be used as the I<mask> argument when calling "
"B<inotify_add_watch>(2)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:285
msgid "Two additional convenience macros are defined:"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:286
#, no-wrap
msgid "B<IN_MOVE>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:290
msgid "Equates to B<IN_MOVED_FROM | IN_MOVED_TO>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:290
#, no-wrap
msgid "B<IN_CLOSE>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:294
msgid "Equates to B<IN_CLOSE_WRITE | IN_CLOSE_NOWRITE>."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:300
msgid ""
"The following further bits can be specified in I<mask> when calling "
"B<inotify_add_watch>(2):"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:301
#, no-wrap
msgid "B<IN_DONT_FOLLOW> (since Linux 2.6.15)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:306
msgid "Don't dereference I<pathname> if it is a symbolic link."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:306
#, no-wrap
msgid "B<IN_EXCL_UNLINK> (since Linux 2.6.36)"
msgstr ""

#.  commit 8c1934c8d70b22ca8333b216aec6c7d09fdbd6a6
#. type: Plain text
#: build/C/man7/inotify.7:322
msgid ""
"By default, when watching events on the children of a directory, events are "
"generated for children even after they have been unlinked from the "
"directory.  This can result in large numbers of uninteresting events for "
"some applications (e.g., if watching I</tmp>, in which many applications "
"create temporary files whose names are immediately unlinked).  Specifying "
"B<IN_EXCL_UNLINK> changes the default behavior, so that events are not "
"generated for children after they have been unlinked from the watched "
"directory."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:322
#, no-wrap
msgid "B<IN_MASK_ADD>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:326
msgid ""
"Add (OR) events to watch mask for this pathname if it already exists "
"(instead of replacing mask)."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:326
#, no-wrap
msgid "B<IN_ONESHOT>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:332
msgid "Monitor I<pathname> for one event, then remove from watch list."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:332
#, no-wrap
msgid "B<IN_ONLYDIR> (since Linux 2.6.15)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:337
msgid "Only watch I<pathname> if it is a directory."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:343
msgid "The following bits may be set in the I<mask> field returned by B<read>(2):"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:344
#, no-wrap
msgid "B<IN_IGNORED>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:350
msgid ""
"Watch was removed explicitly (B<inotify_rm_watch>(2))  or automatically "
"(file was deleted, or filesystem was unmounted).  See also BUGS."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:350
#, no-wrap
msgid "B<IN_ISDIR>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:353
msgid "Subject of this event is a directory."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:353
#, no-wrap
msgid "B<IN_Q_OVERFLOW>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:358
msgid "Event queue overflowed (I<wd> is -1 for this event)."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:358
#, no-wrap
msgid "B<IN_UNMOUNT>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:364
msgid ""
"Filesystem containing watched object was unmounted.  In addition, an "
"B<IN_IGNORED> event will subsequently be generated for the watch descriptor."
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:365
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:373
msgid ""
"Suppose an application is watching the directory I<dir> and the file "
"I<dir/myfile> for all events.  The examples below show some events that will "
"be generated for these two objects."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:374
#, no-wrap
msgid "fd = open(\"dir/myfile\", O_RDWR);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:382
msgid "Generates B<IN_OPEN> events for both I<dir> and I<dir/myfile>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:382
#, no-wrap
msgid "read(fd, buf, count);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:390
msgid "Generates B<IN_ACCESS> events for both I<dir> and I<dir/myfile>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:390
#, no-wrap
msgid "write(fd, buf, count);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:398
msgid "Generates B<IN_MODIFY> events for both I<dir> and I<dir/myfile>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:398
#, no-wrap
msgid "fchmod(fd, mode);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:406
msgid "Generates B<IN_ATTRIB> events for both I<dir> and I<dir/myfile>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:406
#, no-wrap
msgid "close(fd);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:414
msgid "Generates B<IN_CLOSE_WRITE> events for both I<dir> and I<dir/myfile>."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:423
msgid ""
"Suppose an application is watching the directories I<dir1> and I<dir>, and "
"the file I<dir1/myfile>.  The following examples show some events that may "
"be generated."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:424
#, no-wrap
msgid "link(\"dir/myfile\", \"dir2/new\");"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:434
msgid ""
"Generates an B<IN_ATTRIB> event for I<myfile> and an B<IN_CREATE> event for "
"I<dir2>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:434
#, no-wrap
msgid "rename(\"dir1/myfile\", \"dir2/myfile\");"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:455
msgid ""
"Generates an B<IN_MOVED_FROM> event for I<dir1>, an B<IN_MOVED_TO> event for "
"I<dir2>, and an B<IN_MOVE_SELF> event for I<myfile>.  The B<IN_MOVED_FROM> "
"and B<IN_MOVED_TO> events will have the same I<cookie> value."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:469
msgid ""
"Suppose that I<dir1/xx> and I<dir2/yy> are (the only) links to the same "
"file, and an application is watching I<dir1>, I<dir2>, I<dir1/xx>, and "
"I<dir2/yy>.  Executing the following calls in the order given below will "
"generate the following events:"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:470
#, no-wrap
msgid "unlink(\"dir2/yy\");"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:481
msgid ""
"Generates B<IN_ATTRIB> event for I<xx> (because its link count changes)  and "
"an B<IN_DELETE> event for I<dir2>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:481
#, no-wrap
msgid "unlink(\"dir1/xx\");"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:494
msgid ""
"Generates B<IN_ATTRIB>, B<IN_DELETE_SELF>, and B<IN_IGNORED> events for "
"I<xx>, and an B<IN_DELETE> for I<dir1>."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:501
msgid ""
"Suppose an application is watching the directory I<dir> and (the empty) "
"directory I<dir/subdir>.  The following examples show some events that may "
"be generated."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:502
#, no-wrap
msgid "mkdir(\"dir/new\", mode);"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:508
msgid "Generates an B<IN_CREATE | IN_ISDIR> event for I<dir>."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:508
#, no-wrap
msgid "rmdir(\"dir/sub\");"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:520
msgid ""
"Generates B<IN_DELETE_SELF> and B<IN_IGNORED> events for I<subdir>, and an "
"B<IN_DELETE | IN_ISDIR> event for I<dir>."
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:521
#, no-wrap
msgid "/proc interfaces"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:524
msgid ""
"The following interfaces can be used to limit the amount of kernel memory "
"consumed by inotify:"
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:524
#, no-wrap
msgid "I</proc/sys/fs/inotify/max_queued_events>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:533
msgid ""
"The value in this file is used when an application calls B<inotify_init>(2)  "
"to set an upper limit on the number of events that can be queued to the "
"corresponding inotify instance.  Events in excess of this limit are dropped, "
"but an B<IN_Q_OVERFLOW> event is always generated."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:533
#, no-wrap
msgid "I</proc/sys/fs/inotify/max_user_instances>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:537
msgid ""
"This specifies an upper limit on the number of inotify instances that can be "
"created per real user ID."
msgstr ""

#. type: TP
#: build/C/man7/inotify.7:537
#, no-wrap
msgid "I</proc/sys/fs/inotify/max_user_watches>"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:541
msgid ""
"This specifies an upper limit on the number of watches that can be created "
"per real user ID."
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:541 build/C/man2/inotify_add_watch.2:118 build/C/man2/inotify_init.2:94 build/C/man2/inotify_rm_watch.2:67
#, no-wrap
msgid "VERSIONS"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:549
msgid ""
"Inotify was merged into the 2.6.13 Linux kernel.  The required library "
"interfaces were added to glibc in version 2.4.  (B<IN_DONT_FOLLOW>, "
"B<IN_MASK_ADD>, and B<IN_ONLYDIR> were added in glibc version 2.5.)"
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:549 build/C/man2/inotify_add_watch.2:120 build/C/man2/inotify_init.2:101 build/C/man2/inotify_rm_watch.2:69
#, no-wrap
msgid "CONFORMING TO"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:551
msgid "The inotify API is Linux-specific."
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:551
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:558
msgid ""
"Inotify file descriptors can be monitored using B<select>(2), B<poll>(2), "
"and B<epoll>(7).  When an event is available, the file descriptor indicates "
"as readable."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:587
msgid ""
"Since Linux 2.6.25, signal-driven I/O notification is available for inotify "
"file descriptors; see the discussion of B<F_SETFL> (for setting the "
"B<O_ASYNC> flag), B<F_SETOWN>, and B<F_SETSIG> in B<fcntl>(2).  The "
"I<siginfo_t> structure (described in B<sigaction>(2))  that is passed to the "
"signal handler has the following fields set: I<si_fd> is set to the inotify "
"file descriptor number; I<si_signo> is set to the signal number; I<si_code> "
"is set to B<POLL_IN>; and B<POLLIN> is set in I<si_band>."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:600
msgid ""
"If successive output inotify events produced on the inotify file descriptor "
"are identical (same I<wd>, I<mask>, I<cookie>, and I<name>), then they are "
"coalesced into a single event if the older event has not yet been read (but "
"see BUGS).  This reduces the amount of kernel memory required for the event "
"queue, but also means that an application can't use inotify to reliably "
"count file events."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:606
msgid ""
"The events returned by reading from an inotify file descriptor form an "
"ordered queue.  Thus, for example, it is guaranteed that when renaming from "
"one directory to another, events will be produced in the correct order on "
"the inotify file descriptor."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:612
msgid ""
"The B<FIONREAD> B<ioctl>(2)  returns the number of bytes available to read "
"from an inotify file descriptor."
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:612
#, no-wrap
msgid "Limitations and caveats"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:619
msgid ""
"The inotify API provides no information about the user or process that "
"triggered the inotify event.  In particular, there is no easy way for a "
"process that is monitoring events via inotify to distinguish events that it "
"triggers itself from those that are triggered by other processes."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:632
msgid ""
"Inotify reports only events that a user-space program triggers through the "
"filesystem API.  As a result, it does not catch remote events that occur on "
"network filesystems.  (Applications must fall back to polling the filesystem "
"to catch such events.)  Furthermore, various pseudo-filesystems such as "
"I</proc>, I</sys>, and I</dev/pts> are not monitorable with inotify."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:638
msgid ""
"The inotify API does not report file accesses and modifications that may "
"occur because of B<mmap>(2)  and B<msync>(2)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:642
msgid ""
"The inotify API identifies affected files by filename.  However, by the time "
"an application processes an inotify event, the filename may already have "
"been deleted or renamed."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:647
msgid ""
"The inotify API identifies events via watch descriptors.  It is the "
"application's responsibility to cache a mapping (if one is needed) between "
"watch descriptors and pathnames.  Be aware that directory renamings may "
"affect multiple cached pathnames."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:652
msgid ""
"Inotify monitoring of directories is not recursive: to monitor "
"subdirectories under a directory, additional watches must be created.  This "
"can take a significant amount time for large directory trees."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:661
msgid ""
"If monitoring an entire directory subtree, and a new subdirectory is created "
"in that tree or an existing directory is renamed into that tree, be aware "
"that by the time you create a watch for the new subdirectory, new files (and "
"subdirectories) may already exist inside the subdirectory.  Therefore, you "
"may want to scan the contents of the subdirectory immediately after adding "
"the watch (and, if desired, recursively add watches for any subdirectories "
"that it contains)."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:673
msgid ""
"Note that the event queue can overflow.  In this case, events are lost.  "
"Robust applications should handle the possibility of lost events "
"gracefully.  For example, it may be necessary to rebuild part or all of the "
"application cache.  (One simple, but possibly expensive, approach is to "
"close the inotify file descriptor, empty the cache, create a new inotify "
"file descriptor, and then re-create watches and cache entries for the "
"objects to be monitored.)"
msgstr ""

#. type: SS
#: build/C/man7/inotify.7:673
#, no-wrap
msgid "Dealing with rename() events"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:682
msgid ""
"As noted above, the B<IN_MOVED_FROM> and B<IN_MOVED_TO> event pair that is "
"generated by B<rename>(2)  can be matched up via their shared cookie value.  "
"However, the task of matching has some challenges."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:693
msgid ""
"These two events are usually consecutive in the event stream available when "
"reading from the inotify file descriptor.  However, this is not guaranteed.  "
"If multiple processes are triggering events for monitored objects, then (on "
"rare occasions) an arbitrary number of other events may appear between the "
"B<IN_MOVED_FROM> and B<IN_MOVED_TO> events."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:718
msgid ""
"Matching up the B<IN_MOVED_FROM> and B<IN_MOVED_TO> event pair generated by "
"B<rename>(2)  is thus inherently racy.  (Don't forget that if an object is "
"renamed outside of a monitored directory, there may not even be an "
"B<IN_MOVED_TO> event.)  Heuristic approaches (e.g., assume the events are "
"always consecutive)  can be used to ensure a match in most cases, but will "
"inevitably miss some cases, causing the application to perceive the "
"B<IN_MOVED_FROM> and B<IN_MOVED_TO> events as being unrelated.  If watch "
"descriptors are destroyed and re-created as a result, then those watch "
"descriptors will be inconsistent with the watch descriptors in any pending "
"events.  (Re-creating the inotify file descriptor and rebuilding the cache "
"may be useful to deal with this scenario.)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:728
msgid ""
"Applications should also allow for the possibility that the B<IN_MOVED_FROM> "
"event was the last event that could fit in the buffer returned by the "
"current call to B<read>(2), and the accompanying B<IN_MOVED_TO> event might "
"be fetched only on the next B<read>(2)."
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:728
#, no-wrap
msgid "BUGS"
msgstr ""

#.  FIXME kernel commit 611da04f7a31b2208e838be55a42c7a1310ae321
#.  implies that unmount events were buggy 2.6.11 to 2.6.36
#. type: Plain text
#: build/C/man7/inotify.7:736
msgid "In kernels before 2.6.16, the B<IN_ONESHOT> I<mask> flag does not work."
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:746
msgid ""
"As originally designed and implemented, the B<IN_ONESHOT> flag did not cause "
"an B<IN_IGNORED> event to be generated when the watch was dropped after one "
"event.  However, as an unintended effect of other changes, since Linux "
"2.6.36, an B<IN_IGNORED> event is generated in this case."
msgstr ""

#.  commit 1c17d18e3775485bf1e0ce79575eb637a94494a2
#. type: Plain text
#: build/C/man7/inotify.7:755
msgid ""
"Before kernel 2.6.25, the kernel code that was intended to coalesce "
"successive identical events (i.e., the two most recent events could "
"potentially be coalesced if the older had not yet been read)  instead "
"checked if the most recent event could be coalesced with the I<oldest> "
"unread event."
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:755 build/C/man2/inotify_add_watch.2:122 build/C/man2/inotify_init.2:103 build/C/man2/inotify_rm_watch.2:71
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:764
msgid ""
"B<inotifywait>(1), B<inotifywatch>(1), B<inotify_add_watch>(2), "
"B<inotify_init>(2), B<inotify_init1>(2), B<inotify_rm_watch>(2), B<read>(2), "
"B<stat>(2)"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:767
msgid "I<Documentation/filesystems/inotify.txt> in the Linux kernel source tree"
msgstr ""

#. type: SH
#: build/C/man7/inotify.7:767 build/C/man2/inotify_add_watch.2:126 build/C/man2/inotify_init.2:107 build/C/man2/inotify_rm_watch.2:75
#, no-wrap
msgid "COLOPHON"
msgstr ""

#. type: Plain text
#: build/C/man7/inotify.7:774 build/C/man2/inotify_add_watch.2:133 build/C/man2/inotify_init.2:114 build/C/man2/inotify_rm_watch.2:82
msgid ""
"This page is part of release 3.64 of the Linux I<man-pages> project.  A "
"description of the project, and information about reporting bugs, can be "
"found at \\%http://www.kernel.org/doc/man-pages/."
msgstr ""

#. type: TH
#: build/C/man2/inotify_add_watch.2:28
#, no-wrap
msgid "INOTIFY_ADD_WATCH"
msgstr ""

#. type: TH
#: build/C/man2/inotify_add_watch.2:28 build/C/man2/inotify_init.2:29
#, no-wrap
msgid "2014-03-28"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:31
msgid "inotify_add_watch - add a watch to an initialized inotify instance"
msgstr ""

#. type: SH
#: build/C/man2/inotify_add_watch.2:31 build/C/man2/inotify_init.2:32 build/C/man2/inotify_rm_watch.2:30
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:33 build/C/man2/inotify_rm_watch.2:32
msgid "B<#include E<lt>sys/inotify.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:35
msgid ""
"B<int inotify_add_watch(int >I<fd>B<, const char *>I<pathname>B<, uint32_t "
">I<mask>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:54
msgid ""
"B<inotify_add_watch>()  adds a new watch, or modifies an existing watch, for "
"the file whose location is specified in I<pathname>; the caller must have "
"read permission for this file.  The I<fd> argument is a file descriptor "
"referring to the inotify instance whose watch list is to be modified.  The "
"events to be monitored for I<pathname> are specified in the I<mask> bit-mask "
"argument.  See B<inotify>(7)  for a description of the bits that can be set "
"in I<mask>."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:68
msgid ""
"A successful call to B<inotify_add_watch>()  returns the unique watch "
"descriptor associated with I<pathname> for this inotify instance.  If "
"I<pathname> was not previously being watched by this inotify instance, then "
"the watch descriptor is newly allocated.  If I<pathname> was already being "
"watched, then the descriptor for the existing watch is returned."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:79
msgid ""
"The watch descriptor is returned by later B<read>(2)s from the inotify file "
"descriptor.  These reads fetch I<inotify_event> structures (see "
"B<inotify>(7))  indicating filesystem events; the watch descriptor inside "
"this structure identifies the object for which the event occurred."
msgstr ""

#. type: SH
#: build/C/man2/inotify_add_watch.2:79 build/C/man2/inotify_init.2:74 build/C/man2/inotify_rm_watch.2:48
#, no-wrap
msgid "RETURN VALUE"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:86
msgid ""
"On success, B<inotify_add_watch>()  returns a nonnegative watch descriptor.  "
"On error, -1 is returned and I<errno> is set appropriately."
msgstr ""

#. type: SH
#: build/C/man2/inotify_add_watch.2:86 build/C/man2/inotify_init.2:79 build/C/man2/inotify_rm_watch.2:55
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:87
#, no-wrap
msgid "B<EACCES>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:90
msgid "Read access to the given file is not permitted."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:90 build/C/man2/inotify_rm_watch.2:56
#, no-wrap
msgid "B<EBADF>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:93
msgid "The given file descriptor is not valid."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:93
#, no-wrap
msgid "B<EFAULT>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:97
msgid "I<pathname> points outside of the process's accessible address space."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:97 build/C/man2/inotify_init.2:80 build/C/man2/inotify_rm_watch.2:60
#, no-wrap
msgid "B<EINVAL>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:102
msgid ""
"The given event mask contains no valid events; or I<fd> is not an inotify "
"file descriptor."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:102
#, no-wrap
msgid "B<ENAMETOOLONG>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:106
msgid "I<pathname> is too long."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:106
#, no-wrap
msgid "B<ENOENT>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:111
msgid ""
"A directory component in I<pathname> does not exist or is a dangling "
"symbolic link."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:111 build/C/man2/inotify_init.2:91
#, no-wrap
msgid "B<ENOMEM>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:114
msgid "Insufficient kernel memory was available."
msgstr ""

#. type: TP
#: build/C/man2/inotify_add_watch.2:114
#, no-wrap
msgid "B<ENOSPC>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:118
msgid ""
"The user limit on the total number of inotify watches was reached or the "
"kernel failed to allocate a needed resource."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:120 build/C/man2/inotify_rm_watch.2:69
msgid "Inotify was merged into the 2.6.13 Linux kernel."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:122 build/C/man2/inotify_rm_watch.2:71
msgid "This system call is Linux-specific."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_add_watch.2:126
msgid "B<inotify_init>(2), B<inotify_rm_watch>(2), B<inotify>(7)"
msgstr ""

#. type: TH
#: build/C/man2/inotify_init.2:29
#, no-wrap
msgid "INOTIFY_INIT"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:32
msgid "inotify_init, inotify_init1 - initialize an inotify instance"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:35
#, no-wrap
msgid "B<#include E<lt>sys/inotify.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:38
#, no-wrap
msgid ""
"B<int inotify_init(void);>\n"
"B<int inotify_init1(int >I<flags>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:42
msgid "For an overview of the inotify API, see B<inotify>(7)."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:46
msgid ""
"B<inotify_init>()  initializes a new inotify instance and returns a file "
"descriptor associated with a new inotify event queue."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:56
msgid ""
"If I<flags> is 0, then B<inotify_init1>()  is the same as "
"B<inotify_init>().  The following values can be bitwise ORed in I<flags> to "
"obtain different behavior:"
msgstr ""

#. type: TP
#: build/C/man2/inotify_init.2:56
#, no-wrap
msgid "B<IN_NONBLOCK>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:64
msgid ""
"Set the B<O_NONBLOCK> file status flag on the new open file description.  "
"Using this flag saves extra calls to B<fcntl>(2)  to achieve the same "
"result."
msgstr ""

#. type: TP
#: build/C/man2/inotify_init.2:64
#, no-wrap
msgid "B<IN_CLOEXEC>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:74
msgid ""
"Set the close-on-exec (B<FD_CLOEXEC>)  flag on the new file descriptor.  See "
"the description of the B<O_CLOEXEC> flag in B<open>(2)  for reasons why this "
"may be useful."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:79
msgid ""
"On success, these system calls return a new file descriptor.  On error, -1 "
"is returned, and I<errno> is set to indicate the error."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:85
msgid "(B<inotify_init1>())  An invalid value was specified in I<flags>."
msgstr ""

#. type: TP
#: build/C/man2/inotify_init.2:85
#, no-wrap
msgid "B<EMFILE>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:88
msgid "The user limit on the total number of inotify instances has been reached."
msgstr ""

#. type: TP
#: build/C/man2/inotify_init.2:88
#, no-wrap
msgid "B<ENFILE>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:91
msgid "The system limit on the total number of file descriptors has been reached."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:94
msgid "Insufficient kernel memory is available."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:101
msgid ""
"B<inotify_init>()  first appeared in Linux 2.6.13; library support was added "
"to glibc in version 2.4.  B<inotify_init1>()  was added in Linux 2.6.27; "
"library support was added to glibc in version 2.9."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:103
msgid "These system calls are Linux-specific."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_init.2:107
msgid "B<inotify_add_watch>(2), B<inotify_rm_watch>(2), B<inotify>(7)"
msgstr ""

#. type: TH
#: build/C/man2/inotify_rm_watch.2:27
#, no-wrap
msgid "INOTIFY_RM_WATCH"
msgstr ""

#. type: TH
#: build/C/man2/inotify_rm_watch.2:27
#, no-wrap
msgid "2010-10-15"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:30
msgid "inotify_rm_watch - remove an existing watch from an inotify instance"
msgstr ""

#.  Before glibc 2.10, the second argument was types as uint32_t.
#.  http://sources.redhat.com/bugzilla/show_bug.cgi?id=7040
#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:36
msgid "B<int inotify_rm_watch(int >I<fd>B<, int >I<wd>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:42
msgid ""
"B<inotify_rm_watch>()  removes the watch associated with the watch "
"descriptor I<wd> from the inotify instance associated with the file "
"descriptor I<fd>."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:48
msgid ""
"Removing a watch causes an B<IN_IGNORED> event to be generated for this "
"watch descriptor.  (See B<inotify>(7).)"
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:55
msgid ""
"On success, B<inotify_rm_watch>()  returns zero.  On error, -1 is returned "
"and I<errno> is set to indicate the cause of the error."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:60
msgid "I<fd> is not a valid file descriptor."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:67
msgid ""
"The watch descriptor I<wd> is not valid; or I<fd> is not an inotify file "
"descriptor."
msgstr ""

#. type: Plain text
#: build/C/man2/inotify_rm_watch.2:75
msgid "B<inotify_add_watch>(2), B<inotify_init>(2), B<inotify>(7)"
msgstr ""
