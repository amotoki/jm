# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-04-17 13:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: build/C/man3/INFINITY.3:25
#, no-wrap
msgid "INFINITY"
msgstr ""

#. type: TH
#: build/C/man3/INFINITY.3:25
#, no-wrap
msgid "2007-07-26"
msgstr ""

#. type: TH
#: build/C/man3/INFINITY.3:25 build/C/man3/abs.3:34 build/C/man3/acos.3:35 build/C/man3/acosh.3:35 build/C/man3/asin.3:35 build/C/man3/asinh.3:35 build/C/man3/atan.3:35 build/C/man3/atan2.3:35 build/C/man3/atanh.3:35 build/C/man3/cbrt.3:30 build/C/man3/ceil.3:27 build/C/man3/copysign.3:31 build/C/man3/cos.3:34 build/C/man3/cosh.3:36 build/C/man3/div.3:34 build/C/man3/erf.3:35 build/C/man3/erfc.3:26 build/C/man3/exp.3:36 build/C/man3/exp10.3:35 build/C/man3/exp2.3:36 build/C/man3/expm1.3:30 build/C/man3/fabs.3:32 build/C/man3/fdim.3:9 build/C/man3/fenv.3:27 build/C/man3/finite.3:25 build/C/man3/floor.3:27 build/C/man3/fma.3:12 build/C/man3/fmax.3:9 build/C/man3/fmin.3:9 build/C/man3/fmod.3:35 build/C/man3/fpclassify.3:10 build/C/man3/frexp.3:33 build/C/man3/gamma.3:9 build/C/man3/hypot.3:33 build/C/man3/ilogb.3:29 build/C/man3/infnan.3:33 build/C/man3/isgreater.3:10 build/C/man3/j0.3:36 build/C/man3/ldexp.3:34 build/C/man3/lgamma.3:11 build/C/man3/log.3:36 build/C/man3/log10.3:36 build/C/man3/log1p.3:29 build/C/man3/log2.3:36 build/C/man3/logb.3:29 build/C/man3/lrint.3:27 build/C/man3/lround.3:27 build/C/man7/math_error.7:26 build/C/man3/matherr.3:27 build/C/man3/modf.3:33 build/C/man3/nan.3:11 build/C/man3/nextafter.3:11 build/C/man3/pow.3:35 build/C/man3/pow10.3:25 build/C/man3/remainder.3:37 build/C/man3/remquo.3:12 build/C/man3/rint.3:27 build/C/man3/round.3:27 build/C/man3/scalb.3:27 build/C/man3/scalbln.3:27 build/C/man3/signbit.3:11 build/C/man3/significand.3:9 build/C/man3/sin.3:35 build/C/man3/sincos.3:9 build/C/man3/sinh.3:36 build/C/man3/sqrt.3:34 build/C/man3/tan.3:35 build/C/man3/tanh.3:35 build/C/man3/tgamma.3:13 build/C/man3/trunc.3:25 build/C/man3/y0.3:36
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:26 build/C/man3/abs.3:35 build/C/man3/acos.3:36 build/C/man3/acosh.3:36 build/C/man3/asin.3:36 build/C/man3/asinh.3:36 build/C/man3/atan.3:36 build/C/man3/atan2.3:36 build/C/man3/atanh.3:36 build/C/man3/cbrt.3:31 build/C/man3/ceil.3:28 build/C/man3/copysign.3:32 build/C/man3/cos.3:35 build/C/man3/cosh.3:37 build/C/man3/div.3:35 build/C/man3/erf.3:36 build/C/man3/erfc.3:27 build/C/man3/exp.3:37 build/C/man3/exp10.3:36 build/C/man3/exp2.3:37 build/C/man3/expm1.3:31 build/C/man3/fabs.3:33 build/C/man3/fdim.3:10 build/C/man3/fenv.3:28 build/C/man3/finite.3:26 build/C/man3/floor.3:28 build/C/man3/fma.3:13 build/C/man3/fmax.3:10 build/C/man3/fmin.3:10 build/C/man3/fmod.3:36 build/C/man3/fpclassify.3:11 build/C/man3/frexp.3:34 build/C/man3/gamma.3:10 build/C/man3/hypot.3:34 build/C/man3/ilogb.3:30 build/C/man3/infnan.3:34 build/C/man3/isgreater.3:11 build/C/man3/j0.3:37 build/C/man3/ldexp.3:35 build/C/man3/lgamma.3:12 build/C/man3/log.3:37 build/C/man3/log10.3:37 build/C/man3/log1p.3:30 build/C/man3/log2.3:37 build/C/man3/logb.3:30 build/C/man3/lrint.3:28 build/C/man3/lround.3:28 build/C/man7/math_error.7:27 build/C/man3/matherr.3:28 build/C/man3/modf.3:34 build/C/man3/nan.3:12 build/C/man3/nextafter.3:12 build/C/man3/pow.3:36 build/C/man3/pow10.3:26 build/C/man3/remainder.3:38 build/C/man3/remquo.3:13 build/C/man3/rint.3:28 build/C/man3/round.3:28 build/C/man3/scalb.3:28 build/C/man3/scalbln.3:28 build/C/man3/signbit.3:12 build/C/man3/significand.3:10 build/C/man3/sin.3:36 build/C/man3/sincos.3:10 build/C/man3/sinh.3:37 build/C/man3/sqrt.3:35 build/C/man3/tan.3:36 build/C/man3/tanh.3:36 build/C/man3/tgamma.3:14 build/C/man3/trunc.3:26 build/C/man3/y0.3:37
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:28
msgid "INFINITY, NAN, HUGE_VAL, HUGE_VALF, HUGE_VALL - floating-point constants"
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:28 build/C/man3/abs.3:37 build/C/man3/acos.3:38 build/C/man3/acosh.3:38 build/C/man3/asin.3:38 build/C/man3/asinh.3:38 build/C/man3/atan.3:38 build/C/man3/atan2.3:38 build/C/man3/atanh.3:38 build/C/man3/cbrt.3:33 build/C/man3/ceil.3:31 build/C/man3/copysign.3:34 build/C/man3/cos.3:37 build/C/man3/cosh.3:39 build/C/man3/div.3:38 build/C/man3/erf.3:38 build/C/man3/erfc.3:29 build/C/man3/exp.3:39 build/C/man3/exp10.3:38 build/C/man3/exp2.3:39 build/C/man3/expm1.3:33 build/C/man3/fabs.3:35 build/C/man3/fdim.3:12 build/C/man3/fenv.3:33 build/C/man3/finite.3:29 build/C/man3/floor.3:30 build/C/man3/fma.3:15 build/C/man3/fmax.3:12 build/C/man3/fmin.3:12 build/C/man3/fmod.3:38 build/C/man3/fpclassify.3:14 build/C/man3/frexp.3:37 build/C/man3/gamma.3:12 build/C/man3/hypot.3:36 build/C/man3/ilogb.3:32 build/C/man3/infnan.3:36 build/C/man3/isgreater.3:14 build/C/man3/j0.3:40 build/C/man3/ldexp.3:37 build/C/man3/lgamma.3:15 build/C/man3/log.3:39 build/C/man3/log10.3:39 build/C/man3/log1p.3:32 build/C/man3/log2.3:39 build/C/man3/logb.3:32 build/C/man3/lrint.3:30 build/C/man3/lround.3:31 build/C/man7/math_error.7:29 build/C/man3/matherr.3:30 build/C/man3/modf.3:37 build/C/man3/nan.3:14 build/C/man3/nextafter.3:15 build/C/man3/pow.3:38 build/C/man3/pow10.3:28 build/C/man3/remainder.3:41 build/C/man3/remquo.3:15 build/C/man3/rint.3:31 build/C/man3/round.3:30 build/C/man3/scalb.3:31 build/C/man3/scalbln.3:31 build/C/man3/signbit.3:14 build/C/man3/significand.3:13 build/C/man3/sin.3:38 build/C/man3/sincos.3:12 build/C/man3/sinh.3:39 build/C/man3/sqrt.3:37 build/C/man3/tan.3:38 build/C/man3/tanh.3:38 build/C/man3/tgamma.3:16 build/C/man3/trunc.3:28 build/C/man3/y0.3:40
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:31
#, no-wrap
msgid "B<#define _ISOC99_SOURCE>      /* See feature_test_macros(7) */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:33 build/C/man3/acos.3:41 build/C/man3/acosh.3:41 build/C/man3/asin.3:41 build/C/man3/asinh.3:41 build/C/man3/atan.3:41 build/C/man3/atan2.3:41 build/C/man3/atanh.3:41 build/C/man3/cbrt.3:36 build/C/man3/ceil.3:34 build/C/man3/copysign.3:37 build/C/man3/cos.3:40 build/C/man3/cosh.3:42 build/C/man3/erf.3:41 build/C/man3/erfc.3:32 build/C/man3/exp.3:42 build/C/man3/exp10.3:43 build/C/man3/exp2.3:42 build/C/man3/expm1.3:36 build/C/man3/fabs.3:38 build/C/man3/finite.3:32 build/C/man3/floor.3:33 build/C/man3/fma.3:18 build/C/man3/fmod.3:41 build/C/man3/fpclassify.3:17 build/C/man3/frexp.3:40 build/C/man3/hypot.3:39 build/C/man3/infnan.3:39 build/C/man3/isgreater.3:17 build/C/man3/j0.3:43 build/C/man3/ldexp.3:40 build/C/man3/lgamma.3:18 build/C/man3/log.3:42 build/C/man3/log10.3:42 build/C/man3/log1p.3:35 build/C/man3/log2.3:42 build/C/man3/lrint.3:33 build/C/man3/lround.3:34 build/C/man3/modf.3:40 build/C/man3/pow.3:41 build/C/man3/remainder.3:44 build/C/man3/remquo.3:18 build/C/man3/rint.3:34 build/C/man3/round.3:33 build/C/man3/sin.3:41 build/C/man3/sinh.3:42 build/C/man3/sqrt.3:40 build/C/man3/tan.3:41 build/C/man3/tanh.3:41 build/C/man3/trunc.3:31 build/C/man3/y0.3:43
#, no-wrap
msgid "B<#include E<lt>math.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:35
#, no-wrap
msgid "B<INFINITY>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:37
#, no-wrap
msgid "B<NAN>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:39
#, no-wrap
msgid "B<HUGE_VAL>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:41
#, no-wrap
msgid "B<HUGE_VALF>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:43
#, no-wrap
msgid "B<HUGE_VALL>\n"
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:44 build/C/man3/abs.3:67 build/C/man3/acos.3:65 build/C/man3/acosh.3:77 build/C/man3/asin.3:67 build/C/man3/asinh.3:77 build/C/man3/atan.3:67 build/C/man3/atan2.3:65 build/C/man3/atanh.3:77 build/C/man3/cbrt.3:72 build/C/man3/ceil.3:60 build/C/man3/copysign.3:64 build/C/man3/cos.3:66 build/C/man3/cosh.3:68 build/C/man3/div.3:68 build/C/man3/erf.3:74 build/C/man3/erfc.3:65 build/C/man3/exp.3:68 build/C/man3/exp10.3:52 build/C/man3/exp2.3:68 build/C/man3/expm1.3:72 build/C/man3/fabs.3:64 build/C/man3/fdim.3:39 build/C/man3/fenv.3:61 build/C/man3/finite.3:90 build/C/man3/floor.3:59 build/C/man3/fma.3:45 build/C/man3/fmax.3:40 build/C/man3/fmin.3:40 build/C/man3/fmod.3:67 build/C/man3/fpclassify.3:66 build/C/man3/frexp.3:66 build/C/man3/gamma.3:40 build/C/man3/hypot.3:74 build/C/man3/ilogb.3:70 build/C/man3/infnan.3:44 build/C/man3/isgreater.3:48 build/C/man3/j0.3:89 build/C/man3/ldexp.3:66 build/C/man3/lgamma.3:71 build/C/man3/log.3:68 build/C/man3/log10.3:68 build/C/man3/log1p.3:71 build/C/man3/log2.3:68 build/C/man3/logb.3:69 build/C/man3/lrint.3:64 build/C/man3/lround.3:65 build/C/man7/math_error.7:35 build/C/man3/matherr.3:41 build/C/man3/modf.3:66 build/C/man3/nan.3:42 build/C/man3/nextafter.3:70 build/C/man3/pow.3:67 build/C/man3/pow10.3:41 build/C/man3/remainder.3:92 build/C/man3/remquo.3:45 build/C/man3/rint.3:86 build/C/man3/round.3:60 build/C/man3/scalb.3:60 build/C/man3/scalbln.3:76 build/C/man3/signbit.3:36 build/C/man3/significand.3:37 build/C/man3/sin.3:67 build/C/man3/sincos.3:25 build/C/man3/sinh.3:68 build/C/man3/sqrt.3:66 build/C/man3/tan.3:67 build/C/man3/tanh.3:67 build/C/man3/tgamma.3:44 build/C/man3/trunc.3:58 build/C/man3/y0.3:89
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:50
msgid ""
"The macro B<INFINITY> expands to a I<float> constant representing positive "
"infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:65
msgid ""
"The macro B<NAN> expands to a I<float> constant representing a quiet NaN "
"(when supported).  A I<quiet> NaN is a NaN (\"not-a-number\") that does not "
"raise exceptions when it is used in arithmetic.  The opposite is a "
"I<signaling> NaN.  See IEC 60559:1989."
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:77
msgid ""
"The macros B<HUGE_VAL>, B<HUGE_VALF>, B<HUGE_VALL> expand to constants of "
"types I<double>, I<float> and I<long double>, respectively, that represent a "
"large positive value, possibly positive infinity."
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:77 build/C/man3/abs.3:91 build/C/man3/acos.3:113 build/C/man3/acosh.3:120 build/C/man3/asin.3:111 build/C/man3/asinh.3:113 build/C/man3/atan.3:104 build/C/man3/atan2.3:166 build/C/man3/atanh.3:139 build/C/man3/cbrt.3:98 build/C/man3/ceil.3:89 build/C/man3/copysign.3:103 build/C/man3/cos.3:112 build/C/man3/cosh.3:119 build/C/man3/div.3:100 build/C/man3/erf.3:134 build/C/man3/erfc.3:130 build/C/man3/exp.3:128 build/C/man3/exp10.3:77 build/C/man3/exp2.3:91 build/C/man3/expm1.3:144 build/C/man3/fabs.3:93 build/C/man3/fdim.3:89 build/C/man3/fenv.3:284 build/C/man3/floor.3:88 build/C/man3/fma.3:164 build/C/man3/fmax.3:66 build/C/man3/fmin.3:66 build/C/man3/fmod.3:146 build/C/man3/fpclassify.3:128 build/C/man3/frexp.3:116 build/C/man3/gamma.3:65 build/C/man3/hypot.3:158 build/C/man3/ilogb.3:154 build/C/man3/infnan.3:87 build/C/man3/isgreater.3:136 build/C/man3/j0.3:157 build/C/man3/ldexp.3:137 build/C/man3/lgamma.3:158 build/C/man3/log.3:128 build/C/man3/log10.3:89 build/C/man3/log1p.3:150 build/C/man3/log2.3:91 build/C/man3/logb.3:151 build/C/man3/lrint.3:121 build/C/man3/lround.3:124 build/C/man3/modf.3:103 build/C/man3/nan.3:75 build/C/man3/nextafter.3:190 build/C/man3/pow.3:316 build/C/man3/pow10.3:49 build/C/man3/remainder.3:180 build/C/man3/remquo.3:124 build/C/man3/rint.3:133 build/C/man3/round.3:96 build/C/man3/scalb.3:177 build/C/man3/scalbln.3:171 build/C/man3/signbit.3:66 build/C/man3/significand.3:51 build/C/man3/sin.3:116 build/C/man3/sincos.3:83 build/C/man3/sinh.3:124 build/C/man3/sqrt.3:107 build/C/man3/tan.3:141 build/C/man3/tanh.3:108 build/C/man3/tgamma.3:162 build/C/man3/trunc.3:83 build/C/man3/y0.3:230
#, no-wrap
msgid "CONFORMING TO"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:79
msgid "C99."
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:79
#, no-wrap
msgid "AVAILABILITY"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:101
msgid ""
"On a glibc system, the macro B<HUGE_VAL> is always available.  Availability "
"of the B<NAN> macro can be tested using B<#ifdef NAN>, and similarly for "
"B<INFINITY>, B<HUGE_VALF>, B<HUGE_VALL>.  They will be defined by "
"I<E<lt>math.hE<gt>> if B<_ISOC99_SOURCE> or B<_GNU_SOURCE> is defined, or "
"B<__STDC_VERSION__> is defined and has a value not less than 199901L."
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:101 build/C/man3/abs.3:135 build/C/man3/acos.3:119 build/C/man3/acosh.3:126 build/C/man3/asin.3:117 build/C/man3/asinh.3:119 build/C/man3/atan.3:110 build/C/man3/atan2.3:172 build/C/man3/atanh.3:156 build/C/man3/cbrt.3:102 build/C/man3/ceil.3:120 build/C/man3/copysign.3:112 build/C/man3/cos.3:125 build/C/man3/cosh.3:130 build/C/man3/div.3:115 build/C/man3/erf.3:140 build/C/man3/erfc.3:146 build/C/man3/exp.3:134 build/C/man3/exp10.3:79 build/C/man3/exp2.3:97 build/C/man3/expm1.3:178 build/C/man3/fabs.3:99 build/C/man3/fdim.3:91 build/C/man3/fenv.3:342 build/C/man3/finite.3:155 build/C/man3/floor.3:110 build/C/man3/fma.3:166 build/C/man3/fmax.3:68 build/C/man3/fmin.3:68 build/C/man3/fmod.3:160 build/C/man3/fpclassify.3:142 build/C/man3/frexp.3:155 build/C/man3/gamma.3:97 build/C/man3/hypot.3:164 build/C/man3/ilogb.3:156 build/C/man3/isgreater.3:143 build/C/man3/j0.3:172 build/C/man3/ldexp.3:143 build/C/man3/lgamma.3:177 build/C/man3/log.3:141 build/C/man3/log10.3:95 build/C/man3/log1p.3:153 build/C/man3/log2.3:97 build/C/man3/logb.3:153 build/C/man3/lrint.3:123 build/C/man3/lround.3:126 build/C/man7/math_error.7:256 build/C/man3/matherr.3:425 build/C/man3/modf.3:109 build/C/man3/nan.3:79 build/C/man3/nextafter.3:199 build/C/man3/pow.3:365 build/C/man3/pow10.3:54 build/C/man3/remainder.3:215 build/C/man3/remquo.3:126 build/C/man3/rint.3:155 build/C/man3/round.3:119 build/C/man3/scalb.3:200 build/C/man3/scalbln.3:189 build/C/man3/signbit.3:70 build/C/man3/significand.3:57 build/C/man3/sin.3:129 build/C/man3/sincos.3:85 build/C/man3/sinh.3:130 build/C/man3/sqrt.3:113 build/C/man3/tan.3:154 build/C/man3/tanh.3:114 build/C/man3/tgamma.3:188 build/C/man3/trunc.3:94 build/C/man3/y0.3:253
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:104
msgid "B<fpclassify>(3), B<math_error>(7)"
msgstr ""

#. type: SH
#: build/C/man3/INFINITY.3:104 build/C/man3/abs.3:141 build/C/man3/acos.3:127 build/C/man3/acosh.3:133 build/C/man3/asin.3:125 build/C/man3/asinh.3:126 build/C/man3/atan.3:119 build/C/man3/atan2.3:180 build/C/man3/atanh.3:163 build/C/man3/cbrt.3:105 build/C/man3/ceil.3:127 build/C/man3/copysign.3:114 build/C/man3/cos.3:134 build/C/man3/cosh.3:137 build/C/man3/div.3:118 build/C/man3/erf.3:144 build/C/man3/erfc.3:150 build/C/man3/exp.3:140 build/C/man3/exp10.3:85 build/C/man3/exp2.3:103 build/C/man3/expm1.3:182 build/C/man3/fabs.3:106 build/C/man3/fdim.3:93 build/C/man3/fenv.3:344 build/C/man3/finite.3:157 build/C/man3/floor.3:117 build/C/man3/fma.3:169 build/C/man3/fmax.3:70 build/C/man3/fmin.3:70 build/C/man3/fmod.3:162 build/C/man3/fpclassify.3:147 build/C/man3/frexp.3:158 build/C/man3/gamma.3:101 build/C/man3/hypot.3:167 build/C/man3/ilogb.3:160 build/C/man3/infnan.3:92 build/C/man3/isgreater.3:146 build/C/man3/j0.3:174 build/C/man3/ldexp.3:147 build/C/man3/lgamma.3:179 build/C/man3/log.3:148 build/C/man3/log10.3:102 build/C/man3/log1p.3:157 build/C/man3/log2.3:103 build/C/man3/logb.3:156 build/C/man3/lrint.3:130 build/C/man3/lround.3:133 build/C/man7/math_error.7:267 build/C/man3/matherr.3:429 build/C/man3/modf.3:112 build/C/man3/nan.3:83 build/C/man3/nextafter.3:201 build/C/man3/pow.3:369 build/C/man3/pow10.3:57 build/C/man3/remainder.3:219 build/C/man3/remquo.3:130 build/C/man3/rint.3:161 build/C/man3/round.3:126 build/C/man3/scalb.3:203 build/C/man3/scalbln.3:192 build/C/man3/signbit.3:72 build/C/man3/significand.3:60 build/C/man3/sin.3:138 build/C/man3/sincos.3:89 build/C/man3/sinh.3:137 build/C/man3/sqrt.3:117 build/C/man3/tan.3:162 build/C/man3/tanh.3:121 build/C/man3/tgamma.3:191 build/C/man3/trunc.3:101 build/C/man3/y0.3:255
#, no-wrap
msgid "COLOPHON"
msgstr ""

#. type: Plain text
#: build/C/man3/INFINITY.3:111 build/C/man3/abs.3:148 build/C/man3/acos.3:134 build/C/man3/acosh.3:140 build/C/man3/asin.3:132 build/C/man3/asinh.3:133 build/C/man3/atan.3:126 build/C/man3/atan2.3:187 build/C/man3/atanh.3:170 build/C/man3/cbrt.3:112 build/C/man3/ceil.3:134 build/C/man3/copysign.3:121 build/C/man3/cos.3:141 build/C/man3/cosh.3:144 build/C/man3/div.3:125 build/C/man3/erf.3:151 build/C/man3/erfc.3:157 build/C/man3/exp.3:147 build/C/man3/exp10.3:92 build/C/man3/exp2.3:110 build/C/man3/expm1.3:189 build/C/man3/fabs.3:113 build/C/man3/fdim.3:100 build/C/man3/fenv.3:351 build/C/man3/finite.3:164 build/C/man3/floor.3:124 build/C/man3/fma.3:176 build/C/man3/fmax.3:77 build/C/man3/fmin.3:77 build/C/man3/fmod.3:169 build/C/man3/fpclassify.3:154 build/C/man3/frexp.3:165 build/C/man3/gamma.3:108 build/C/man3/hypot.3:174 build/C/man3/ilogb.3:167 build/C/man3/infnan.3:99 build/C/man3/isgreater.3:153 build/C/man3/j0.3:181 build/C/man3/ldexp.3:154 build/C/man3/lgamma.3:186 build/C/man3/log.3:155 build/C/man3/log10.3:109 build/C/man3/log1p.3:164 build/C/man3/log2.3:110 build/C/man3/logb.3:163 build/C/man3/lrint.3:137 build/C/man3/lround.3:140 build/C/man7/math_error.7:274 build/C/man3/matherr.3:436 build/C/man3/modf.3:119 build/C/man3/nan.3:90 build/C/man3/nextafter.3:208 build/C/man3/pow.3:376 build/C/man3/pow10.3:64 build/C/man3/remainder.3:226 build/C/man3/remquo.3:137 build/C/man3/rint.3:168 build/C/man3/round.3:133 build/C/man3/scalb.3:210 build/C/man3/scalbln.3:199 build/C/man3/signbit.3:79 build/C/man3/significand.3:67 build/C/man3/sin.3:145 build/C/man3/sincos.3:96 build/C/man3/sinh.3:144 build/C/man3/sqrt.3:124 build/C/man3/tan.3:169 build/C/man3/tanh.3:128 build/C/man3/tgamma.3:198 build/C/man3/trunc.3:108 build/C/man3/y0.3:262
msgid ""
"This page is part of release 3.64 of the Linux I<man-pages> project.  A "
"description of the project, and information about reporting bugs, can be "
"found at \\%http://www.kernel.org/doc/man-pages/."
msgstr ""

#. type: TH
#: build/C/man3/abs.3:34
#, no-wrap
msgid "ABS"
msgstr ""

#. type: TH
#: build/C/man3/abs.3:34 build/C/man3/ceil.3:27 build/C/man3/modf.3:33 build/C/man3/round.3:27 build/C/man3/scalbln.3:27 build/C/man3/trunc.3:25
#, no-wrap
msgid "2013-06-21"
msgstr ""

#. type: TH
#: build/C/man3/abs.3:34 build/C/man3/asinh.3:35 build/C/man3/cbrt.3:30 build/C/man3/copysign.3:31 build/C/man3/erf.3:35 build/C/man3/erfc.3:26 build/C/man3/exp10.3:35 build/C/man3/gamma.3:9 build/C/man3/infnan.3:33 build/C/man3/nan.3:11 build/C/man3/nextafter.3:11 build/C/man3/remquo.3:12 build/C/man3/signbit.3:11 build/C/man3/significand.3:9 build/C/man3/sincos.3:9 build/C/man3/tgamma.3:13
#, no-wrap
msgid "GNU"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:37
msgid "abs, labs, llabs, imaxabs - compute the absolute value of an integer"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:40 build/C/man3/div.3:41
#, no-wrap
msgid "B<#include E<lt>stdlib.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:42
#, no-wrap
msgid "B<int abs(int >I<j>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:44
#, no-wrap
msgid "B<long int labs(long int >I<j>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:46
#, no-wrap
msgid "B<long long int llabs(long long int >I<j>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:48 build/C/man3/div.3:49
#, no-wrap
msgid "B<#include E<lt>inttypes.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:50
#, no-wrap
msgid "B<intmax_t imaxabs(intmax_t >I<j>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:55 build/C/man3/acos.3:52 build/C/man3/acosh.3:54 build/C/man3/asin.3:54 build/C/man3/asinh.3:54 build/C/man3/atan.3:54 build/C/man3/atan2.3:52 build/C/man3/atanh.3:54 build/C/man3/cbrt.3:49 build/C/man3/ceil.3:47 build/C/man3/copysign.3:50 build/C/man3/cos.3:53 build/C/man3/cosh.3:55 build/C/man3/div.3:56 build/C/man3/erf.3:52 build/C/man3/erfc.3:43 build/C/man3/exp.3:55 build/C/man3/exp2.3:55 build/C/man3/expm1.3:49 build/C/man3/fabs.3:51 build/C/man3/fdim.3:26 build/C/man3/finite.3:55 build/C/man3/floor.3:46 build/C/man3/fma.3:31 build/C/man3/fmax.3:26 build/C/man3/fmin.3:26 build/C/man3/fmod.3:54 build/C/man3/fpclassify.3:34 build/C/man3/frexp.3:53 build/C/man3/gamma.3:26 build/C/man3/hypot.3:52 build/C/man3/ilogb.3:46 build/C/man3/isgreater.3:36 build/C/man3/j0.3:68 build/C/man3/ldexp.3:53 build/C/man3/lgamma.3:39 build/C/man3/log.3:55 build/C/man3/log10.3:55 build/C/man3/log1p.3:48 build/C/man3/log2.3:55 build/C/man3/logb.3:46 build/C/man3/lrint.3:52 build/C/man3/lround.3:53 build/C/man3/modf.3:53 build/C/man3/nan.3:28 build/C/man3/nextafter.3:35 build/C/man3/pow.3:54 build/C/man3/remainder.3:61 build/C/man3/remquo.3:31 build/C/man3/rint.3:53 build/C/man3/round.3:46 build/C/man3/scalb.3:45 build/C/man3/scalbln.3:51 build/C/man3/signbit.3:24 build/C/man3/significand.3:27 build/C/man3/sin.3:54 build/C/man3/sinh.3:55 build/C/man3/sqrt.3:53 build/C/man3/tan.3:54 build/C/man3/tanh.3:54 build/C/man3/tgamma.3:30 build/C/man3/trunc.3:44 build/C/man3/y0.3:68
msgid "Feature Test Macro Requirements for glibc (see B<feature_test_macros>(7)):"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:59
msgid "B<llabs>():"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:62 build/C/man3/div.3:63 build/C/man3/exp2.3:63 build/C/man3/fdim.3:34 build/C/man3/fma.3:40 build/C/man3/fmax.3:35 build/C/man3/fmin.3:35 build/C/man3/fpclassify.3:45 build/C/man3/isgreater.3:43 build/C/man3/log2.3:63 build/C/man3/lrint.3:59 build/C/man3/lround.3:60 build/C/man3/nan.3:37 build/C/man3/nextafter.3:65 build/C/man3/remquo.3:40 build/C/man3/round.3:55 build/C/man3/scalbln.3:60 build/C/man3/signbit.3:31 build/C/man3/tgamma.3:39 build/C/man3/trunc.3:53
msgid ""
"_XOPEN_SOURCE\\ E<gt>=\\ 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE\\ E<gt>=\\ "
"200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:65 build/C/man3/acos.3:63 build/C/man3/acosh.3:65 build/C/man3/acosh.3:75 build/C/man3/asin.3:65 build/C/man3/asinh.3:65 build/C/man3/asinh.3:75 build/C/man3/atan.3:65 build/C/man3/atan2.3:63 build/C/man3/atanh.3:65 build/C/man3/atanh.3:75 build/C/man3/cbrt.3:61 build/C/man3/cbrt.3:70 build/C/man3/ceil.3:58 build/C/man3/copysign.3:62 build/C/man3/cos.3:64 build/C/man3/cosh.3:66 build/C/man3/div.3:66 build/C/man3/erf.3:62 build/C/man3/erf.3:72 build/C/man3/erfc.3:53 build/C/man3/erfc.3:63 build/C/man3/exp.3:66 build/C/man3/exp2.3:66 build/C/man3/expm1.3:60 build/C/man3/expm1.3:70 build/C/man3/fabs.3:62 build/C/man3/fdim.3:37 build/C/man3/finite.3:70 build/C/man3/finite.3:83 build/C/man3/floor.3:57 build/C/man3/fma.3:43 build/C/man3/fmax.3:38 build/C/man3/fmin.3:38 build/C/man3/fmod.3:65 build/C/man3/fpclassify.3:48 build/C/man3/fpclassify.3:56 build/C/man3/fpclassify.3:64 build/C/man3/frexp.3:64 build/C/man3/hypot.3:62 build/C/man3/hypot.3:72 build/C/man3/ilogb.3:58 build/C/man3/ilogb.3:68 build/C/man3/isgreater.3:46 build/C/man3/ldexp.3:64 build/C/man3/lgamma.3:49 build/C/man3/lgamma.3:59 build/C/man3/log.3:66 build/C/man3/log10.3:66 build/C/man3/log1p.3:59 build/C/man3/log1p.3:69 build/C/man3/log2.3:66 build/C/man3/logb.3:57 build/C/man3/logb.3:67 build/C/man3/lrint.3:62 build/C/man3/lround.3:63 build/C/man3/modf.3:64 build/C/man3/nan.3:40 build/C/man3/nextafter.3:47 build/C/man3/nextafter.3:57 build/C/man3/nextafter.3:68 build/C/man3/pow.3:65 build/C/man3/remainder.3:73 build/C/man3/remainder.3:83 build/C/man3/remquo.3:43 build/C/man3/rint.3:64 build/C/man3/rint.3:74 build/C/man3/rint.3:84 build/C/man3/round.3:58 build/C/man3/scalbln.3:63 build/C/man3/scalbln.3:74 build/C/man3/signbit.3:34 build/C/man3/sin.3:65 build/C/man3/sinh.3:66 build/C/man3/sqrt.3:64 build/C/man3/tan.3:65 build/C/man3/tanh.3:65 build/C/man3/tgamma.3:42 build/C/man3/trunc.3:56
msgid "or I<cc\\ -std=c99>"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:79
msgid ""
"The B<abs>()  function computes the absolute value of the integer argument "
"I<j>.  The B<labs>(), B<llabs>()  and B<imaxabs>()  functions compute the "
"absolute value of the argument I<j> of the appropriate integer type for the "
"function."
msgstr ""

#. type: SH
#: build/C/man3/abs.3:79 build/C/man3/acos.3:73 build/C/man3/acosh.3:84 build/C/man3/asin.3:74 build/C/man3/asinh.3:84 build/C/man3/atan.3:74 build/C/man3/atan2.3:72 build/C/man3/atanh.3:84 build/C/man3/cbrt.3:79 build/C/man3/ceil.3:69 build/C/man3/copysign.3:81 build/C/man3/cos.3:75 build/C/man3/cosh.3:79 build/C/man3/div.3:89 build/C/man3/erf.3:83 build/C/man3/erfc.3:71 build/C/man3/exp.3:74 build/C/man3/exp10.3:58 build/C/man3/exp2.3:74 build/C/man3/expm1.3:88 build/C/man3/fabs.3:68 build/C/man3/fdim.3:42 build/C/man3/fenv.3:258 build/C/man3/floor.3:68 build/C/man3/fma.3:53 build/C/man3/fmax.3:45 build/C/man3/fmin.3:45 build/C/man3/fmod.3:87 build/C/man3/frexp.3:74 build/C/man3/gamma.3:59 build/C/man3/hypot.3:92 build/C/man3/ilogb.3:78 build/C/man3/infnan.3:56 build/C/man3/isgreater.3:111 build/C/man3/j0.3:121 build/C/man3/ldexp.3:73 build/C/man3/lgamma.3:96 build/C/man3/log.3:73 build/C/man3/log10.3:73 build/C/man3/log1p.3:83 build/C/man3/log2.3:73 build/C/man3/logb.3:94 build/C/man3/lrint.3:74 build/C/man3/lround.3:77 build/C/man3/modf.3:76 build/C/man3/nextafter.3:104 build/C/man3/pow.3:75 build/C/man3/remainder.3:118 build/C/man3/remquo.3:73 build/C/man3/rint.3:111 build/C/man3/round.3:75 build/C/man3/scalb.3:79 build/C/man3/scalbln.3:95 build/C/man3/signbit.3:53 build/C/man3/sin.3:76 build/C/man3/sincos.3:49 build/C/man3/sinh.3:79 build/C/man3/sqrt.3:71 build/C/man3/tan.3:76 build/C/man3/tanh.3:78 build/C/man3/tgamma.3:67 build/C/man3/trunc.3:63 build/C/man3/y0.3:126
#, no-wrap
msgid "RETURN VALUE"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:82
msgid ""
"Returns the absolute value of the integer argument, of the appropriate "
"integer type for the function."
msgstr ""

#. type: SH
#: build/C/man3/abs.3:82 build/C/man3/asinh.3:105 build/C/man3/atan.3:96 build/C/man3/cbrt.3:90 build/C/man3/ceil.3:81 build/C/man3/copysign.3:95 build/C/man3/cos.3:104 build/C/man3/div.3:91 build/C/man3/erf.3:126 build/C/man3/erfc.3:122 build/C/man3/expm1.3:136 build/C/man3/fabs.3:85 build/C/man3/fdim.3:81 build/C/man3/fenv.3:265 build/C/man3/finite.3:121 build/C/man3/floor.3:80 build/C/man3/fma.3:156 build/C/man3/fmax.3:58 build/C/man3/fmin.3:58 build/C/man3/fpclassify.3:118 build/C/man3/frexp.3:108 build/C/man3/ilogb.3:146 build/C/man3/isgreater.3:125 build/C/man3/ldexp.3:129 build/C/man3/log1p.3:142 build/C/man3/logb.3:143 build/C/man3/lrint.3:110 build/C/man3/lround.3:113 build/C/man3/modf.3:95 build/C/man3/nextafter.3:179 build/C/man3/rint.3:122 build/C/man3/round.3:88 build/C/man3/scalbln.3:160 build/C/man3/signbit.3:61 build/C/man3/sin.3:108 build/C/man3/sincos.3:75 build/C/man3/tan.3:133 build/C/man3/tanh.3:100 build/C/man3/trunc.3:75
#, no-wrap
msgid "ATTRIBUTES"
msgstr ""

#. type: SS
#: build/C/man3/abs.3:83 build/C/man3/asinh.3:106 build/C/man3/atan.3:97 build/C/man3/cbrt.3:91 build/C/man3/ceil.3:82 build/C/man3/copysign.3:96 build/C/man3/cos.3:105 build/C/man3/div.3:92 build/C/man3/erf.3:127 build/C/man3/erfc.3:123 build/C/man3/expm1.3:137 build/C/man3/fabs.3:86 build/C/man3/fdim.3:82 build/C/man3/fenv.3:266 build/C/man3/finite.3:122 build/C/man3/floor.3:81 build/C/man3/fma.3:157 build/C/man3/fmax.3:59 build/C/man3/fmin.3:59 build/C/man3/fpclassify.3:119 build/C/man3/frexp.3:109 build/C/man3/ilogb.3:147 build/C/man3/isgreater.3:126 build/C/man3/ldexp.3:130 build/C/man3/log1p.3:143 build/C/man3/logb.3:144 build/C/man3/lrint.3:111 build/C/man3/lround.3:114 build/C/man3/modf.3:96 build/C/man3/nextafter.3:180 build/C/man3/rint.3:123 build/C/man3/round.3:89 build/C/man3/scalbln.3:161 build/C/man3/signbit.3:62 build/C/man3/sin.3:109 build/C/man3/sincos.3:76 build/C/man3/tan.3:134 build/C/man3/tanh.3:101 build/C/man3/trunc.3:76
#, no-wrap
msgid "Multithreading (see pthreads(7))"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:91
msgid ""
"The B<abs>(), B<labs>(), B<llabs>(), and B<imaxabs>()  functions are "
"thread-safe."
msgstr ""

#.  POSIX.1 (1996 edition) requires only the
#.  .BR abs ()
#.  function.
#. type: Plain text
#: build/C/man3/abs.3:106
msgid ""
"SVr4, POSIX.1-2001, 4.3BSD, C99.  C89 only includes the B<abs>()  and "
"B<labs>()  functions; the functions B<llabs>()  and B<imaxabs>()  were added "
"in C99."
msgstr ""

#. type: SH
#: build/C/man3/abs.3:106 build/C/man3/ceil.3:95 build/C/man3/copysign.3:108 build/C/man3/erfc.3:136 build/C/man3/fenv.3:286 build/C/man3/finite.3:135 build/C/man3/floor.3:94 build/C/man3/fpclassify.3:135 build/C/man3/gamma.3:68 build/C/man3/infnan.3:89 build/C/man3/isgreater.3:138 build/C/man7/math_error.7:187 build/C/man3/pow10.3:51 build/C/man3/rint.3:135 build/C/man3/round.3:98 build/C/man3/scalbln.3:173 build/C/man3/tgamma.3:164 build/C/man3/trunc.3:85
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:109
msgid ""
"Trying to take the absolute value of the most negative integer is not "
"defined."
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:118
msgid ""
"The B<llabs>()  function is included in glibc since version 2.0, but is not "
"in libc5 or libc4.  The B<imaxabs>()  function is included in glibc since "
"version 2.1.1."
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:124
msgid ""
"For B<llabs>()  to be declared, it may be necessary to define "
"B<_ISOC99_SOURCE> or B<_ISOC9X_SOURCE> (depending on the version of glibc) "
"before including any standard headers."
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:135
msgid ""
"GCC handles B<abs>()  and B<labs>()  as built-in functions.  GCC 3.0 also "
"handles B<llabs>()  and B<imaxabs>()  as built-ins."
msgstr ""

#. type: Plain text
#: build/C/man3/abs.3:141
msgid "B<cabs>(3), B<ceil>(3), B<fabs>(3), B<floor>(3), B<rint>(3)"
msgstr ""

#. type: TH
#: build/C/man3/acos.3:35
#, no-wrap
msgid "ACOS"
msgstr ""

#. type: TH
#: build/C/man3/acos.3:35 build/C/man3/acosh.3:35 build/C/man3/asin.3:35 build/C/man3/atan2.3:35 build/C/man3/cosh.3:36 build/C/man3/exp.3:36 build/C/man3/exp2.3:36 build/C/man3/hypot.3:33 build/C/man3/log.3:36 build/C/man3/log10.3:36 build/C/man3/nan.3:11 build/C/man3/remainder.3:37 build/C/man3/remquo.3:12 build/C/man3/sinh.3:36 build/C/man3/sqrt.3:34 build/C/man3/tgamma.3:13
#, no-wrap
msgid "2010-09-20"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:38
msgid "acos, acosf, acosl - arc cosine function"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:45
#, no-wrap
msgid ""
"B<double acos(double >I<x>B<);>\n"
"B<float acosf(float >I<x>B<);>\n"
"B<long double acosl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:48 build/C/man3/acosh.3:50 build/C/man3/asin.3:50 build/C/man3/asinh.3:50 build/C/man3/atan.3:50 build/C/man3/atan2.3:48 build/C/man3/atanh.3:50 build/C/man3/cbrt.3:45 build/C/man3/ceil.3:43 build/C/man3/copysign.3:46 build/C/man3/cos.3:49 build/C/man3/cosh.3:51 build/C/man3/erf.3:48 build/C/man3/erfc.3:39 build/C/man3/exp.3:51 build/C/man3/exp10.3:52 build/C/man3/exp2.3:51 build/C/man3/expm1.3:45 build/C/man3/fabs.3:47 build/C/man3/fdim.3:22 build/C/man3/fenv.3:61 build/C/man3/floor.3:42 build/C/man3/fma.3:27 build/C/man3/fmax.3:22 build/C/man3/fmin.3:22 build/C/man3/fmod.3:50 build/C/man3/fpclassify.3:30 build/C/man3/frexp.3:49 build/C/man3/gamma.3:22 build/C/man3/hypot.3:48 build/C/man3/ilogb.3:42 build/C/man3/infnan.3:44 build/C/man3/isgreater.3:32 build/C/man3/j0.3:64 build/C/man3/ldexp.3:49 build/C/man3/lgamma.3:35 build/C/man3/log.3:51 build/C/man3/log10.3:51 build/C/man3/log1p.3:44 build/C/man3/log2.3:51 build/C/man3/logb.3:42 build/C/man3/lrint.3:48 build/C/man3/lround.3:49 build/C/man3/matherr.3:41 build/C/man3/modf.3:49 build/C/man3/nan.3:24 build/C/man3/nextafter.3:31 build/C/man3/pow.3:50 build/C/man3/pow10.3:41 build/C/man3/remainder.3:57 build/C/man3/remquo.3:27 build/C/man3/rint.3:49 build/C/man3/round.3:42 build/C/man3/scalb.3:41 build/C/man3/scalbln.3:47 build/C/man3/signbit.3:20 build/C/man3/significand.3:23 build/C/man3/sin.3:50 build/C/man3/sincos.3:25 build/C/man3/sinh.3:51 build/C/man3/sqrt.3:49 build/C/man3/tan.3:50 build/C/man3/tanh.3:50 build/C/man3/tgamma.3:26 build/C/man3/trunc.3:40 build/C/man3/y0.3:64
msgid "Link with I<-lm>."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:57
msgid "B<acosf>(), B<acosl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:60 build/C/man3/acosh.3:72 build/C/man3/asin.3:62 build/C/man3/asinh.3:72 build/C/man3/atan.3:62 build/C/man3/atan2.3:60 build/C/man3/atanh.3:72 build/C/man3/ceil.3:55 build/C/man3/cos.3:61 build/C/man3/cosh.3:63 build/C/man3/erf.3:69 build/C/man3/exp.3:63 build/C/man3/expm1.3:67 build/C/man3/fabs.3:59 build/C/man3/floor.3:54 build/C/man3/fmod.3:62 build/C/man3/fpclassify.3:61 build/C/man3/frexp.3:61 build/C/man3/hypot.3:69 build/C/man3/ilogb.3:65 build/C/man3/ldexp.3:61 build/C/man3/lgamma.3:56 build/C/man3/log.3:63 build/C/man3/log10.3:63 build/C/man3/log1p.3:66 build/C/man3/logb.3:64 build/C/man3/modf.3:61 build/C/man3/nextafter.3:54 build/C/man3/pow.3:62 build/C/man3/remainder.3:80 build/C/man3/rint.3:81 build/C/man3/scalbln.3:71 build/C/man3/sin.3:62 build/C/man3/sinh.3:63 build/C/man3/sqrt.3:61 build/C/man3/tan.3:62 build/C/man3/tanh.3:62
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600 || "
"_ISOC99_SOURCE || _POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:73
msgid ""
"The B<acos>()  function calculates the arc cosine of I<x>; that is the value "
"whose cosine is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:77
msgid ""
"On success, these functions return the arc cosine of I<x> in radians; the "
"return value is in the range [0,\\ pi]."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:81 build/C/man3/acosh.3:91 build/C/man3/asin.3:82 build/C/man3/asinh.3:91 build/C/man3/atan.3:82 build/C/man3/atanh.3:91 build/C/man3/cos.3:82 build/C/man3/cosh.3:86 build/C/man3/erf.3:91 build/C/man3/erfc.3:79 build/C/man3/exp.3:82 build/C/man3/expm1.3:96 build/C/man3/fabs.3:75 build/C/man3/j0.3:129 build/C/man3/ldexp.3:87 build/C/man3/lgamma.3:102 build/C/man3/log.3:81 build/C/man3/log1p.3:91 build/C/man3/logb.3:102 build/C/man3/scalbln.3:106 build/C/man3/sin.3:83 build/C/man3/sinh.3:86 build/C/man3/sqrt.3:78 build/C/man3/tan.3:83 build/C/man3/tanh.3:85 build/C/man3/tgamma.3:73 build/C/man3/y0.3:134
msgid "If I<x> is a NaN, a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:86 build/C/man3/acosh.3:95
msgid "If I<x> is +1, +0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:92 build/C/man3/cos.3:88 build/C/man3/sin.3:92 build/C/man3/tan.3:89
msgid ""
"If I<x> is positive infinity or negative infinity, a domain error occurs, "
"and a NaN is returned."
msgstr ""

#
#.  POSIX.1-2001 documents an optional range error for subnormal x;
#.  glibc 2.8 does not do this.
#. type: Plain text
#: build/C/man3/acos.3:98 build/C/man3/asin.3:96
msgid ""
"If I<x> is outside the range [-1,\\ 1], a domain error occurs, and a NaN is "
"returned."
msgstr ""

#. type: SH
#: build/C/man3/acos.3:98 build/C/man3/acosh.3:105 build/C/man3/asin.3:96 build/C/man3/asinh.3:103 build/C/man3/atan.3:94 build/C/man3/atan2.3:162 build/C/man3/atanh.3:115 build/C/man3/cbrt.3:88 build/C/man3/ceil.3:78 build/C/man3/copysign.3:93 build/C/man3/cos.3:88 build/C/man3/cosh.3:104 build/C/man3/erf.3:106 build/C/man3/erfc.3:102 build/C/man3/exp.3:105 build/C/man3/exp10.3:65 build/C/man3/exp2.3:81 build/C/man3/expm1.3:117 build/C/man3/fabs.3:83 build/C/man3/fdim.3:59 build/C/man3/floor.3:77 build/C/man3/fma.3:117 build/C/man3/fmax.3:54 build/C/man3/fmin.3:54 build/C/man3/fmod.3:120 build/C/man3/frexp.3:106 build/C/man3/gamma.3:62 build/C/man3/hypot.3:128 build/C/man3/ilogb.3:110 build/C/man3/infnan.3:76 build/C/man3/isgreater.3:123 build/C/man3/j0.3:136 build/C/man3/ldexp.3:106 build/C/man3/lgamma.3:132 build/C/man3/log.3:105 build/C/man3/log10.3:81 build/C/man3/log1p.3:113 build/C/man3/log2.3:81 build/C/man3/logb.3:116 build/C/man3/lrint.3:88 build/C/man3/lround.3:91 build/C/man3/modf.3:93 build/C/man3/nextafter.3:149 build/C/man3/pow.3:256 build/C/man3/remainder.3:150 build/C/man3/remquo.3:101 build/C/man3/rint.3:119 build/C/man3/round.3:83 build/C/man3/scalb.3:138 build/C/man3/scalbln.3:130 build/C/man3/signbit.3:59 build/C/man3/sin.3:92 build/C/man3/sincos.3:52 build/C/man3/sinh.3:109 build/C/man3/sqrt.3:92 build/C/man3/tan.3:107 build/C/man3/tanh.3:98 build/C/man3/tgamma.3:107 build/C/man3/trunc.3:71 build/C/man3/y0.3:171
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:103 build/C/man3/acosh.3:110 build/C/man3/asin.3:101 build/C/man3/atanh.3:120 build/C/man3/cos.3:93 build/C/man3/cosh.3:109 build/C/man3/erf.3:111 build/C/man3/erfc.3:107 build/C/man3/exp.3:110 build/C/man3/exp10.3:70 build/C/man3/exp2.3:86 build/C/man3/expm1.3:122 build/C/man3/fdim.3:64 build/C/man3/fma.3:122 build/C/man3/fmod.3:125 build/C/man3/hypot.3:133 build/C/man3/ilogb.3:115 build/C/man3/j0.3:141 build/C/man3/ldexp.3:111 build/C/man3/lgamma.3:137 build/C/man3/log.3:110 build/C/man3/log10.3:86 build/C/man3/log1p.3:118 build/C/man3/log2.3:86 build/C/man3/logb.3:121 build/C/man3/lrint.3:93 build/C/man3/lround.3:96 build/C/man3/nextafter.3:154 build/C/man3/pow.3:281 build/C/man3/remainder.3:155 build/C/man3/remquo.3:106 build/C/man3/scalb.3:143 build/C/man3/scalbln.3:135 build/C/man3/sin.3:97 build/C/man3/sincos.3:57 build/C/man3/sinh.3:114 build/C/man3/sqrt.3:97 build/C/man3/tan.3:112 build/C/man3/tgamma.3:112 build/C/man3/y0.3:176
msgid ""
"See B<math_error>(7)  for information on how to determine whether an error "
"has occurred when calling these functions."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:105 build/C/man3/acosh.3:112 build/C/man3/asin.3:103 build/C/man3/atanh.3:122 build/C/man3/cos.3:95 build/C/man3/cosh.3:111 build/C/man3/erf.3:113 build/C/man3/erfc.3:109 build/C/man3/exp.3:112 build/C/man3/expm1.3:124 build/C/man3/fdim.3:66 build/C/man3/fma.3:124 build/C/man3/fmod.3:127 build/C/man3/hypot.3:135 build/C/man3/ilogb.3:117 build/C/man3/j0.3:143 build/C/man3/ldexp.3:113 build/C/man3/lgamma.3:139 build/C/man3/log.3:112 build/C/man3/log1p.3:120 build/C/man3/logb.3:123 build/C/man3/lrint.3:95 build/C/man3/lround.3:98 build/C/man3/nextafter.3:156 build/C/man3/pow.3:283 build/C/man3/remainder.3:157 build/C/man3/remquo.3:108 build/C/man3/scalb.3:145 build/C/man3/scalbln.3:137 build/C/man3/sin.3:99 build/C/man3/sincos.3:59 build/C/man3/sinh.3:116 build/C/man3/sqrt.3:99 build/C/man3/tan.3:114 build/C/man3/tgamma.3:114 build/C/man3/y0.3:178
msgid "The following errors can occur:"
msgstr ""

#. type: TP
#: build/C/man3/acos.3:105 build/C/man3/asin.3:103
#, no-wrap
msgid "Domain error: I<x> is outside the range [-1,\\ 1]"
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:113 build/C/man3/acosh.3:120 build/C/man3/asin.3:111 build/C/man3/atanh.3:130 build/C/man3/fmod.3:146 build/C/man3/log.3:120 build/C/man3/pow.3:291 build/C/man3/remainder.3:180 build/C/man3/sqrt.3:107 build/C/man3/y0.3:186
msgid ""
"I<errno> is set to B<EDOM>.  An invalid floating-point exception "
"(B<FE_INVALID>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:119 build/C/man3/acosh.3:126 build/C/man3/asin.3:117 build/C/man3/asinh.3:119 build/C/man3/atan.3:110 build/C/man3/atan2.3:172 build/C/man3/atanh.3:145 build/C/man3/ceil.3:95 build/C/man3/exp.3:134 build/C/man3/exp2.3:97 build/C/man3/fabs.3:99 build/C/man3/floor.3:94 build/C/man3/fmod.3:152 build/C/man3/frexp.3:122 build/C/man3/ldexp.3:143 build/C/man3/log.3:134 build/C/man3/log10.3:95 build/C/man3/modf.3:109 build/C/man3/pow.3:322 build/C/man3/sin.3:122 build/C/man3/sinh.3:130 build/C/man3/sqrt.3:113 build/C/man3/tan.3:147 build/C/man3/tanh.3:114
msgid ""
"C99, POSIX.1-2001.  The variant returning I<double> also conforms to SVr4, "
"4.3BSD, C89."
msgstr ""

#. type: Plain text
#: build/C/man3/acos.3:127
msgid ""
"B<asin>(3), B<atan>(3), B<atan2>(3), B<cacos>(3), B<cos>(3), B<sin>(3), "
"B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/acosh.3:35
#, no-wrap
msgid "ACOSH"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:38
msgid "acosh, acoshf, acoshl - inverse hyperbolic cosine function"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:43
#, no-wrap
msgid "B<double acosh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:45
#, no-wrap
msgid "B<float acoshf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:47
#, no-wrap
msgid "B<long double acoshl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:58
msgid "B<acosh>():"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:62 build/C/man3/asinh.3:62 build/C/man3/atanh.3:62 build/C/man3/cbrt.3:58 build/C/man3/expm1.3:57 build/C/man3/ilogb.3:55 build/C/man3/log1p.3:56 build/C/man3/logb.3:54 build/C/man3/nextafter.3:44 build/C/man3/rint.3:71
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 500 || "
"_XOPEN_SOURCE\\ &&\\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE || "
"_POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:69
msgid "B<acoshf>(), B<acoshl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:84
msgid ""
"The B<acosh>()  function calculates the inverse hyperbolic cosine of I<x>; "
"that is the value whose hyperbolic cosine is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:87
msgid "On success, these functions return the inverse hyperbolic cosine of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:99 build/C/man3/exp.3:87 build/C/man3/expm1.3:105 build/C/man3/log.3:90 build/C/man3/log1p.3:95 build/C/man3/sqrt.3:86 build/C/man3/tgamma.3:77
msgid "If I<x> is positive infinity, positive infinity is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:105
msgid ""
"If I<x> is less than 1, a domain error occurs, and the functions return a "
"NaN."
msgstr ""

#. type: TP
#: build/C/man3/acosh.3:112
#, no-wrap
msgid "Domain error: I<x> is less than 1"
msgstr ""

#. type: Plain text
#: build/C/man3/acosh.3:133
msgid "B<asinh>(3), B<atanh>(3), B<cacosh>(3), B<cosh>(3), B<sinh>(3), B<tanh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/asin.3:35
#, no-wrap
msgid "ASIN"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:38
msgid "asin, asinf, asinl - arc sine function"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:43
#, no-wrap
msgid "B<double asin(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:45
#, no-wrap
msgid "B<float asinf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:47
#, no-wrap
msgid "B<long double asinl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:59
msgid "B<asinf>(), B<asinl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:74
msgid ""
"The B<asin>()  function calculates the principal value of the arc sine of "
"I<x>; that is the value whose sine is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:78
msgid ""
"On success, these functions return the principal value of the arc sine of "
"I<x> in radians; the return value is in the range [-pi/2,\\ pi/2]."
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:87 build/C/man3/asinh.3:95 build/C/man3/atan.3:87 build/C/man3/atanh.3:95 build/C/man3/erf.3:95 build/C/man3/expm1.3:101 build/C/man3/scalbln.3:115 build/C/man3/sinh.3:90 build/C/man3/sqrt.3:82 build/C/man3/tanh.3:89
msgid "If I<x> is +0 (-0), +0 (-0) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/asin.3:125
msgid ""
"B<acos>(3), B<atan>(3), B<atan2>(3), B<casin>(3), B<cos>(3), B<sin>(3), "
"B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/asinh.3:35
#, no-wrap
msgid "ASINH"
msgstr ""

#. type: TH
#: build/C/man3/asinh.3:35 build/C/man3/copysign.3:31 build/C/man3/cos.3:34 build/C/man3/expm1.3:30
#, no-wrap
msgid "2013-10-14"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:38
msgid "asinh, asinhf, asinhl - inverse hyperbolic sine function"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:43
#, no-wrap
msgid "B<double asinh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:45
#, no-wrap
msgid "B<float asinhf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:47
#, no-wrap
msgid "B<long double asinhl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:58
msgid "B<asinh>():"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:69
msgid "B<asinhf>(), B<asinhl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:84
msgid ""
"The B<asinh>()  function calculates the inverse hyperbolic sine of I<x>; "
"that is the value whose hyperbolic sine is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:87
msgid "On success, these functions return the inverse hyperbolic sine of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:103 build/C/man3/ldexp.3:92 build/C/man3/scalbln.3:111 build/C/man3/sinh.3:95
msgid ""
"If I<x> is positive infinity (negative infinity), positive infinity "
"(negative infinity) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:105 build/C/man3/atan.3:96 build/C/man3/atan2.3:166 build/C/man3/cbrt.3:90 build/C/man3/copysign.3:95 build/C/man3/fabs.3:85 build/C/man3/fmax.3:56 build/C/man3/fmin.3:56 build/C/man3/frexp.3:108 build/C/man3/isgreater.3:125 build/C/man3/modf.3:95 build/C/man3/signbit.3:61 build/C/man3/tanh.3:100 build/C/man3/trunc.3:73
msgid "No errors occur."
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:113
msgid "The B<asinh>(), B<asinhf>(), and B<asinhl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/asinh.3:126
msgid "B<acosh>(3), B<atanh>(3), B<casinh>(3), B<cosh>(3), B<sinh>(3), B<tanh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atan.3:35
#, no-wrap
msgid "ATAN"
msgstr ""

#. type: TH
#: build/C/man3/atan.3:35
#, no-wrap
msgid "2013-10-07"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:38
msgid "atan, atanf, atanl - arc tangent function"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:43
#, no-wrap
msgid "B<double atan(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:45
#, no-wrap
msgid "B<float atanf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:47
#, no-wrap
msgid "B<long double atanl( long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:59
msgid "B<atanf>(), B<atanl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:74
msgid ""
"The B<atan>()  function calculates the principal value of the arc tangent of "
"I<x>; that is the value whose tangent is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:78
msgid ""
"On success, these functions return the principal value of the arc tangent of "
"I<x> in radians; the return value is in the range [-pi/2,\\ pi/2]."
msgstr ""

#
#.  POSIX.1-2001 documents an optional range error for subnormal x;
#.  glibc 2.8 does not do this.
#. type: Plain text
#: build/C/man3/atan.3:94
msgid "If I<x> is positive infinity (negative infinity), +pi/2 (-pi/2) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:104
msgid "The B<atan>(), B<atanf>(), and B<atanl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/atan.3:119
msgid ""
"B<acos>(3), B<asin>(3), B<atan2>(3), B<carg>(3), B<catan>(3), B<cos>(3), "
"B<sin>(3), B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atan2.3:35
#, no-wrap
msgid "ATAN2"
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:38
msgid "atan2, atan2f, atan2l - arc tangent function of two variables"
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:45
#, no-wrap
msgid ""
"B<double atan2(double >I<y>B<, double >I<x>B<);>\n"
"B<float atan2f(float >I<y>B<, float >I<x>B<);>\n"
"B<long double atan2l(long double >I<y>B<, long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:57
msgid "B<atan2f>(), B<atan2l>():"
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:72
msgid ""
"The B<atan2>()  function calculates the principal value of the arc tangent "
"of I<y/x>, using the signs of the two arguments to determine the quadrant of "
"the result."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:76
msgid ""
"On success, these functions return the principal value of the arc tangent of "
"I<y/x> in radians; the return value is in the range [-pi,\\ pi]."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:82
msgid "If I<y> is +0 (-0) and I<x> is less than 0, +pi (-pi) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:88
msgid "If I<y> is +0 (-0) and I<x> is greater than 0, +0 (-0) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:94
msgid "If I<y> is less than 0 and I<x> is +0 or -0, -pi/2 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:100
msgid "If I<y> is greater than 0 and I<x> is +0 or -0, pi/2 is returned."
msgstr ""

#.  POSIX.1 says:
#.  If
#.  .I x
#.  is 0, a pole error shall not occur.
#. type: Plain text
#: build/C/man3/atan2.3:111
msgid "If either I<x> or I<y> is NaN, a NaN is returned."
msgstr ""

#.  POSIX.1 says:
#.  If the result underflows, a range error may occur and
#.  .I y/x
#.  should be returned.
#. type: Plain text
#: build/C/man3/atan2.3:122
msgid "If I<y> is +0 (-0) and I<x> is -0, +pi (-pi) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:128
msgid "If I<y> is +0 (-0) and I<x> is +0, +0 (-0) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:134
msgid ""
"If I<y> is a finite value greater (less) than 0, and I<x> is negative "
"infinity, +pi (-pi) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:140
msgid ""
"If I<y> is a finite value greater (less) than 0, and I<x> is positive "
"infinity, +0 (-0) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:147
msgid ""
"If I<y> is positive infinity (negative infinity), and I<x> is finite, pi/2 "
"(-pi/2) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:153
msgid ""
"If I<y> is positive infinity (negative infinity) and I<x> is negative "
"infinity, +3*pi/4 (-3*pi/4) is returned."
msgstr ""

#
#.  POSIX.1 says:
#.  If both arguments are 0, a domain error shall not occur.
#. type: Plain text
#: build/C/man3/atan2.3:162
msgid ""
"If I<y> is positive infinity (negative infinity) and I<x> is positive "
"infinity, +pi/4 (-pi/4) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/atan2.3:180
msgid ""
"B<acos>(3), B<asin>(3), B<atan>(3), B<carg>(3), B<cos>(3), B<sin>(3), "
"B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atanh.3:35
#, no-wrap
msgid "ATANH"
msgstr ""

#. type: TH
#: build/C/man3/atanh.3:35
#, no-wrap
msgid "2010-09-11"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:38
msgid "atanh, atanhf, atanhl - inverse hyperbolic tangent function"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:43
#, no-wrap
msgid "B<double atanh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:45
#, no-wrap
msgid "B<float atanhf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:47
#, no-wrap
msgid "B<long double atanhl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:58
msgid "B<atanh>():"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:69
msgid "B<atanhf>(), B<atanhl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:84
msgid ""
"The B<atanh>()  function calculates the inverse hyperbolic tangent of I<x>; "
"that is the value whose hyperbolic tangent is I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:87
msgid "On success, these functions return the inverse hyperbolic tangent of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:106
msgid ""
"If I<x> is +1 or -1, a pole error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with the "
"mathematically correct sign."
msgstr ""

#
#.  POSIX.1-2001 documents an optional range error for subnormal x;
#.  glibc 2.8 does not do this.
#. type: Plain text
#: build/C/man3/atanh.3:115
msgid ""
"If the absolute value of I<x> is greater than 1, a domain error occurs, and "
"a NaN is returned."
msgstr ""

#. type: TP
#: build/C/man3/atanh.3:122
#, no-wrap
msgid "Domain error: I<x> less than -1 or greater than +1"
msgstr ""

#. type: TP
#: build/C/man3/atanh.3:130
#, no-wrap
msgid "Pole error: I<x> is +1 or -1"
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:139 build/C/man3/lgamma.3:148 build/C/man3/pow.3:300
msgid ""
"I<errno> is set to B<ERANGE> (but see BUGS).  A divide-by-zero "
"floating-point exception (B<FE_DIVBYZERO>)  is raised."
msgstr ""

#. type: SH
#: build/C/man3/atanh.3:145 build/C/man3/cos.3:118 build/C/man3/cosh.3:125 build/C/man3/expm1.3:147 build/C/man3/fenv.3:331 build/C/man3/fmod.3:152 build/C/man3/j0.3:163 build/C/man3/lgamma.3:167 build/C/man3/log.3:134 build/C/man3/nextafter.3:194 build/C/man3/pow.3:322 build/C/man3/remainder.3:204 build/C/man3/sin.3:122 build/C/man3/tan.3:147 build/C/man3/tgamma.3:171 build/C/man3/y0.3:236
#, no-wrap
msgid "BUGS"
msgstr ""

#.  Bug: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6759
#.  This can be seen in sysdeps/ieee754/k_standard.c
#. type: Plain text
#: build/C/man3/atanh.3:156
msgid ""
"In glibc 2.9 and earlier, when a pole error occurs, I<errno> as set to "
"B<EDOM> instead of the POSIX-mandated B<ERANGE>.  Since version 2.10, glibc "
"does the right thing."
msgstr ""

#. type: Plain text
#: build/C/man3/atanh.3:163
msgid "B<acosh>(3), B<asinh>(3), B<catanh>(3), B<cosh>(3), B<sinh>(3), B<tanh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/cbrt.3:30
#, no-wrap
msgid "CBRT"
msgstr ""

#. type: TH
#: build/C/man3/cbrt.3:30
#, no-wrap
msgid "2013-09-18"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:33
msgid "cbrt, cbrtf, cbrtl - cube root function"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:38
#, no-wrap
msgid "B<double cbrt(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:40
#, no-wrap
msgid "B<float cbrtf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:42
#, no-wrap
msgid "B<long double cbrtl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:53
msgid "B<cbrt>():"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:64
msgid "B<cbrtf>(), B<cbrtl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:67
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600 || "
"_ISOC99_SOURCE || _POSIX_C_SOUCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:79
msgid ""
"The B<cbrt>()  function returns the (real) cube root of I<x>.  This function "
"cannot fail; every representable real value has a representable real cube "
"root."
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:82
msgid "These functions return the cube root of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:88
msgid ""
"If I<x> is +0, -0, positive infinity, negative infinity, or NaN, I<x> is "
"returned."
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:98
msgid "The B<cbrt>(), B<cbrtf>(), and B<cbrtl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:102 build/C/man3/expm1.3:147 build/C/man3/fdim.3:91 build/C/man3/fma.3:166 build/C/man3/fmax.3:68 build/C/man3/fmin.3:68 build/C/man3/ilogb.3:156 build/C/man3/isgreater.3:138 build/C/man3/log1p.3:153 build/C/man3/logb.3:153 build/C/man3/lrint.3:123 build/C/man3/lround.3:126 build/C/man3/remquo.3:126 build/C/man3/rint.3:135 build/C/man3/round.3:98 build/C/man3/scalbln.3:173 build/C/man3/tgamma.3:164 build/C/man3/trunc.3:85
msgid "C99, POSIX.1-2001."
msgstr ""

#. type: Plain text
#: build/C/man3/cbrt.3:105
msgid "B<pow>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/ceil.3:27
#, no-wrap
msgid "CEIL"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:31
msgid ""
"ceil, ceilf, ceill - ceiling function: smallest integral value not less than "
"argument"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:36
#, no-wrap
msgid "B<double ceil(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:38
#, no-wrap
msgid "B<float ceilf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:40
#, no-wrap
msgid "B<long double ceill(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:52
msgid "B<ceilf>(), B<ceill>():"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:63
msgid ""
"These functions return the smallest integral value that is not less than "
"I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:69
msgid "For example, I<ceil(0.5)> is 1.0, and I<ceil(-0.5)> is 0.0."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:72
msgid "These functions return the ceiling of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:78 build/C/man3/rint.3:119 build/C/man3/round.3:83
msgid "If I<x> is integral, +0, -0, NaN, or infinite, I<x> itself is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:81 build/C/man3/floor.3:80 build/C/man3/rint.3:122 build/C/man3/round.3:86
msgid ""
"No errors occur.  POSIX.1-2001 documents a range error for overflows, but "
"see NOTES."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:89
msgid "The B<ceil>(), B<ceilf>(), and B<ceill>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:111 build/C/man3/floor.3:110 build/C/man3/rint.3:150
msgid ""
"SUSv2 and POSIX.1-2001 contain text about overflow (which might set I<errno> "
"to B<ERANGE>, or raise an B<FE_OVERFLOW> exception).  In practice, the "
"result cannot overflow on any current machine, so this error-handling stuff "
"is just nonsense.  (More precisely, overflow can happen only when the "
"maximum value of the exponent is smaller than the number of mantissa bits.  "
"For the IEEE-754 standard 32-bit and 64-bit floating-point numbers the "
"maximum value of the exponent is 128 (respectively, 1024), and the number of "
"mantissa bits is 24 (respectively, 53).)"
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:120 build/C/man3/trunc.3:94
msgid ""
"The integral value returned by these functions may be too large to store in "
"an integer type (I<int>, I<long>, etc.).  To avoid an overflow, which will "
"produce undefined results, an application should perform a range check on "
"the returned value before assigning it to an integer type."
msgstr ""

#. type: Plain text
#: build/C/man3/ceil.3:127
msgid ""
"B<floor>(3), B<lrint>(3), B<nearbyint>(3), B<rint>(3), B<round>(3), "
"B<trunc>(3)"
msgstr ""

#. type: TH
#: build/C/man3/copysign.3:31
#, no-wrap
msgid "COPYSIGN"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:34
msgid "copysign, copysignf, copysignl - copy sign of a number"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:39
#, no-wrap
msgid "B<double copysign(double >I<x>B<, double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:41
#, no-wrap
msgid "B<float copysignf(float >I<x>B<, float >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:43
#, no-wrap
msgid "B<long double copysignl(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:56
msgid "B<copysign>(), B<copysignf>(), B<copysignl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:59
msgid ""
"_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600 || "
"_ISOC99_SOURCE || _POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:75
msgid ""
"The B<copysign>(), B<copysignf>(), and B<copysignl>()  functions return a "
"value whose absolute value matches that of I<x>, but whose sign bit matches "
"that of I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:81
msgid ""
"For example, I<copysign(42.0,\\ -1.0)> and I<copysign(-42.0, -1.0)> both "
"return -42.0."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:86
msgid ""
"On success, these functions return a value whose magnitude is taken from "
"I<x> and whose sign is taken from I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:93
msgid "If I<x> is a NaN, a NaN with the sign bit of I<y> is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:103
msgid ""
"The B<copysign>(), B<copysignf>(), and B<copysignl>()  functions are "
"thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:108 build/C/man3/nextafter.3:194 build/C/man3/signbit.3:70
msgid ""
"C99, POSIX.1-2001.  This function is defined in IEC 559 (and the appendix "
"with recommended functions in IEEE 754/IEEE 854)."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:112
msgid ""
"On architectures where the floating-point formats are not IEEE 754 "
"compliant, these functions may treat a negative zero as positive."
msgstr ""

#. type: Plain text
#: build/C/man3/copysign.3:114
msgid "B<signbit>(3)"
msgstr ""

#. type: TH
#: build/C/man3/cos.3:34
#, no-wrap
msgid "COS"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:37
msgid "cos, cosf, cosl - cosine function"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:42
#, no-wrap
msgid "B<double cos(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:44
#, no-wrap
msgid "B<float cosf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:46
#, no-wrap
msgid "B<long double cosl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:58
msgid "B<cosf>(), B<cosl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:75
msgid ""
"The B<cos>()  function returns the cosine of I<x>, where I<x> is given in "
"radians."
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:78
msgid "On success, these functions return the cosine of I<x>."
msgstr ""

#. type: TP
#: build/C/man3/cos.3:95 build/C/man3/fmod.3:127 build/C/man3/ilogb.3:130 build/C/man3/sin.3:99 build/C/man3/sincos.3:59 build/C/man3/tan.3:114
#, no-wrap
msgid "Domain error: I<x> is an infinity"
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:104 build/C/man3/fmod.3:136 build/C/man3/sin.3:108 build/C/man3/tan.3:123
msgid ""
"I<errno> is set to B<EDOM> (but see BUGS).  An invalid floating-point "
"exception (B<FE_INVALID>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:112
msgid "The B<cos>(), B<cosf>(), and B<cosl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:118 build/C/man3/cosh.3:125 build/C/man3/erf.3:140 build/C/man3/erfc.3:136 build/C/man3/hypot.3:164 build/C/man3/log2.3:97
msgid ""
"C99, POSIX.1-2001.  The variant returning I<double> also conforms to SVr4, "
"4.3BSD."
msgstr ""

#.  http://sourceware.org/bugzilla/show_bug.cgi?id=6782
#. type: Plain text
#: build/C/man3/cos.3:125 build/C/man3/sin.3:129 build/C/man3/tan.3:154
msgid ""
"Before version 2.10, the glibc implementation did not set I<errno> to "
"B<EDOM> when a domain error occurred."
msgstr ""

#. type: Plain text
#: build/C/man3/cos.3:134
msgid ""
"B<acos>(3), B<asin>(3), B<atan>(3), B<atan2>(3), B<ccos>(3), B<sin>(3), "
"B<sincos>(3), B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/cosh.3:36
#, no-wrap
msgid "COSH"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:39
msgid "cosh, coshf, coshl - hyperbolic cosine function"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:44
#, no-wrap
msgid "B<double cosh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:46
#, no-wrap
msgid "B<float coshf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:48
#, no-wrap
msgid "B<long double coshl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:60
msgid "B<coshf>(), B<coshl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:75
msgid ""
"The B<cosh>()  function returns the hyperbolic cosine of I<x>, which is "
"defined mathematically as:"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:78
#, no-wrap
msgid "    cosh(x) = (exp(x) + exp(-x)) / 2\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:82
msgid "On success, these functions return the hyperbolic cosine of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:90 build/C/man3/erfc.3:83
msgid "If I<x> is +0 or -0, 1 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:95 build/C/man3/lgamma.3:111
msgid ""
"If I<x> is positive infinity or negative infinity, positive infinity is "
"returned."
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:104 build/C/man3/exp.3:105
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"+B<HUGE_VAL>, +B<HUGE_VALF>, or +B<HUGE_VALL>, respectively."
msgstr ""

#. type: TP
#: build/C/man3/cosh.3:111 build/C/man3/fdim.3:66 build/C/man3/fma.3:133 build/C/man3/hypot.3:135 build/C/man3/lgamma.3:148 build/C/man3/nextafter.3:156 build/C/man3/sinh.3:116 build/C/man3/tan.3:123 build/C/man3/tgamma.3:132 build/C/man3/y0.3:217
#, no-wrap
msgid "Range error: result overflow"
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:119 build/C/man3/exp.3:120 build/C/man3/hypot.3:143 build/C/man3/ldexp.3:121 build/C/man3/lgamma.3:158 build/C/man3/pow.3:308 build/C/man3/sinh.3:124 build/C/man3/tgamma.3:140
msgid ""
"I<errno> is set to B<ERANGE>.  An overflow floating-point exception "
"(B<FE_OVERFLOW>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:130
msgid ""
"In glibc version 2.3.4 and earlier, an overflow floating-point "
"(B<FE_OVERFLOW>)  exception is not raised when an overflow occurs."
msgstr ""

#. type: Plain text
#: build/C/man3/cosh.3:137
msgid "B<acosh>(3), B<asinh>(3), B<atanh>(3), B<ccos>(3), B<sinh>(3), B<tanh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/div.3:34
#, no-wrap
msgid "DIV"
msgstr ""

#. type: TH
#: build/C/man3/div.3:34
#, no-wrap
msgid "2013-07-05"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:38
msgid ""
"div, ldiv, lldiv, imaxdiv - compute quotient and remainder of an integer "
"division"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:43
#, no-wrap
msgid "B<div_t div(int >I<numerator>B<, int >I<denominator>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:45
#, no-wrap
msgid "B<ldiv_t ldiv(long >I<numerator>B<, long >I<denominator>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:47
#, no-wrap
msgid "B<lldiv_t lldiv(long long >I<numerator>B<, long long >I<denominator>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:51
#, no-wrap
msgid ""
"B<imaxdiv_t imaxdiv(intmax_t >I<numerator>B<, intmax_t "
">I<denominator>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:60
msgid "B<lldiv>():"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:78
msgid ""
"The B<div>()  function computes the value I<numerator>/I<denominator> and "
"returns the quotient and remainder in a structure named I<div_t> that "
"contains two integer members (in unspecified order) named I<quot> and "
"I<rem>.  The quotient is rounded toward zero.  The result satisfies "
"I<quot>*I<denominator>+I<rem> = I<numerator>."
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:89
msgid ""
"The B<ldiv>(), B<lldiv>(), and B<imaxdiv>()  functions do the same, dividing "
"numbers of the indicated type and returning the result in a structure of the "
"indicated name, in all cases with fields I<quot> and I<rem> of the same type "
"as the function arguments."
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:91
msgid "The I<div_t> (etc.) structure."
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:100
msgid ""
"The B<div>(), B<ldiv>(), B<lldiv>(), and B<imaxdiv>()  functions are "
"thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:107
msgid ""
"SVr4, 4.3BSD, C89. C99.  The functions B<lldiv>()  and B<imaxdiv>()  were "
"added in C99."
msgstr ""

#. type: SH
#: build/C/man3/div.3:107 build/C/man3/frexp.3:122 build/C/man3/matherr.3:275 build/C/man3/remainder.3:213
#, no-wrap
msgid "EXAMPLE"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:109
msgid "After"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:112
#, no-wrap
msgid "        div_t q = div(-5, 3);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:115
msgid "the values I<q.quot> and I<q.rem> are -1 and -2, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/div.3:118
msgid "B<abs>(3), B<remainder>(3)"
msgstr ""

#. type: TH
#: build/C/man3/erf.3:35
#, no-wrap
msgid "ERF"
msgstr ""

#. type: TH
#: build/C/man3/erf.3:35 build/C/man3/erfc.3:26
#, no-wrap
msgid "2013-10-29"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:38
msgid "erf, erff, erfl, - error function"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:45
#, no-wrap
msgid ""
"B<double erf(double >I<x>B<);>\n"
"B<float erff(float >I<x>B<);>\n"
"B<long double erfl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:56
msgid "B<erf>():"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:59 build/C/man3/erfc.3:50 build/C/man3/fpclassify.3:53 build/C/man3/hypot.3:59 build/C/man3/lgamma.3:46
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE || "
"_POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:66
msgid "B<erff>(), B<erfl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:81
msgid "The B<erf>()  function returns the error function of I<x>, defined as"
msgstr ""

#. type: TP
#: build/C/man3/erf.3:81
#, no-wrap
msgid "    erf(x) = 2/sqrt(pi)* integral from 0 to x of exp(-t*t) dt"
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:87
msgid ""
"On success, these functions return the error function of I<x>, a value in "
"the range [-1,\\ 1]."
msgstr ""

#
#.  POSIX.1-2001 documents an optional range error (underflow)
#.  for subnormal x;
#.  glibc 2.8 does not do this.
#. type: Plain text
#: build/C/man3/erf.3:100 build/C/man3/tanh.3:98
msgid "If I<x> is positive infinity (negative infinity), +1 (-1) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:106
msgid ""
"If I<x> is subnormal, a range error occurs, and the return value is "
"2*x/sqrt(pi)."
msgstr ""

#. type: TP
#: build/C/man3/erf.3:113
#, no-wrap
msgid "Range error: result underflow (I<x> is subnormal)"
msgstr ""

#.  e.g., tgamma(-172.5) on glibc 2.8/x86-32
#.  .I errno
#.  is set to
#.  .BR ERANGE .
#. type: Plain text
#: build/C/man3/erf.3:121 build/C/man3/erfc.3:117 build/C/man3/fma.3:149 build/C/man3/hypot.3:151 build/C/man3/nextafter.3:174 build/C/man3/scalb.3:171 build/C/man3/scalbln.3:153 build/C/man3/tgamma.3:152
msgid "An underflow floating-point exception (B<FE_UNDERFLOW>)  is raised."
msgstr ""

#.  FIXME . Is it intentional that these functions do not set errno?
#.  sin() and cos() also don't set errno; bugs have been raised for
#.  those functions.
#. type: Plain text
#: build/C/man3/erf.3:126 build/C/man3/erfc.3:122 build/C/man3/fdim.3:79 build/C/man3/fma.3:154 build/C/man3/log1p.3:142 build/C/man3/logb.3:143 build/C/man3/lrint.3:108 build/C/man3/lround.3:111 build/C/man3/nextafter.3:179 build/C/man3/remquo.3:122 build/C/man3/scalb.3:177 build/C/man3/scalbln.3:158 build/C/man3/sincos.3:73
msgid "These functions do not set I<errno>."
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:134
msgid "The B<erf>(), B<erff>(), and B<erfl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/erf.3:144
msgid "B<cerf>(3), B<erfc>(3), B<exp>(3)"
msgstr ""

#. type: TH
#: build/C/man3/erfc.3:26
#, no-wrap
msgid "ERFC"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:29
msgid "erfc, erfcf, erfcl - complementary error function"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:36
#, no-wrap
msgid ""
"B<double erfc(double >I<x>B<);>\n"
"B<float erfcf(float >I<x>B<);>\n"
"B<long double erfcl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:47
msgid "B<erfc>():"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:57
msgid "B<erfcf>(), B<erfcl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:60
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600|| _ISOC99_SOURCE "
"|| _POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:71
msgid ""
"The B<erfc>()  function returns the complementary error function of I<x>, "
"that is, 1.0 - erf(x)."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:75
msgid ""
"On success, these functions return the complementary error function of I<x>, "
"a value in the range [0,2]."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:88
msgid "If I<x> is positive infinity, +0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:93
msgid "If I<x> is negative infinity, +2 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:96
msgid ""
"If the function result underflows and produces an unrepresentable value, the "
"return value is 0.0."
msgstr ""

#.  e.g., erfc(27) on x86-32
#. type: Plain text
#: build/C/man3/erfc.3:102
msgid ""
"If the function result underflows but produces a representable (i.e., "
"subnormal) value, that value is returned, and a range error occurs."
msgstr ""

#. type: TP
#: build/C/man3/erfc.3:109
#, no-wrap
msgid "Range error: result underflow (result is subnormal)"
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:130
msgid "The B<erfc>(), B<erfcf>(), and B<erfcl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:146
msgid ""
"The B<erfc>(), B<erfcf>(), and B<erfcl>()  functions are provided to avoid "
"the loss accuracy that would occur for the calculation 1-erf(x) for large "
"values of I<x> (for which the value of erf(x) approaches 1)."
msgstr ""

#. type: Plain text
#: build/C/man3/erfc.3:150
msgid "B<cerf>(3), B<erf>(3), B<exp>(3)"
msgstr ""

#. type: TH
#: build/C/man3/exp.3:36
#, no-wrap
msgid "EXP"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:39
msgid "exp, expf, expl - base-e exponential function"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:44
#, no-wrap
msgid "B<double exp(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:46
#, no-wrap
msgid "B<float expf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:48
#, no-wrap
msgid "B<long double expl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:60
msgid "B<expf>(), B<expl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:74
msgid ""
"The B<exp>()  function returns the value of e (the base of natural "
"logarithms) raised to the power of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:77
msgid "On success, these functions return the exponential value of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:92
msgid "If I<x> is negative infinity, +0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:96 build/C/man3/ldexp.3:96
msgid "If the result underflows, a range error occurs, and zero is returned."
msgstr ""

#. type: TP
#: build/C/man3/exp.3:112 build/C/man3/expm1.3:124 build/C/man3/ldexp.3:113 build/C/man3/scalb.3:155 build/C/man3/scalbln.3:137
#, no-wrap
msgid "Range error, overflow"
msgstr ""

#. type: TP
#: build/C/man3/exp.3:120 build/C/man3/ldexp.3:121 build/C/man3/scalb.3:163 build/C/man3/scalbln.3:145
#, no-wrap
msgid "Range error, underflow"
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:128 build/C/man3/ldexp.3:129 build/C/man3/pow.3:316
msgid ""
"I<errno> is set to B<ERANGE>.  An underflow floating-point exception "
"(B<FE_UNDERFLOW>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/exp.3:140
msgid "B<cbrt>(3), B<cexp>(3), B<exp10>(3), B<exp2>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/exp10.3:35
#, no-wrap
msgid "EXP10"
msgstr ""

#. type: TH
#: build/C/man3/exp10.3:35 build/C/man7/math_error.7:26 build/C/man3/pow10.3:25
#, no-wrap
msgid "2008-08-11"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:38
msgid "exp10, exp10f, exp10l - base-10 exponential function"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:41 build/C/man3/fenv.3:309
#, no-wrap
msgid "B<#define _GNU_SOURCE>         /* See feature_test_macros(7) */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:45
#, no-wrap
msgid "B<double exp10(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:47
#, no-wrap
msgid "B<float exp10f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:49
#, no-wrap
msgid "B<long double exp10l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:58
msgid ""
"The B<exp10>()  function returns the value of 10 raised to the power of "
"I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:61
msgid "On success, these functions return the base-10 exponential value of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:65 build/C/man3/exp2.3:81
msgid ""
"For various special cases, including the handling of infinity and NaN, as "
"well as overflows and underflows, see B<exp>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:75 build/C/man3/exp2.3:89
msgid ""
"For a discussion of the errors that can occur for these functions, see "
"B<exp>(3)."
msgstr ""

#. type: SH
#: build/C/man3/exp10.3:75 build/C/man3/exp2.3:89 build/C/man3/fdim.3:79 build/C/man3/fenv.3:263 build/C/man3/fma.3:154 build/C/man3/fmax.3:56 build/C/man3/fmin.3:56 build/C/man3/log2.3:89 build/C/man3/lrint.3:108 build/C/man3/lround.3:111 build/C/man3/nan.3:73 build/C/man3/pow10.3:47 build/C/man3/remquo.3:122 build/C/man3/round.3:86 build/C/man3/scalbln.3:158 build/C/man3/sincos.3:73 build/C/man3/tgamma.3:160 build/C/man3/trunc.3:73
#, no-wrap
msgid "VERSIONS"
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:77 build/C/man3/exp2.3:91 build/C/man3/fdim.3:81 build/C/man3/fenv.3:265 build/C/man3/fma.3:156 build/C/man3/fmax.3:58 build/C/man3/fmin.3:58 build/C/man3/log2.3:91 build/C/man3/lrint.3:110 build/C/man3/lround.3:113 build/C/man3/nan.3:75 build/C/man3/pow10.3:49 build/C/man3/remquo.3:124 build/C/man3/round.3:88 build/C/man3/scalbln.3:160 build/C/man3/sincos.3:75 build/C/man3/tgamma.3:162 build/C/man3/trunc.3:75
msgid "These functions first appeared in glibc in version 2.1."
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:79
msgid "These functions are GNU extensions."
msgstr ""

#. type: Plain text
#: build/C/man3/exp10.3:85
msgid "B<cbrt>(3), B<exp>(3), B<exp2>(3), B<log10>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/exp2.3:36
#, no-wrap
msgid "EXP2"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:39
msgid "exp2, exp2f, exp2l - base-2 exponential function"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:44
#, no-wrap
msgid "B<double exp2(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:46
#, no-wrap
msgid "B<float exp2f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:48
#, no-wrap
msgid "B<long double exp2l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:61
msgid "B<exp2>(), B<exp2f>(), B<exp2l>():"
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:74
msgid "The B<exp2>()  function returns the value of 2 raised to the power of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:77
msgid "On success, these functions return the base-2 exponential value of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/exp2.3:103
msgid "B<cbrt>(3), B<cexp2>(3), B<exp>(3), B<exp10>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/expm1.3:30
#, no-wrap
msgid "EXPM1"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:33
msgid "expm1, expm1f, expm1l - exponential minus 1"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:38
#, no-wrap
msgid "B<double expm1(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:40
#, no-wrap
msgid "B<float expm1f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:42
#, no-wrap
msgid "B<long double expm1l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:53
msgid "B<expm1>():"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:64
msgid "B<expm1f>(), B<expm1l>():"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:75
msgid "I<expm1(x)> returns a value equivalent to"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:78
#, no-wrap
msgid "    exp(x) - 1\n"
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:88
msgid ""
"It is computed in a way that is accurate even if the value of I<x> is near "
"zero\\(ema case where I<exp(x) - 1> would be inaccurate due to subtraction "
"of two numbers that are nearly equal."
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:91
msgid "On success, these functions return I<exp(x)\\ -\\ 1>."
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:109
msgid "If I<x> is negative infinity, -1 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:117
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"-B<HUGE_VAL>, -B<HUGE_VALF>, or -B<HUGE_VALL>, respectively."
msgstr ""

#
#.  POSIX.1 specifies an optional range error (underflow) if
#.  x is subnormal.  Glibc does not implement this.
#. type: Plain text
#: build/C/man3/expm1.3:136
msgid ""
"I<errno> is set to B<ERANGE> (but see BUGS).  An overflow floating-point "
"exception (B<FE_OVERFLOW>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:144
msgid "The B<expm1>(), B<expm1f>(), and B<expm1l>()  functions are thread-safe."
msgstr ""

#.  FIXME .
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6778
#. type: Plain text
#: build/C/man3/expm1.3:155
msgid ""
"For some large negative I<x> values (where the function result approaches "
"-1), B<expm1>()  raises a bogus underflow floating-point exception."
msgstr ""

#.  FIXME .
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6814
#.  e.g., expm1(1e5) through expm1(1.00199970127e5),
#.  but not expm1(1.00199970128e5) and beyond.
#. type: Plain text
#: build/C/man3/expm1.3:166
msgid ""
"For some large positive I<x> values, B<expm1>()  raises a bogus invalid "
"floating-point exception in addition to the expected overflow exception, and "
"returns a NaN instead of positive infinity."
msgstr ""

#.  It looks like the fix was in 2.11, or possibly 2.12.
#.  I have no test system for 2.11, but 2.12 passes.
#.  From the source (sysdeps/i386/fpu/s_expm1.S) it looks
#.  like the changes were in 2.11.
#.  http://sources.redhat.com/bugzilla/show_bug.cgi?id=6788
#. type: Plain text
#: build/C/man3/expm1.3:178
msgid ""
"Before version 2.11, the glibc implementation did not set I<errno> to "
"B<ERANGE> when a range error occurred."
msgstr ""

#. type: Plain text
#: build/C/man3/expm1.3:182
msgid "B<exp>(3), B<log>(3), B<log1p>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fabs.3:32
#, no-wrap
msgid "FABS"
msgstr ""

#. type: TH
#: build/C/man3/fabs.3:32
#, no-wrap
msgid "2013-07-10"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:35
msgid "fabs, fabsf, fabsl - absolute value of floating-point number"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:40
#, no-wrap
msgid "B<double fabs(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:42
#, no-wrap
msgid "B<float fabsf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:44
#, no-wrap
msgid "B<long double fabsl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:56
msgid "B<fabsf>(), B<fabsl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:68
msgid "These functions return the absolute value of the floating-point number I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:71
msgid "These functions return the absolute value of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:79
msgid "If I<x> is -0, +0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:83
msgid ""
"If I<x> is negative infinity or positive infinity, positive infinity is "
"returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:93
msgid "The B<fabs>(), B<fabsf>(), and B<fabsl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fabs.3:106
msgid "B<abs>(3), B<cabs>(3), B<ceil>(3), B<floor>(3), B<labs>(3), B<rint>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fdim.3:9
#, no-wrap
msgid "FDIM"
msgstr ""

#. type: TH
#: build/C/man3/fdim.3:9
#, no-wrap
msgid "2013-07-15"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:12
msgid "fdim, fdimf, fdiml - positive difference"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:14 build/C/man3/fmax.3:14 build/C/man3/fmin.3:14 build/C/man3/gamma.3:14 build/C/man3/ilogb.3:34 build/C/man3/logb.3:34 build/C/man3/nan.3:16 build/C/man3/nextafter.3:17 build/C/man3/scalb.3:33 build/C/man3/scalbln.3:33 build/C/man3/signbit.3:16 build/C/man3/significand.3:15 build/C/man3/tgamma.3:18
msgid "B<#include E<lt>math.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:16
msgid "B<double fdim(double >I<x>B<, double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:18
msgid "B<float fdimf(float >I<x>B<, float >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:20
msgid "B<long double fdiml(long double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:31
msgid "B<fdimf>(), B<fdiml>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:42
msgid ""
"These functions return the positive difference, max(I<x>-I<y>,0), between "
"their arguments."
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:44
msgid "On success, these functions return the positive difference."
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:50 build/C/man3/fma.3:63 build/C/man3/fmod.3:102 build/C/man3/nextafter.3:127 build/C/man3/remainder.3:130 build/C/man3/remquo.3:83
msgid "If I<x> or I<y> is a NaN, a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:59 build/C/man3/hypot.3:122
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively."
msgstr ""

#.  Unable to test this case, since the best approximation of
#.  pi/2 in double precision only yields a tan() value of 1.633e16.
#.  .I errno
#.  is set to
#.  .BR ERANGE .
#. type: Plain text
#: build/C/man3/fdim.3:74 build/C/man3/fma.3:141 build/C/man3/nextafter.3:165 build/C/man3/scalb.3:163 build/C/man3/scalbln.3:145 build/C/man3/tan.3:133
msgid "An overflow floating-point exception (B<FE_OVERFLOW>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:89
msgid "The B<fdim>(), B<fdimf>(), and B<fdiml>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fdim.3:93 build/C/man3/fmin.3:70
msgid "B<fmax>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fenv.3:27
#, no-wrap
msgid "FENV"
msgstr ""

#. type: TH
#: build/C/man3/fenv.3:27
#, no-wrap
msgid "2014-04-01"
msgstr ""

#. type: TH
#: build/C/man3/fenv.3:27 build/C/man7/math_error.7:26 build/C/man3/matherr.3:27
#, no-wrap
msgid "Linux"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:33
msgid ""
"feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag, "
"fetestexcept, fegetenv, fegetround, feholdexcept, fesetround, fesetenv, "
"feupdateenv, feenableexcept, fedisableexcept, fegetexcept - floating-point "
"rounding and exception handling"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:36 build/C/man3/fenv.3:311
#, no-wrap
msgid "B<#include E<lt>fenv.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:38
#, no-wrap
msgid "B<int feclearexcept(int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:40
#, no-wrap
msgid "B<int fegetexceptflag(fexcept_t *>I<flagp>B<, int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:42
#, no-wrap
msgid "B<int feraiseexcept(int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:44
#, no-wrap
msgid "B<int fesetexceptflag(const fexcept_t *>I<flagp>B<, int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:46
#, no-wrap
msgid "B<int fetestexcept(int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:48
#, no-wrap
msgid "B<int fegetround(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:50
#, no-wrap
msgid "B<int fesetround(int >I<rounding_mode>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:52
#, no-wrap
msgid "B<int fegetenv(fenv_t *>I<envp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:54
#, no-wrap
msgid "B<int feholdexcept(fenv_t *>I<envp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:56
#, no-wrap
msgid "B<int fesetenv(const fenv_t *>I<envp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:58
#, no-wrap
msgid "B<int feupdateenv(const fenv_t *>I<envp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:64
msgid ""
"These eleven functions were defined in C99, and describe the handling of "
"floating-point rounding and exceptions (overflow, zero-divide, etc.)."
msgstr ""

#. type: SS
#: build/C/man3/fenv.3:64
#, no-wrap
msgid "Exceptions"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:69
msgid ""
"The I<divide-by-zero> exception occurs when an operation on finite numbers "
"produces infinity as exact answer."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:75
msgid ""
"The I<overflow> exception occurs when a result has to be represented as a "
"floating-point number, but has (much) larger absolute value than the largest "
"(finite) floating-point number that is representable."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:82
msgid ""
"The I<underflow> exception occurs when a result has to be represented as a "
"floating-point number, but has smaller absolute value than the smallest "
"positive normalized floating-point number (and would lose much accuracy when "
"represented as a denormalized number)."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:92
msgid ""
"The I<inexact> exception occurs when the rounded result of an operation is "
"not equal to the infinite precision result.  It may occur whenever "
"I<overflow> or I<underflow> occurs."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:97
msgid ""
"The I<invalid> exception occurs when there is no well-defined result for an "
"operation, as for 0/0 or infinity - infinity or sqrt(-1)."
msgstr ""

#. type: SS
#: build/C/man3/fenv.3:97
#, no-wrap
msgid "Exception handling"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:103
msgid ""
"Exceptions are represented in two ways: as a single bit (exception "
"present/absent), and these bits correspond in some implementation-defined "
"way with bit positions in an integer, and also as an opaque structure that "
"may contain more information about the exception (perhaps the code address "
"where it occurred)."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:119
msgid ""
"Each of the macros B<FE_DIVBYZERO>, B<FE_INEXACT>, B<FE_INVALID>, "
"B<FE_OVERFLOW>, B<FE_UNDERFLOW> is defined when the implementation supports "
"handling of the corresponding exception, and if so then defines the "
"corresponding bit(s), so that one can call exception handling functions, for "
"example, using the integer argument B<FE_OVERFLOW>|B<FE_UNDERFLOW>.  Other "
"exceptions may be supported.  The macro B<FE_ALL_EXCEPT> is the bitwise OR "
"of all bits corresponding to supported exceptions."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:124
msgid ""
"The B<feclearexcept>()  function clears the supported exceptions represented "
"by the bits in its argument."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:132
msgid ""
"The B<fegetexceptflag>()  function stores a representation of the state of "
"the exception flags represented by the argument I<excepts> in the opaque "
"object I<*flagp>."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:137
msgid ""
"The B<feraiseexcept>()  function raises the supported exceptions represented "
"by the bits in I<excepts>."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:148
msgid ""
"The B<fesetexceptflag>()  function sets the complete status for the "
"exceptions represented by I<excepts> to the value I<*flagp>.  This value "
"must have been obtained by an earlier call of B<fegetexceptflag>()  with a "
"last argument that contained all bits in I<excepts>."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:155
msgid ""
"The B<fetestexcept>()  function returns a word in which the bits are set "
"that were set in the argument I<excepts> and for which the corresponding "
"exception is currently set."
msgstr ""

#. type: SS
#: build/C/man3/fenv.3:155
#, no-wrap
msgid "Rounding mode"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:163
msgid ""
"The rounding mode determines how the result of floating-point operations is "
"treated when the result cannot be exactly represented in the significand.  "
"Various rounding modes may be provided: round to nearest (the default), "
"round up (toward positive infinity), round down (toward negative infinity), "
"and round toward zero."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:172
msgid ""
"Each of the macros B<FE_TONEAREST>, B<FE_UPWARD>, B<FE_DOWNWARD>, and "
"B<FE_TOWARDZERO> is defined when the implementation supports getting and "
"setting the corresponding rounding direction."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:177
msgid ""
"The B<fegetround>()  function returns the macro corresponding to the current "
"rounding mode."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:182
msgid ""
"The B<fesetround>()  function sets the rounding mode as specified by its "
"argument and returns zero when it was successful."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:190
msgid ""
"C99 and POSIX.1-2008 specify an identifier, B<FLT_ROUNDS>, defined in "
"I<E<lt>float.hE<gt>>, which indicates the implementation-defined rounding "
"behavior for floating-point addition.  This identifier has one of the "
"following values:"
msgstr ""

#. type: IP
#: build/C/man3/fenv.3:190
#, no-wrap
msgid "-1"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:192
msgid "The rounding mode is not determinable."
msgstr ""

#. type: IP
#: build/C/man3/fenv.3:192
#, no-wrap
msgid "0"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:194
msgid "Rounding is toward 0."
msgstr ""

#. type: IP
#: build/C/man3/fenv.3:194
#, no-wrap
msgid "1"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:196
msgid "Rounding is toward nearest number."
msgstr ""

#. type: IP
#: build/C/man3/fenv.3:196
#, no-wrap
msgid "2"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:198
msgid "Rounding is toward positive infinity."
msgstr ""

#. type: IP
#: build/C/man3/fenv.3:198
#, no-wrap
msgid "3"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:200
msgid "Rounding is toward negative infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:202
msgid "Other values represent machine-dependent, nonstandard rounding modes."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:208
msgid ""
"The value of B<FLT_ROUNDS> should reflect the current rounding mode as set "
"by B<fesetround>()  (but see BUGS)."
msgstr ""

#. type: SS
#: build/C/man3/fenv.3:208
#, no-wrap
msgid "Floating-point environment"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:220
msgid ""
"The entire floating-point environment, including control modes and status "
"flags, can be handled as one opaque object, of type I<fenv_t>.  The default "
"environment is denoted by B<FE_DFL_ENV> (of type I<const fenv_t\\ *>).  This "
"is the environment setup at program start and it is defined by ISO C to have "
"round to nearest, all exceptions cleared and a nonstop (continue on "
"exceptions) mode."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:225
msgid ""
"The B<fegetenv>()  function saves the current floating-point environment in "
"the object I<*envp>."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:232
msgid ""
"The B<feholdexcept>()  function does the same, then clears all exception "
"flags, and sets a nonstop (continue on exceptions) mode, if available.  It "
"returns zero when successful."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:245
msgid ""
"The B<fesetenv>()  function restores the floating-point environment from the "
"object I<*envp>.  This object must be known to be valid, for example, the "
"result of a call to B<fegetenv>()  or B<feholdexcept>()  or equal to "
"B<FE_DFL_ENV>.  This call does not raise exceptions."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:258
msgid ""
"The B<feupdateenv>()  function installs the floating-point environment "
"represented by the object I<*envp>, except that currently raised exceptions "
"are not cleared.  After calling this function, the raised exceptions will be "
"a bitwise OR of those previously set with those in I<*envp>.  As before, the "
"object I<*envp> must be known to be valid."
msgstr ""

#.  Earlier seven of these functions were listed as returning void.
#.  This was corrected in Corrigendum 1 (ISO/IEC 9899:1999/Cor.1:2001(E))
#.  of the C99 Standard.
#. type: Plain text
#: build/C/man3/fenv.3:263
msgid "These functions return zero on success and nonzero if an error occurred."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:284
msgid ""
"The B<feclearexcept>(), B<fegetexceptflag>(), B<fegetexceptflag>(), "
"B<fesetexceptflag>(), B<fetestexcept>(), B<fegetround>(), B<fesetround>(), "
"B<fegetenv>(), B<feholdexcept>(), B<fesetenv>(), B<feupdateenv>(), "
"B<feenableexcept>(), B<fedisableexcept>(), and B<fegetexcept>()  functions "
"are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:286
msgid "IEC 60559 (IEC 559:1989), ANSI/IEEE 854, C99, POSIX.1-2001."
msgstr ""

#. type: SS
#: build/C/man3/fenv.3:287
#, no-wrap
msgid "Glibc notes"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:306
msgid ""
"If possible, the GNU C Library defines a macro B<FE_NOMASK_ENV> which "
"represents an environment where every exception raised causes a trap to "
"occur.  You can test for this macro using B<#ifdef>.  It is defined only if "
"B<_GNU_SOURCE> is defined.  The C99 standard does not define a way to set "
"individual bits in the floating-point mask, for example, to trap on specific "
"flags.  Since version 2.2, glibc supports the functions B<feenableexcept>()  "
"and B<fedisableexcept>()  to set individual floating-point traps, and "
"B<fegetexcept>()  to query the state."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:313
#, no-wrap
msgid "B<int feenableexcept(int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:315
#, no-wrap
msgid "B<int fedisableexcept(int >I<excepts>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:317
#, no-wrap
msgid "B<int fegetexcept(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:331
msgid ""
"The B<feenableexcept>()  and B<fedisableexcept>()  functions enable "
"(disable) traps for each of the exceptions represented by I<excepts> and "
"return the previous set of enabled exceptions when successful, and -1 "
"otherwise.  The B<fegetexcept>()  function returns the set of all currently "
"enabled exceptions."
msgstr ""

#.  Aug 08, glibc 2.8
#.  See http://gcc.gnu.org/ml/gcc/2002-02/msg01535.html
#. type: Plain text
#: build/C/man3/fenv.3:342
msgid ""
"C99 specifies that the value of B<FLT_ROUNDS> should reflect changes to the "
"current rounding mode, as set by B<fesetround>().  Currently, this does not "
"occur: B<FLT_ROUNDS> always has the value 1."
msgstr ""

#. type: Plain text
#: build/C/man3/fenv.3:344
msgid "B<math_error>(7)"
msgstr ""

#. type: TH
#: build/C/man3/finite.3:25
#, no-wrap
msgid "FINITE"
msgstr ""

#. type: TH
#: build/C/man3/finite.3:25
#, no-wrap
msgid "2013-07-22"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:29
msgid ""
"finite, finitef, finitel, isinf, isinff, isinfl, isnan, isnanf, isnanl - BSD "
"floating-point classification functions"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:34
#, no-wrap
msgid "B<int finite(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:36
#, no-wrap
msgid "B<int finitef(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:38
#, no-wrap
msgid "B<int finitel(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:40
#, no-wrap
msgid "B<int isinf(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:42
#, no-wrap
msgid "B<int isinff(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:44
#, no-wrap
msgid "B<int isinfl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:46
#, no-wrap
msgid "B<int isnan(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:48
#, no-wrap
msgid "B<int isnanf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:50
#, no-wrap
msgid "B<int isnanl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:61
msgid "B<finite>(), B<finitef>(), B<finitel>():"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:63 build/C/man3/finite.3:76 build/C/man3/lgamma.3:65
msgid "_BSD_SOURCE || _SVID_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:65 build/C/man3/fpclassify.3:58
msgid "B<isinf>():"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:67
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600 || "
"_ISOC99_SOURCE;"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:74
msgid "B<isinff>(), B<isinfl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:78 build/C/man3/fpclassify.3:50
msgid "B<isnan>():"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:80
msgid "_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE || _ISOC99_SOURCE;"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:86
msgid "B<isnanf>(), B<isnanl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:88 build/C/man3/gamma.3:38 build/C/man3/scalb.3:58
msgid "_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600"
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:100
msgid ""
"The B<finite>(), B<finitef>(), and B<finitel>()  functions return a nonzero "
"value if I<x> is neither infinite nor a \"not-a-number\" (NaN) value, and 0 "
"otherwise."
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:110
msgid ""
"The B<isnan>(), B<isnanf>(), and B<isnanl>()  functions return a nonzero "
"value if I<x> is a NaN value, and 0 otherwise."
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:121
msgid ""
"The B<isinf>(), B<isinff>(), and B<isinfl>()  functions return 1 if I<x> is "
"positive infinity, -1 if I<x> is negative infinity, and 0 otherwise."
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:135
msgid ""
"The B<finite>(), B<finitef>(), B<finitel>(), B<isinf>(), B<isinff>(), "
"B<isinfl>(), B<isnan>(), B<isnanf>(), and B<isnanl>()  functions are "
"thread-safe."
msgstr ""

#
#.  finite* not on HP-UX; they exist on Tru64.
#.  .SH HISTORY
#.  The
#.  .BR finite ()
#.  function occurs in 4.3BSD.
#.  see IEEE.3 in the 4.3BSD manual
#. type: Plain text
#: build/C/man3/finite.3:155
msgid ""
"Note that these functions are obsolete.  C99 defines macros B<isfinite>(), "
"B<isinf>(), and B<isnan>()  (for all types) replacing them.  Further note "
"that the C99 B<isinf>()  has weaker guarantees on the return value.  See "
"B<fpclassify>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/finite.3:157
msgid "B<fpclassify>(3)"
msgstr ""

#. type: TH
#: build/C/man3/floor.3:27
#, no-wrap
msgid "FLOOR"
msgstr ""

#. type: TH
#: build/C/man3/floor.3:27
#, no-wrap
msgid "2013-07-23"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:30
msgid "floor, floorf, floorl - largest integral value not greater than argument"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:35
#, no-wrap
msgid "B<double floor(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:37
#, no-wrap
msgid "B<float floorf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:39
#, no-wrap
msgid "B<long double floorl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:51
msgid "B<floorf>(), B<floorl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:62
msgid ""
"These functions return the largest integral value that is not greater than "
"I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:68
msgid "For example, I<floor(0.5)> is 0.0, and I<floor(-0.5)> is -1.0."
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:71
msgid "These functions return the floor of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:77
msgid "If I<x> is integral, +0, -0, NaN, or an infinity, I<x> itself is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:88
msgid "The B<floor>(), B<floorf>(), and B<floorl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/floor.3:117
msgid ""
"B<ceil>(3), B<lrint>(3), B<nearbyint>(3), B<rint>(3), B<round>(3), "
"B<trunc>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fma.3:12
#, no-wrap
msgid "FMA"
msgstr ""

#. type: TH
#: build/C/man3/fma.3:12 build/C/man3/fmax.3:9 build/C/man3/fmin.3:9
#, no-wrap
msgid "2013-09-17"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:15
msgid "fma, fmaf, fmal - floating-point multiply and add"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:20
#, no-wrap
msgid "B<double fma(double >I<x>B<, double >I<y>B<, double >I<z>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:22
#, no-wrap
msgid "B<float fmaf(float >I<x>B<, float >I<y>B<, float >I<z>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:24
#, no-wrap
msgid ""
"B<long double fmal(long double >I<x>B<, long double >I<y>B<, long double "
">I<z>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:37
msgid "B<fma>(), B<fmaf>(), B<fmal>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:53
msgid ""
"The B<fma>()  function computes I<x> * I<y> + I<z>.  The result is rounded "
"as one ternary operation according to the current rounding mode (see "
"B<fenv>(3))."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:57
msgid ""
"These functions return the value of I<x> * I<y> + I<z>, rounded as one "
"ternary operation."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:73
msgid ""
"If I<x> times I<y> is an exact infinity, and I<z> is an infinity with the "
"opposite sign, a domain error occurs, and a NaN is returned."
msgstr ""

#.  POSIX.1-2008 allows some possible differences for the following two
#.  domain error cases, but on Linux they are treated the same (AFAICS).
#.  Nevertheless, we'll mirror POSIX.1 and describe the two cases
#.  separately.
#.  POSIX.1 says that a NaN or an implementation-defined value shall
#.  be returned for this case.
#. type: Plain text
#: build/C/man3/fma.3:89
msgid ""
"If one of I<x> or I<y> is an infinity, the other is 0, and I<z> is not a "
"NaN, a domain error occurs, and a NaN is returned."
msgstr ""

#.  POSIX.1 makes the domain error optional for this case.
#. type: Plain text
#: build/C/man3/fma.3:100
msgid ""
"If one of I<x> or I<y> is an infinity, and the other is 0, and I<z> is a "
"NaN, a domain error occurs, and a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:109
msgid ""
"If I<x> times I<y> is not an infinity times zero (or vice versa), and I<z> "
"is a NaN, a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:113
msgid ""
"If the result overflows, a range error occurs, and an infinity with the "
"correct sign is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:117
msgid "If the result underflows, a range error occurs, and a signed 0 is returned."
msgstr ""

#. type: TP
#: build/C/man3/fma.3:124
#, no-wrap
msgid ""
"Domain error: I<x> * I<y> + I<z>, or I<x> * I<y> is invalid and I<z> is not "
"a NaN"
msgstr ""

#.  .I errno
#.  is set to
#.  .BR EDOM .
#. type: Plain text
#: build/C/man3/fma.3:133 build/C/man3/ilogb.3:125 build/C/man3/log1p.3:128 build/C/man3/lrint.3:103 build/C/man3/lround.3:106 build/C/man3/remainder.3:165 build/C/man3/remquo.3:117 build/C/man3/scalb.3:155 build/C/man3/sincos.3:67
msgid "An invalid floating-point exception (B<FE_INVALID>)  is raised."
msgstr ""

#. type: TP
#: build/C/man3/fma.3:141 build/C/man3/hypot.3:143 build/C/man3/tgamma.3:143 build/C/man3/y0.3:201
#, no-wrap
msgid "Range error: result underflow"
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:164
msgid "The B<fma>(), B<fmaf>(), and B<fmal>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fma.3:169
msgid "B<remainder>(3), B<remquo>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fmax.3:9
#, no-wrap
msgid "FMAX"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:12
msgid "fmax, fmaxf, fmaxl - determine maximum of two floating-point numbers"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:16
msgid "B<double fmax(double >I<x>B<, double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:18
msgid "B<float fmaxf(float >I<x>B<, float >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:20
msgid "B<long double fmaxl(long double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:32
msgid "B<fmax>(), B<fmaxf>(), B<fmaxl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:45
msgid "These functions return the larger value of I<x> and I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:50
msgid "These functions return the maximum of I<x> and I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:52 build/C/man3/fmin.3:52
msgid "If one argument is a NaN, the other argument is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:54 build/C/man3/fmin.3:54
msgid "If both arguments are NaN, a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:66
msgid "The B<fmax>(), B<fmaxf>(), and B<fmaxl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fmax.3:70
msgid "B<fmin>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fmin.3:9
#, no-wrap
msgid "FMIN"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:12
msgid "fmin, fminf, fminl - determine minimum of two floating-point numbers"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:16
msgid "B<double fmin(double >I<x>B<, double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:18
msgid "B<float fminf(float >I<x>B<, float >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:20
msgid "B<long double fminl(long double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:32
msgid "B<fmin>(), B<fminf>(), B<fminl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:45
msgid "These functions return the lesser value of I<x> and I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:50
msgid "These functions return the minimum of I<x> and I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmin.3:66
msgid "The B<fmin>(), B<fminf>(), and B<fminl>()  functions are thread-safe."
msgstr ""

#. type: TH
#: build/C/man3/fmod.3:35
#, no-wrap
msgid "FMOD"
msgstr ""

#. type: TH
#: build/C/man3/fmod.3:35
#, no-wrap
msgid "2012-03-15"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:38
msgid "fmod, fmodf, fmodl - floating-point remainder function"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:43
#, no-wrap
msgid "B<double fmod(double >I<x>B<, double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:45
#, no-wrap
msgid "B<float fmodf(float >I<x>B<, float >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:47
#, no-wrap
msgid "B<long double fmodl(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:59
msgid "B<fmodf>(), B<fmodl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:87
msgid ""
"The B<fmod>()  function computes the floating-point remainder of dividing "
"I<x> by I<y>.  The return value is I<x> - I<n> * I<y>, where I<n> is the "
"quotient of I<x> / I<y>, rounded toward zero to an integer."
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:96
msgid ""
"On success, these functions return the value I<x>\\ -\\ I<n>*I<y>, for some "
"integer I<n>, such that the returned value has the same sign as I<x> and a "
"magnitude less than the magnitude of I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:108
msgid "If I<x> is an infinity, a domain error occurs, and a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:114
msgid "If I<y> is zero, a domain error occurs, and a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:120
msgid "If I<x> is +0 (-0), and I<y> is not zero, +0 (-0) is returned."
msgstr ""

#.  [XXX see bug above] and \fIx\fP is not a NaN
#. type: TP
#: build/C/man3/fmod.3:136 build/C/man3/remainder.3:172
#, no-wrap
msgid "Domain error: I<y> is zero"
msgstr ""

#.  http://sources.redhat.com/bugzilla/show_bug.cgi?id=6784
#. type: Plain text
#: build/C/man3/fmod.3:160
msgid ""
"Before version 2.10, the glibc implementation did not set I<errno> to "
"B<EDOM> when a domain error occurred for an infinite I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/fmod.3:162
msgid "B<remainder>(3)"
msgstr ""

#. type: TH
#: build/C/man3/fpclassify.3:10
#, no-wrap
msgid "FPCLASSIFY"
msgstr ""

#. type: TH
#: build/C/man3/fpclassify.3:10 build/C/man3/frexp.3:33 build/C/man3/ilogb.3:29
#, no-wrap
msgid "2013-08-06"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:14
msgid ""
"fpclassify, isfinite, isnormal, isnan, isinf - floating-point classification "
"macros"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:19
#, no-wrap
msgid "B<int fpclassify(>I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:21
#, no-wrap
msgid "B<int isfinite(>I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:23
#, no-wrap
msgid "B<int isnormal(>I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:25
#, no-wrap
msgid "B<int isnan(>I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:27
#, no-wrap
msgid "B<int isinf(>I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:42
msgid "B<fpclassify>(), B<isfinite>(), B<isnormal>():"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:76
msgid ""
"Floating point numbers can have special values, such as infinite or NaN.  "
"With the macro B<fpclassify(>I<x>B<)> you can find out what type I<x> is.  "
"The macro takes any floating-point expression as argument.  The result is "
"one of the following values:"
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:76
#, no-wrap
msgid "B<FP_NAN>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:80
msgid "I<x> is \"Not a Number\"."
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:80
#, no-wrap
msgid "B<FP_INFINITE>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:84
msgid "I<x> is either positive infinity or negative infinity."
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:84
#, no-wrap
msgid "B<FP_ZERO>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:88
msgid "I<x> is zero."
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:88
#, no-wrap
msgid "B<FP_SUBNORMAL>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:92
msgid "I<x> is too small to be represented in normalized format."
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:92
#, no-wrap
msgid "B<FP_NORMAL>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:96
msgid ""
"if nothing of the above is correct then it must be a normal floating-point "
"number."
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:98
msgid "The other macros provide a short answer to some standard questions."
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:98
#, no-wrap
msgid "B<isfinite(>I<x>B<)>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:101
msgid "returns a nonzero value if"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:103
msgid "(fpclassify(x) != FP_NAN && fpclassify(x) != FP_INFINITE)"
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:103
#, no-wrap
msgid "B<isnormal(>I<x>B<)>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:107
msgid "returns a nonzero value if (fpclassify(x) == FP_NORMAL)"
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:107
#, no-wrap
msgid "B<isnan(>I<x>B<)>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:111
msgid "returns a nonzero value if (fpclassify(x) == FP_NAN)"
msgstr ""

#. type: TP
#: build/C/man3/fpclassify.3:111
#, no-wrap
msgid "B<isinf(>I<x>B<)>"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:118
msgid "returns 1 if I<x> is positive infinity, and -1 if I<x> is negative infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:128
msgid ""
"The B<fpclassify>(), B<isfinite>(), B<isnormal>(), B<isnan>(), and "
"B<isinf>()  macros are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:130
msgid "C99, POSIX.1."
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:135
msgid ""
"For B<isinf>(), the standards merely say that the return value is nonzero if "
"and only if the argument has an infinite value."
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:142
msgid ""
"In glibc 2.01 and earlier, B<isinf>()  returns a nonzero value (actually: 1) "
"if I<x> is positive infinity or negative infinity.  (This is all that C99 "
"requires.)"
msgstr ""

#. type: Plain text
#: build/C/man3/fpclassify.3:147
msgid "B<finite>(3), B<INFINITY>(3), B<isgreater>(3), B<signbit>(3)"
msgstr ""

#. type: TH
#: build/C/man3/frexp.3:33
#, no-wrap
msgid "FREXP"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:37
msgid ""
"frexp, frexpf, frexpl - convert floating-point number to fractional and "
"integral components"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:42
#, no-wrap
msgid "B<double frexp(double >I<x>B<, int *>I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:44
#, no-wrap
msgid "B<float frexpf(float >I<x>B<, int *>I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:46
#, no-wrap
msgid "B<long double frexpl(long double >I<x>B<, int *>I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:58
msgid "B<frexpf>(), B<frexpl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:74
msgid ""
"The B<frexp>()  function is used to split the number I<x> into a normalized "
"fraction and an exponent which is stored in I<exp>."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:86
msgid ""
"The B<frexp>()  function returns the normalized fraction.  If the argument "
"I<x> is not zero, the normalized fraction is I<x> times a power of two, and "
"its absolute value is always in the range 1/2 (inclusive) to 1 (exclusive), "
"that is, [0.5,1)."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:92
msgid ""
"If I<x> is zero, then the normalized fraction is zero and zero is stored in "
"I<exp>."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:99
msgid ""
"If I<x> is a NaN, a NaN is returned, and the value of I<*exp> is "
"unspecified."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:106
msgid ""
"If I<x> is positive infinity (negative infinity), positive infinity "
"(negative infinity) is returned, and the value of I<*exp> is unspecified."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:116
msgid "The B<frexp>(), B<frexpf>(), and B<frexpl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:124
msgid "The program below produces results such as the following:"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:131
#, no-wrap
msgid ""
"$B< ./a.out 2560>\n"
"frexp(2560, &e) = 0.625: 0.625 * 2^12 = 2560\n"
"$B< ./a.out -4>\n"
"frexp(-4, &e) = -0.5: -0.5 * 2^3 = -4\n"
msgstr ""

#. type: SS
#: build/C/man3/frexp.3:133 build/C/man3/matherr.3:360
#, no-wrap
msgid "Program source"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:140
#, no-wrap
msgid ""
"#include E<lt>math.hE<gt>\n"
"#include E<lt>float.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:146
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    double x, r;\n"
"    int exp;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:149
#, no-wrap
msgid ""
"    x = strtod(argv[1], NULL);\n"
"    r = frexp(x, &exp);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:154
#, no-wrap
msgid ""
"    printf(\"frexp(%g, &e) = %g: %g * %d^%d = %g\\en\",\n"
"           x, r, r, FLT_RADIX, exp, x);\n"
"    exit(EXIT_SUCCESS);\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/frexp.3:158
msgid "B<ldexp>(3), B<modf>(3)"
msgstr ""

#. type: TH
#: build/C/man3/gamma.3:9
#, no-wrap
msgid "GAMMA"
msgstr ""

#. type: TH
#: build/C/man3/gamma.3:9
#, no-wrap
msgid "2008-08-05"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:12
msgid "gamma, gammaf, gammal - (logarithm of the) gamma function"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:16
msgid "B<double gamma(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:18
msgid "B<float gammaf(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:20
msgid "B<long double gammal(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:30
msgid "B<gamma>():"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:32 build/C/man3/lgamma.3:69
msgid "_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:35
msgid "B<gammaf>(), B<gammal>():"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:46
msgid ""
"These functions are deprecated: instead, use either the B<tgamma>(3)  or the "
"B<lgamma>(3)  functions, as appropriate."
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:49 build/C/man3/lgamma.3:74
msgid "For the definition of the Gamma function, see B<tgamma>(3)."
msgstr ""

#. type: SS
#: build/C/man3/gamma.3:49
#, no-wrap
msgid "*BSD version"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:53
msgid ""
"The libm in 4.4BSD and some versions of FreeBSD had a B<gamma>()  function "
"that computes the Gamma function, as one would expect."
msgstr ""

#. type: SS
#: build/C/man3/gamma.3:53
#, no-wrap
msgid "glibc version"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:59
msgid ""
"Glibc has a B<gamma>()  function that is equivalent to B<lgamma>(3)  and "
"computes the natural logarithm of the Gamma function."
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:62 build/C/man3/gamma.3:65
msgid "See B<lgamma>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:68
msgid ""
"Because of historical variations in behavior across systems, this function "
"is not specified in any standard."
msgstr ""

#. type: SS
#: build/C/man3/gamma.3:69
#, no-wrap
msgid "History"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:81
msgid ""
"4.2BSD had a B<gamma>()  that computed ln(|Gamma(|I<x>|)|), leaving the sign "
"of Gamma(|I<x>|)  in the external integer I<signgam>.  In 4.3BSD the name "
"was changed to B<lgamma>(3), and the man page promises"
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:85
msgid ""
"At some time in the future the name gamma will be rehabilitated and used for "
"the Gamma function"
msgstr ""

#.  The FreeBSD man page says about gamma() that it is like lgamma()
#.  except that is does not set signgam.
#.  Also, that 4.4BSD has a gamma() that computes the true gamma function.
#. type: Plain text
#: build/C/man3/gamma.3:97
msgid ""
"This did indeed happen in 4.4BSD, where B<gamma>()  computes the Gamma "
"function (with no effect on I<signgam>).  However, this came too late, and "
"we now have B<tgamma>(3), the \"true gamma\" function."
msgstr ""

#. type: Plain text
#: build/C/man3/gamma.3:101
msgid "B<lgamma>(3), B<signgam>(3), B<tgamma>(3)"
msgstr ""

#. type: TH
#: build/C/man3/hypot.3:33
#, no-wrap
msgid "HYPOT"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:36
msgid "hypot, hypotf, hypotl - Euclidean distance function"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:41
#, no-wrap
msgid "B<double hypot(double >I<x>B<, double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:43
#, no-wrap
msgid "B<float hypotf(float >I<x>B<, float >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:45
#, no-wrap
msgid "B<long double hypotl(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:56
msgid "B<hypot>():"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:66
msgid "B<hypotf>(), B<hypotl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:87
msgid ""
"The B<hypot>()  function returns sqrt(I<x>*I<x>+I<y>*I<y>).  This is the "
"length of the hypotenuse of a right-angled triangle with sides of length "
"I<x> and I<y>, or the distance of the point (I<x>,I<y>)  from the origin."
msgstr ""

#.  e.g., hypot(DBL_MIN, DBL_MIN) does the right thing, as does, say
#.  hypot(DBL_MAX/2.0, DBL_MAX/2.0).
#. type: Plain text
#: build/C/man3/hypot.3:92
msgid ""
"The calculation is performed without undue overflow or underflow during the "
"intermediate steps of the calculation."
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:98
msgid ""
"On success, these functions return the length of a right-angled triangle "
"with sides of length I<x> and I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:105
msgid "If I<x> or I<y> is an infinity, positive infinity is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:113
msgid ""
"If I<x> or I<y> is a NaN, and the other argument is not an infinity, a NaN "
"is returned."
msgstr ""

#.  Actually, could the result not be subnormal if both arguments
#.  are subnormal?  I think not -- mtk, Jul 2008
#. type: Plain text
#: build/C/man3/hypot.3:128
msgid ""
"If both arguments are subnormal, and the result is subnormal, a range error "
"occurs, and the correct result is returned."
msgstr ""

#.  FIXME . Is it intentional that these functions do not set errno?
#.  They do set errno for the y == 0 case, below.
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6783
#. type: Plain text
#: build/C/man3/hypot.3:158 build/C/man3/ilogb.3:130 build/C/man3/remainder.3:172
msgid "These functions do not set I<errno> for this case."
msgstr ""

#. type: Plain text
#: build/C/man3/hypot.3:167
msgid "B<cabs>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/ilogb.3:29
#, no-wrap
msgid "ILOGB"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:32
msgid "ilogb, ilogbf, ilogbl - get integer exponent of a floating-point value"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:36
msgid "B<int ilogb(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:38
msgid "B<int ilogbf(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:40
msgid "B<int ilogbl(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:50
msgid "B<ilogb>():"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:62
msgid "B<ilogbf>(), B<ilogbl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:78
msgid ""
"These functions return the exponent part of their argument as a signed "
"integer.  When no error occurs, these functions are equivalent to the "
"corresponding B<logb>(3)  functions, cast to I<int>."
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:82
msgid ""
"On success, these functions return the exponent of I<x>, as a signed "
"integer."
msgstr ""

#.  the POSIX.1 spec for logb() says logb() gives pole error for this
#.  case, but for ilogb() it says domain error.
#.  glibc: The numeric value is either `INT_MIN' or `-INT_MAX'.
#. type: Plain text
#: build/C/man3/ilogb.3:90
msgid ""
"If I<x> is zero, then a domain error occurs, and the functions return "
"B<FP_ILOGB0>."
msgstr ""

#.  glibc: The numeric value is either `INT_MIN' or `INT_MAX'.
#.  On i386, FP_ILOGB0 and FP_ILOGBNAN have the same value.
#. type: Plain text
#: build/C/man3/ilogb.3:97
msgid ""
"If I<x> is a NaN, then a domain error occurs, and the functions return "
"B<FP_ILOGBNAN>."
msgstr ""

#
#.  POSIX.1-2001 also says:
#.  If the correct value is greater than {INT_MAX}, {INT_MAX}
#.  shall be returned and a domain error shall occur.
#
#.  If the correct value is less than {INT_MIN}, {INT_MIN}
#.  shall be returned and a domain error shall occur.
#. type: Plain text
#: build/C/man3/ilogb.3:110
msgid ""
"If I<x> is negative infinity or positive infinity, then a domain error "
"occurs, and the functions return B<INT_MAX>."
msgstr ""

#. type: TP
#: build/C/man3/ilogb.3:117
#, no-wrap
msgid "Domain error: I<x> is 0 or a NaN"
msgstr ""

#.  FIXME . Is it intentional that these functions do not set errno,
#.  or raise an exception?
#.  log(), log2(), log10() do set errno
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6794
#. type: Plain text
#: build/C/man3/ilogb.3:146
msgid "These functions do not set I<errno> or raise an exception for this case."
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:154
msgid "The B<ilogb>(), B<ilogbf>(), and B<ilogbl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/ilogb.3:160
msgid "B<log>(3), B<logb>(3), B<significand>(3)"
msgstr ""

#. type: TH
#: build/C/man3/infnan.3:33
#, no-wrap
msgid "INFNAN"
msgstr ""

#. type: TH
#: build/C/man3/infnan.3:33
#, no-wrap
msgid "1993-06-02"
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:36
msgid "infnan - deal with infinite or not-a-number (NaN) result"
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:41
#, no-wrap
msgid "B<double infnan(int >I<error>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:56
msgid ""
"The B<infnan>()  function returns a suitable value for infinity and "
"\"not-a-number\" (NaN) results.  The value of I<error> can be B<ERANGE> to "
"represent infinity or anything else to represent NaN.  I<errno> is also set."
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:64
msgid "If I<error> is B<ERANGE> (Infinity), B<HUGE_VAL> is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:72
msgid "If I<error> is -B<ERANGE> (-Infinity), -B<HUGE_VAL> is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:76
msgid "If I<error> is anything else, NAN is returned."
msgstr ""

#. type: TP
#: build/C/man3/infnan.3:77
#, no-wrap
msgid "B<EDOM>"
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:82
msgid "The value of I<error> is \"not-a-number\" (NaN)."
msgstr ""

#. type: TP
#: build/C/man3/infnan.3:82
#, no-wrap
msgid "B<ERANGE>"
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:87
msgid "The value of I<error> is positive infinity or negative infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:89
msgid "4.3BSD."
msgstr ""

#. type: Plain text
#: build/C/man3/infnan.3:92
msgid ""
"This obsolete function was provided in libc4 and libc5, but is not available "
"in glibc2."
msgstr ""

#. type: TH
#: build/C/man3/isgreater.3:10
#, no-wrap
msgid "ISGREATER"
msgstr ""

#. type: TH
#: build/C/man3/isgreater.3:10
#, no-wrap
msgid "2014-01-27"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:14
msgid ""
"isgreater, isgreaterequal, isless, islessequal, islessgreater, isunordered - "
"floating-point relational tests without exception for NaN"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:19
#, no-wrap
msgid "B<int isgreater(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:21
#, no-wrap
msgid "B<int isgreaterequal(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:23
#, no-wrap
msgid "B<int isless(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:25
#, no-wrap
msgid "B<int islessequal(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:27
#, no-wrap
msgid "B<int islessgreater(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:29
#, no-wrap
msgid "B<int isunordered(>I<x>B<, >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:40
msgid "All functions described here:"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:55
msgid ""
"The normal relation operations (like B<E<lt>>, \"less than\")  will fail if "
"one of the operands is NaN.  This will cause an exception.  To avoid this, "
"C99 defines the macros listed below."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:61
msgid ""
"These macros are guaranteed to evaluate their arguments only once.  The "
"arguments must be of real floating-point type (note: do not pass integer "
"values as arguments to these macros, since the arguments will I<not> be "
"promoted to real-floating types)."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:61
#, no-wrap
msgid "B<isgreater>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:69
msgid "determines I<(x)\\ E<gt>\\ (y)> without an exception if I<x> or I<y> is NaN."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:69
#, no-wrap
msgid "B<isgreaterequal>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:77
msgid ""
"determines I<(x)\\ E<gt>=\\ (y)> without an exception if I<x> or I<y> is "
"NaN."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:77
#, no-wrap
msgid "B<isless>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:85
msgid "determines I<(x)\\ E<lt>\\ (y)> without an exception if I<x> or I<y> is NaN."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:85
#, no-wrap
msgid "B<islessequal>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:93
msgid ""
"determines I<(x)\\ E<lt>=\\ (y)> without an exception if I<x> or I<y> is "
"NaN."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:93
#, no-wrap
msgid "B<islessgreater>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:107
msgid ""
"determines I<(x)\\ E<lt> (y) || (x) E<gt>\\ (y)> without an exception if "
"I<x> or I<y> is NaN.  This macro is not equivalent to I<x\\ !=\\ y> because "
"that expression is true if I<x> or I<y> is NaN."
msgstr ""

#. type: TP
#: build/C/man3/isgreater.3:107
#, no-wrap
msgid "B<isunordered>()"
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:111
msgid ""
"determines whether its arguments are unordered, that is, whether at least "
"one of the arguments is a NaN."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:116
msgid ""
"The macros other than B<isunordered>()  return the result of the relational "
"comparison; these macros return 0 if either argument is a NaN."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:123
msgid "B<isunordered>()  returns 1 if I<x> or I<y> is NaN and 0 otherwise."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:136
msgid ""
"The B<isgreater>(), B<isgreaterequal>(), B<isless>(), B<islessequal>(), "
"B<islessgreater>(), and B<isunordered>()  macros are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:143
msgid ""
"Not all hardware supports these functions, and where hardware support isn't "
"provided, they will be emulated by macros.  This will result in a "
"performance penalty.  Don't use these functions if NaN is of no concern for "
"you."
msgstr ""

#. type: Plain text
#: build/C/man3/isgreater.3:146
msgid "B<fpclassify>(3), B<isnan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/j0.3:36
#, no-wrap
msgid "J0"
msgstr ""

#. type: TH
#: build/C/man3/j0.3:36 build/C/man3/lgamma.3:11 build/C/man3/lrint.3:27 build/C/man3/y0.3:36
#, no-wrap
msgid "2014-01-18"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:40
msgid ""
"j0, j0f, j0l, j1, j1f, j1l, jn, jnf, jnl - Bessel functions of the first "
"kind"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:46
msgid "B<double j0(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:48
msgid "B<double j1(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:50
msgid "B<double jn(int >I<n>B<, double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:52
msgid "B<float j0f(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:54
msgid "B<float j1f(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:56
msgid "B<float jnf(int >I<n>B<, float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:58
msgid "B<long double j0l(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:60
msgid "B<long double j1l(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:62
msgid "B<long double jnl(int >I<n>B<, long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:74
msgid "B<j0>(), B<j1>(), B<jn>():"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:76 build/C/man3/y0.3:76
msgid "_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:84
msgid "B<j0f>(), B<j0l>(), B<j1f>(), B<j1l>(), B<jnf>(), B<jnl>():"
msgstr ""

#.  Also seems to work: -std=c99 -D_XOPEN_SOURCE
#. type: Plain text
#: build/C/man3/j0.3:87 build/C/man3/y0.3:87
msgid "_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 600"
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:104
msgid ""
"The B<j0>()  and B<j1>()  functions return Bessel functions of I<x> of the "
"first kind of orders 0 and 1, respectively.  The B<jn>()  function returns "
"the Bessel function of I<x> of the first kind of order I<n>."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:121
msgid ""
"The B<j0f>(), B<j1f>(), and B<jnf>(), functions are versions that take and "
"return I<float> values.  The B<j0l>(), B<j1l>(), and B<jnl>()  functions are "
"versions that take and return I<long double> values."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:125
msgid ""
"On success, these functions return the appropriate Bessel value of the first "
"kind for I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:136
msgid ""
"If I<x> is too large in magnitude, or the result underflows, a range error "
"occurs, and the return value is 0."
msgstr ""

#. type: TP
#: build/C/man3/j0.3:143
#, no-wrap
msgid "Range error: result underflow, or I<x> is too large in magnitude"
msgstr ""

#.  An underflow floating-point exception
#.  .RB ( FE_UNDERFLOW )
#.  is raised.
#. type: Plain text
#: build/C/man3/j0.3:151
msgid "I<errno> is set to B<ERANGE>."
msgstr ""

#.  FIXME . Is it intentional that these functions do not raise exceptions?
#.  e.g., j0(1.5e16)
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6805
#. type: Plain text
#: build/C/man3/j0.3:157
msgid "These functions do not raise exceptions for B<fetestexcept>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:163 build/C/man3/y0.3:236
msgid ""
"The functions returning I<double> conform to SVr4, 4.3BSD, POSIX.1-2001.  "
"The others are nonstandard functions that also exist on the BSDs."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:172
msgid ""
"There are errors of up to 2e-16 in the values returned by B<j0>(), B<j1>()  "
"and B<jn>()  for values of I<x> between -8 and 8."
msgstr ""

#. type: Plain text
#: build/C/man3/j0.3:174
msgid "B<y0>(3)"
msgstr ""

#. type: TH
#: build/C/man3/ldexp.3:34
#, no-wrap
msgid "LDEXP"
msgstr ""

#. type: TH
#: build/C/man3/ldexp.3:34
#, no-wrap
msgid "2013-08-19"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:37
msgid ""
"ldexp, ldexpf, ldexpl - multiply floating-point number by integral power of "
"2"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:42
#, no-wrap
msgid "B<double ldexp(double >I<x>B<, int >I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:44
#, no-wrap
msgid "B<float ldexpf(float >I<x>B<, int >I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:46
#, no-wrap
msgid "B<long double ldexpl(long double >I<x>B<, int >I<exp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:58
msgid "B<ldexpf>(), B<ldexpl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:73
msgid ""
"The B<ldexp>()  function returns the result of multiplying the "
"floating-point number I<x> by 2 raised to the power I<exp>."
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:76
msgid "On success, these functions return I<x * (2^exp)>."
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:82
msgid "If I<exp> is zero, then I<x> is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:106 build/C/man3/scalb.3:133 build/C/man3/scalbln.3:125
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with a sign the "
"same as I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:137
msgid "The B<ldexp>(), B<ldexpf>(), and B<ldexpl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/ldexp.3:147
msgid "B<frexp>(3), B<modf>(3), B<scalbln>(3)"
msgstr ""

#. type: TH
#: build/C/man3/lgamma.3:11
#, no-wrap
msgid "LGAMMA"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:15
msgid ""
"lgamma, lgammaf, lgammal, lgamma_r, lgammaf_r, lgammal_r, signgam - log "
"gamma function"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:20
#, no-wrap
msgid "B<double lgamma(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:22
#, no-wrap
msgid "B<float lgammaf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:24
#, no-wrap
msgid "B<long double lgammal(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:26
#, no-wrap
msgid "B<double lgamma_r(double >I<x>B<, int *>I<signp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:28
#, no-wrap
msgid "B<float lgammaf_r(float >I<x>B<, int *>I<signp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:30
#, no-wrap
msgid "B<long double lgammal_r(long double >I<x>B<, int *>I<signp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:32
#, no-wrap
msgid "B<extern int >I<signgam>B<;>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:43
msgid "B<lgamma>():"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:53
msgid "B<lgammaf>(), B<lgammal>():"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:63
msgid "B<lgamma_r>(), B<lgammaf_r>(), B<lgammal_r>():"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:67
msgid "I<signgam>:"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:86
msgid ""
"The B<lgamma>()  function returns the natural logarithm of the absolute "
"value of the Gamma function.  The sign of the Gamma function is returned in "
"the external integer I<signgam> declared in I<E<lt>math.hE<gt>>.  It is 1 "
"when the Gamma function is positive or zero, -1 when it is negative."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:96
msgid ""
"Since using a constant location I<signgam> is not thread-safe, the functions "
"B<lgamma_r>(), B<lgammaf_r>(), and B<lgammal_r>()  have been introduced; "
"they return the sign via the argument I<signp>."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:98
msgid "On success, these functions return the natural logarithm of Gamma(x)."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:106
msgid "If I<x> is 1 or 2, +0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:122
msgid ""
"If I<x> is a nonpositive integer, a pole error occurs, and the functions "
"return +B<HUGE_VAL>, +B<HUGE_VALF>, or +B<HUGE_VALL>, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:132 build/C/man3/tgamma.3:92
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with the correct "
"mathematical sign."
msgstr ""

#. type: TP
#: build/C/man3/lgamma.3:139
#, no-wrap
msgid "Pole error: I<x> is a nonpositive integer"
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:167
msgid ""
"The B<lgamma>()  functions are specified in C99 and POSIX.1-2001.  "
"I<signgam> is specified in POSIX.1-2001, but not in C99.  The B<lgamma_r>()  "
"functions are nonstandard, but present on several other systems."
msgstr ""

#.  http://sources.redhat.com/bugzilla/show_bug.cgi?id=6777
#. type: Plain text
#: build/C/man3/lgamma.3:177
msgid ""
"In glibc 2.9 and earlier, when a pole error occurs, I<errno> is set to "
"B<EDOM>; instead of the POSIX-mandated B<ERANGE>.  Since version 2.10, glibc "
"does the right thing."
msgstr ""

#. type: Plain text
#: build/C/man3/lgamma.3:179
msgid "B<tgamma>(3)"
msgstr ""

#. type: TH
#: build/C/man3/log.3:36
#, no-wrap
msgid "LOG"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:39
msgid "log, logf, logl - natural logarithmic function"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:44
#, no-wrap
msgid "B<double log(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:46
#, no-wrap
msgid "B<float logf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:48
#, no-wrap
msgid "B<long double logl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:60
msgid "B<logf>(), B<logl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:73
msgid "The B<log>()  function returns the natural logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:76
msgid "On success, these functions return the natural logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:85
msgid "If I<x> is 1, the result is +0."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:100 build/C/man3/logb.3:111
msgid ""
"If I<x> is zero, then a pole error occurs, and the functions return "
"-B<HUGE_VAL>, -B<HUGE_VALF>, or -B<HUGE_VALL>, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:105
msgid ""
"If I<x> is negative (including negative infinity), then a domain error "
"occurs, and a NaN (not a number) is returned."
msgstr ""

#. type: TP
#: build/C/man3/log.3:112 build/C/man3/y0.3:178
#, no-wrap
msgid "Domain error: I<x> is negative"
msgstr ""

#. type: TP
#: build/C/man3/log.3:120
#, no-wrap
msgid "Pole error: I<x> is zero"
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:128 build/C/man3/tgamma.3:132
msgid ""
"I<errno> is set to B<ERANGE>.  A divide-by-zero floating-point exception "
"(B<FE_DIVBYZERO>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:141
msgid ""
"In glibc 2.5 and earlier, taking the B<log>()  of a NaN produces a bogus "
"invalid floating-point (B<FE_INVALID>)  exception."
msgstr ""

#. type: Plain text
#: build/C/man3/log.3:148
msgid "B<cbrt>(3), B<clog>(3), B<log10>(3), B<log1p>(3), B<log2>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/log10.3:36
#, no-wrap
msgid "LOG10"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:39
msgid "log10, log10f, log10l - base-10 logarithmic function"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:44
#, no-wrap
msgid "B<double log10(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:46
#, no-wrap
msgid "B<float log10f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:48
#, no-wrap
msgid "B<long double log10l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:60
msgid "B<log10f>(), B<log10l>():"
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:73
msgid "The B<log10>()  function returns the base 10 logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:76
msgid "On success, these functions return the base 10 logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:81 build/C/man3/log2.3:81
msgid ""
"For special cases, including where I<x> is 0, 1, negative, infinity, or NaN, "
"see B<log>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:89 build/C/man3/log2.3:89
msgid ""
"For a discussion of the errors that can occur for these functions, see "
"B<log>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/log10.3:102
msgid "B<cbrt>(3), B<clog10>(3), B<exp10>(3), B<log>(3), B<log2>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/log1p.3:29
#, no-wrap
msgid "LOG1P"
msgstr ""

#. type: TH
#: build/C/man3/log1p.3:29 build/C/man3/logb.3:29
#, no-wrap
msgid "2014-02-28"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:32
msgid "log1p, log1pf, log1pl - logarithm of 1 plus argument"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:37
#, no-wrap
msgid "B<double log1p(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:39
#, no-wrap
msgid "B<float log1pf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:41
#, no-wrap
msgid "B<long double log1pl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:52
msgid "B<log1p>():"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:63
msgid "B<log1pf>(), B<log1pl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:74
msgid "I<log1p(x)> returns a value equivalent to"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:77
#, no-wrap
msgid "    log (1 + I<x>)\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:83
msgid ""
"It is computed in a way that is accurate even if the value of I<x> is near "
"zero."
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:86
msgid "On success, these functions return the natural logarithm of I<(1\\ +\\ x)>."
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:105
msgid ""
"If I<x> is -1, a pole error occurs, and the functions return -B<HUGE_VAL>, "
"-B<HUGE_VALF>, or -B<HUGE_VALL>, respectively."
msgstr ""

#.  POSIX.1 specifies a possible range error if x is subnormal
#.  glibc 2.8 doesn't do this
#. type: Plain text
#: build/C/man3/log1p.3:113
msgid ""
"If I<x> is less than -1 (including negative infinity), a domain error "
"occurs, and a NaN (not a number) is returned."
msgstr ""

#. type: TP
#: build/C/man3/log1p.3:120
#, no-wrap
msgid "Domain error: I<x> is less than -1"
msgstr ""

#. type: TP
#: build/C/man3/log1p.3:128
#, no-wrap
msgid "Pole error: I<x> is -1"
msgstr ""

#.  .I errno
#.  is set to
#.  .BR ERANGE .
#. type: Plain text
#: build/C/man3/log1p.3:136 build/C/man3/logb.3:131
msgid "A divide-by-zero floating-point exception (B<FE_DIVBYZERO>)  is raised."
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:150
msgid "The B<log1p>(), B<log1pf>(), and B<log1pl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/log1p.3:157
msgid "B<exp>(3), B<expm1>(3), B<log>(3)"
msgstr ""

#. type: TH
#: build/C/man3/log2.3:36
#, no-wrap
msgid "LOG2"
msgstr ""

#. type: TH
#: build/C/man3/log2.3:36 build/C/man3/pow.3:35
#, no-wrap
msgid "2010-09-12"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:39
msgid "log2, log2f, log2l - base-2 logarithmic function"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:44
#, no-wrap
msgid "B<double log2(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:46
#, no-wrap
msgid "B<float log2f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:48
#, no-wrap
msgid "B<long double log2l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:61
msgid "B<log2>(), B<log2f>(), B<log2l>():"
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:73
msgid "The B<log2>()  function returns the base 2 logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:76
msgid "On success, these functions return the base 2 logarithm of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/log2.3:103
msgid "B<cbrt>(3), B<clog2>(3), B<log>(3), B<log10>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/logb.3:29
#, no-wrap
msgid "LOGB"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:32
msgid "logb, logbf, logbl - get exponent of a floating-point value"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:36
msgid "B<double logb(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:38
msgid "B<float logbf(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:40
msgid "B<long double logbl(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:50
msgid "B<logb>():"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:61
msgid "B<logbf>(), B<logbl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:86
msgid ""
"These functions extract the exponent from the internal floating-point "
"representation of I<x> and return it as a floating-point value.  The integer "
"constant B<FLT_RADIX>, defined in I<E<lt>float.hE<gt>>, indicates the radix "
"used for the system's floating-point representation.  If B<FLT_RADIX> is 2, "
"B<logb(>I<x>B<)> is equal to B<floor(log2(>I<x>B<))>, except that it is "
"probably faster."
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:94
msgid ""
"If I<x> is subnormal, B<logb>()  returns the exponent I<x> would have if it "
"were normalized."
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:97
msgid "On success, these functions return the exponent of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:116
msgid ""
"If I<x> is negative infinity or positive infinity, then positive infinity is "
"returned."
msgstr ""

#. type: TP
#: build/C/man3/logb.3:123
#, no-wrap
msgid "Pole error: I<x> is 0"
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:151
msgid "The B<logb>(), B<logbf>(), and B<logbl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/logb.3:156
msgid "B<ilogb>(3), B<log>(3)"
msgstr ""

#. type: TH
#: build/C/man3/lrint.3:27
#, no-wrap
msgid "LRINT"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:30
msgid "lrint, lrintf, lrintl, llrint, llrintf, llrintl - round to nearest integer"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:35
#, no-wrap
msgid "B<long int lrint(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:37
#, no-wrap
msgid "B<long int lrintf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:39
#, no-wrap
msgid "B<long int lrintl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:41
#, no-wrap
msgid "B<long long int llrint(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:43
#, no-wrap
msgid "B<long long int llrintf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:45
#, no-wrap
msgid "B<long long int llrintl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:56 build/C/man3/lround.3:57
msgid "All functions shown above:"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:68
msgid ""
"These functions round their argument to the nearest integer value, using the "
"current rounding direction (see B<fesetround>(3))."
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:74
msgid ""
"Note that unlike the B<rint>(3)  family of functions, the return type of "
"these functions differs from that of their arguments."
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:76 build/C/man3/lround.3:79 build/C/man3/rint.3:113 build/C/man3/round.3:77 build/C/man3/trunc.3:65
msgid "These functions return the rounded integer value."
msgstr ""

#.  The return value is -(LONG_MAX - 1) or -(LLONG_MAX -1)
#. type: Plain text
#: build/C/man3/lrint.3:88 build/C/man3/lround.3:91
msgid ""
"If I<x> is a NaN or an infinity, or the rounded value is too large to be "
"stored in a I<long> (I<long long> in the case of the B<ll*> functions), then "
"a domain error occurs, and the return value is unspecified."
msgstr ""

#. type: TP
#: build/C/man3/lrint.3:95 build/C/man3/lround.3:98
#, no-wrap
msgid "Domain error: I<x> is a NaN or infinite, or the rounded value is too large"
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:121
msgid ""
"The B<lrint>(), B<lrintf>(), B<lrintl>(), B<llrint>(), B<llrintf>(), and "
"B<llrintl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/lrint.3:130
msgid ""
"B<ceil>(3), B<floor>(3), B<lround>(3), B<nearbyint>(3), B<rint>(3), "
"B<round>(3)"
msgstr ""

#. type: TH
#: build/C/man3/lround.3:27
#, no-wrap
msgid "LROUND"
msgstr ""

#. type: TH
#: build/C/man3/lround.3:27 build/C/man3/rint.3:27
#, no-wrap
msgid "2013-08-26"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:31
msgid ""
"lround, lroundf, lroundl, llround, llroundf, llroundl - round to nearest "
"integer, away from zero"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:36
#, no-wrap
msgid "B<long int lround(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:38
#, no-wrap
msgid "B<long int lroundf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:40
#, no-wrap
msgid "B<long int lroundl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:42
#, no-wrap
msgid "B<long long int llround(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:44
#, no-wrap
msgid "B<long long int llroundf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:46
#, no-wrap
msgid "B<long long int llroundl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:70
msgid ""
"These functions round their argument to the nearest integer value, rounding "
"away from zero, regardless of the current rounding direction (see "
"B<fenv>(3))."
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:77
msgid ""
"Note that unlike the B<round>(3)  and B<ceil>(3), functions, the return type "
"of these functions differs from that of their arguments."
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:124
msgid ""
"The B<lround>(), B<lroundf>(), B<lroundl>(), B<llround>(), B<llroundf>(), "
"and B<llroundl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/lround.3:133 build/C/man3/trunc.3:101
msgid ""
"B<ceil>(3), B<floor>(3), B<lrint>(3), B<nearbyint>(3), B<rint>(3), "
"B<round>(3)"
msgstr ""

#. type: TH
#: build/C/man7/math_error.7:26
#, no-wrap
msgid "MATH_ERROR"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:29
msgid "math_error - detecting errors from mathematical functions"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:34
#, no-wrap
msgid ""
"B<#include E<lt>math.hE<gt>>\n"
"B<#include E<lt>errno.hE<gt>>\n"
"B<#include E<lt>fenv.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:53
msgid ""
"When an error occurs, most library functions indicate this fact by returning "
"a special value (e.g., -1 or NULL).  Because they typically return a "
"floating-point number, the mathematical functions declared in "
"I<E<lt>math.hE<gt>> indicate an error using other mechanisms.  There are two "
"error-reporting mechanisms: the older one sets I<errno>; the newer one uses "
"the floating-point exception mechanism (the use of B<feclearexcept>(3)  and "
"B<fetestexcept>(3), as outlined below)  described in B<fenv>(3)."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:58
msgid ""
"A portable program that needs to check for an error from a mathematical "
"function should set I<errno> to zero, and make the following call"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:62
#, no-wrap
msgid "feclearexcept(FE_ALL_EXCEPT);\n"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:66
msgid "before calling a mathematical function."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:72
msgid ""
"Upon return from the mathematical function, if I<errno> is nonzero, or the "
"following call (see B<fenv>(3))  returns nonzero"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:77
#, no-wrap
msgid ""
"fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW |\n"
"             FE_UNDERFLOW);\n"
msgstr ""

#.  enum
#.  {
#.  FE_INVALID = 0x01,
#.  __FE_DENORM = 0x02,
#.  FE_DIVBYZERO = 0x04,
#.  FE_OVERFLOW = 0x08,
#.  FE_UNDERFLOW = 0x10,
#.  FE_INEXACT = 0x20
#.  };
#. type: Plain text
#: build/C/man7/math_error.7:90
msgid "then an error occurred in the mathematical function."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:93
msgid ""
"The error conditions that can occur for mathematical functions are described "
"below."
msgstr ""

#. type: SS
#: build/C/man7/math_error.7:93
#, no-wrap
msgid "Domain error"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:109
msgid ""
"A I<domain error> occurs when a mathematical function is supplied with an "
"argument whose value falls outside the domain for which the function is "
"defined (e.g., giving a negative argument to B<log>(3)).  When a domain "
"error occurs, math functions commonly return a NaN (though some functions "
"return a different value in this case); I<errno> is set to B<EDOM>, and an "
"\"invalid\" (B<FE_INVALID>)  floating-point exception is raised."
msgstr ""

#. type: SS
#: build/C/man7/math_error.7:109
#, no-wrap
msgid "Pole error"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:133
msgid ""
"A I<pole error> occurs when the mathematical result of a function is an "
"exact infinity (e.g., the logarithm of 0 is negative infinity).  When a pole "
"error occurs, the function returns the (signed) value B<HUGE_VAL>, "
"B<HUGE_VALF>, or B<HUGE_VALL>, depending on whether the function result type "
"is I<double>, I<float>, or I<long double>.  The sign of the result is that "
"which is mathematically correct for the function.  I<errno> is set to "
"B<ERANGE>, and a \"divide-by-zero\" (B<FE_DIVBYZERO>)  floating-point "
"exception is raised."
msgstr ""

#. type: SS
#: build/C/man7/math_error.7:133
#, no-wrap
msgid "Range error"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:140
msgid ""
"A I<range error> occurs when the magnitude of the function result means that "
"it cannot be represented in the result type of the function.  The return "
"value of the function depends on whether the range error was an overflow or "
"an underflow."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:162
msgid ""
"A floating result I<overflows> if the result is finite, but is too large to "
"represented in the result type.  When an overflow occurs, the function "
"returns the value B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, depending on "
"whether the function result type is I<double>, I<float>, or I<long double>.  "
"I<errno> is set to B<ERANGE>, and an \"overflow\" (B<FE_OVERFLOW>)  "
"floating-point exception is raised."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:177
msgid ""
"A floating result I<underflows> if the result is too small to be represented "
"in the result type.  If an underflow occurs, a mathematical function "
"typically returns 0.0 (C99 says a function shall return \"an "
"implementation-defined value whose magnitude is no greater than the smallest "
"normalized positive number in the specified type\").  I<errno> may be set to "
"B<ERANGE>, and an \"overflow\" (B<FE_UNDERFLOW>)  floating-point exception "
"may be raised."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:187
msgid ""
"Some functions deliver a range error if the supplied argument value, or the "
"correct function result, would be I<subnormal>.  A subnormal value is one "
"that is nonzero, but with a magnitude that is so small that it can't be "
"presented in normalized form (i.e., with a 1 in the most significant bit of "
"the significand).  The representation of a subnormal number will contain one "
"or more leading zeros in the significand."
msgstr ""

#.  See CONFORMANCE in the glibc 2.8 (and earlier) source.
#. type: Plain text
#: build/C/man7/math_error.7:209
msgid ""
"The I<math_errhandling> identifier specified by C99 and POSIX.1-2001 is not "
"supported by glibc.  This identifier is supposed to indicate which of the "
"two error-notification mechanisms (I<errno>, exceptions retrievable via "
"B<fettestexcept>(3))  is in use.  The standards require that at least one be "
"in use, but permit both to be available.  The current (version 2.8) "
"situation under glibc is messy.  Most (but not all) functions raise "
"exceptions on errors.  Some also set I<errno>.  A few functions set "
"I<errno>, but don't raise an exception.  A very few functions do neither.  "
"See the individual manual pages for details."
msgstr ""

#.  http://www.securecoding.cert.org/confluence/display/seccode/FLP32-C.+Prevent+or+detect+domain+and+range+errors+in+math+functions
#. type: Plain text
#: build/C/man7/math_error.7:222
msgid ""
"To avoid the complexities of using I<errno> and B<fetestexcept>(3)  for "
"error checking, it is often advised that one should instead check for bad "
"argument values before each call.  For example, the following code ensures "
"that B<log>(3)'s argument is not a NaN and is not zero (a pole error) or "
"less than zero (a domain error):"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:226
#, no-wrap
msgid "double x, r;\n"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:230
#, no-wrap
msgid ""
"if (isnan(x) || islessequal(x, 0)) {\n"
"    /* Deal with NaN / pole error / domain error */\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:232
#, no-wrap
msgid "r = log(x);\n"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:240
msgid ""
"The discussion on this page does not apply to the complex mathematical "
"functions (i.e., those declared by I<E<lt>complex.hE<gt>>), which in general "
"are not required to return errors by C99 and POSIX.1-2001."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:256
msgid ""
"The B<gcc>(1)  I<-fno-math-errno> option causes the executable to employ "
"implementations of some mathematical functions that are faster than the "
"standard implementations, but do not set I<errno> on error.  (The B<gcc>(1)  "
"I<-ffast-math> option also enables I<-fno-math-errno>.)  An error can still "
"be tested for using B<fetestexcept>(3)."
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:265
msgid ""
"B<gcc>(1), B<errno>(3), B<fenv>(3), B<fpclassify>(3), B<INFINITY>(3), "
"B<isgreater>(3), B<matherr>(3), B<nan>(3)"
msgstr ""

#. type: Plain text
#: build/C/man7/math_error.7:267
msgid "I<info libc>"
msgstr ""

#. type: TH
#: build/C/man3/matherr.3:27
#, no-wrap
msgid "MATHERR"
msgstr ""

#. type: TH
#: build/C/man3/matherr.3:27
#, no-wrap
msgid "2010-09-10"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:30
msgid "matherr - SVID math library exception handling"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:34
#, no-wrap
msgid ""
"B<#define _SVID_SOURCE>             /* See feature_test_macros(7) */\n"
"B<#include E<lt>math.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:36
#, no-wrap
msgid "B<int matherr(struct exception *>I<exc>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:38
#, no-wrap
msgid "B<extern _LIB_VERSION_TYPE _LIB_VERSION;>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:51
msgid ""
"The System V Interface Definition (SVID) specifies that various math "
"functions should invoke a function called B<matherr>()  if a math exception "
"is detected.  This function is called before the math function returns; "
"after B<matherr>()  returns, the system then returns to the math function, "
"which in turn returns to the caller."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:62
msgid ""
"The B<matherr>()  mechanism is supported by glibc, but is now obsolete: new "
"applications should use the techniques described in B<math_error>(7)  and "
"B<fenv>(3).  This page documents the glibc B<matherr>()  mechanism as an aid "
"for maintaining and porting older applications."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:75
msgid ""
"To employ B<matherr>(), the programmer must define the B<_SVID_SOURCE> "
"feature test macro (before including I<any> header files), and assign the "
"value B<_SVID_> to the external variable B<_LIB_VERSION>."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:87
msgid ""
"The system provides a default version of B<matherr>().  This version does "
"nothing, and returns zero (see below for the significance of this).  The "
"default B<matherr>()  can be overridden by a programmer-defined version, "
"which will be invoked when an exception occurs.  The function is invoked "
"with one argument, a pointer to an I<exception> structure, defined as "
"follows:"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:97
#, no-wrap
msgid ""
"struct exception {\n"
"    int    type;      /* Exception type */\n"
"    char  *name;      /* Name of function causing exception */\n"
"    double arg1;      /* 1st argument to function */\n"
"    double arg2;      /* 2nd argument to function */\n"
"    double retval;    /* Function return value */\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:103
msgid "The I<type> field has one of the following values:"
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:103
#, no-wrap
msgid "B<DOMAIN>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:111
msgid ""
"A domain error occurred (the function argument was outside the range for "
"which the function is defined).  The return value depends on the function; "
"I<errno> is set to B<EDOM>."
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:111
#, no-wrap
msgid "B<SING>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:122
msgid ""
"A pole error occurred (the function result is an infinity).  The return "
"value in most cases is B<HUGE> (the largest single precision floating-point "
"number), appropriately signed.  In most cases, I<errno> is set to B<EDOM>."
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:122
#, no-wrap
msgid "B<OVERFLOW>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:131
msgid ""
"An overflow occurred.  In most cases, the value B<HUGE> is returned, and "
"I<errno> is set to B<ERANGE>."
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:131
#, no-wrap
msgid "B<UNDERFLOW>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:138
msgid "An underflow occurred.  0.0 is returned, and I<errno> is set to B<ERANGE>."
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:138
#, no-wrap
msgid "B<TLOSS>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:145
msgid ""
"Total loss of significance.  0.0 is returned, and I<errno> is set to "
"B<ERANGE>."
msgstr ""

#. type: TP
#: build/C/man3/matherr.3:145
#, no-wrap
msgid "B<PLOSS>"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:150
msgid ""
"Partial loss of significance.  This value is unused on glibc (and many other "
"systems)."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:158
msgid ""
"The I<arg1> and I<arg2> fields are the arguments supplied to the function "
"(I<arg2> is undefined for functions that take only one argument)."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:166
msgid ""
"The I<retval> field specifies the return value that the math function will "
"return to its caller.  The programmer-defined B<matherr>()  can modify this "
"field to change the return value of the math function."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:173
msgid ""
"If the B<matherr>()  function returns zero, then the system sets I<errno> as "
"described above, and may print an error message on standard error (see "
"below)."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:179
msgid ""
"If the B<matherr>()  function returns a nonzero value, then the system does "
"not set I<errno>, and doesn't print an error message."
msgstr ""

#. type: SS
#: build/C/man3/matherr.3:179
#, no-wrap
msgid "Math functions that employ matherr()"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:189
msgid ""
"The table below lists the functions and circumstances in which B<matherr>()  "
"is called.  The \"Type\" column indicates the value assigned to "
"I<exc-E<gt>type> when calling B<matherr>().  The \"Result\" column is the "
"default return value assigned to I<exc-E<gt>retval>."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:195
msgid ""
"The \"Msg?\" and \"errno\" columns describe the default behavior if "
"B<matherr>()  returns zero.  If the \"Msg?\" columns contains \"y\", then "
"the system prints an error message on standard error."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:197
msgid "The table uses the following notations and abbreviations:"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:209
#, no-wrap
msgid ""
"x        first argument to function\n"
"y        second argument to function\n"
"fin      finite value for argument\n"
"neg      negative value for argument\n"
"int      integral value for argument\n"
"o/f      result overflowed\n"
"u/f      result underflowed\n"
"|x|      absolute value of x\n"
"X_TLOSS  is a constant defined in I<E<lt>math.hE<gt>>\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:216
#, no-wrap
msgid "Function\tType\tResult\tMsg?\terrno\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:217
#, no-wrap
msgid "acos(|x|E<gt>1)\tDOMAIN\tHUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:218
#, no-wrap
msgid "asin(|x|E<gt>1)\tDOMAIN\tHUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:219
#, no-wrap
msgid "atan2(0,0)\tDOMAIN\tHUGE\ty\tEDOM\n"
msgstr ""

#.  retval is 0.0/0.0
#. type: tbl table
#: build/C/man3/matherr.3:220
#, no-wrap
msgid "acosh(xE<lt>1)\tDOMAIN\tNAN\ty\tEDOM\t\n"
msgstr ""

#.  retval is 0.0/0.0
#. type: tbl table
#: build/C/man3/matherr.3:221
#, no-wrap
msgid "atanh(|x|E<gt>1)\tDOMAIN\tNAN\ty\tEDOM\t\n"
msgstr ""

#.  retval is x/0.0
#. type: tbl table
#: build/C/man3/matherr.3:222
#, no-wrap
msgid "atanh(|x|==1)\tSING\t(xE<gt>0.0)?\ty\tEDOM\t\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:223 build/C/man3/matherr.3:268
#, no-wrap
msgid "\\ \t\\ \tHUGE_VAL :\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:224 build/C/man3/matherr.3:269
#, no-wrap
msgid "\\ \t\\ \t-HUGE_VAL\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:225
#, no-wrap
msgid "cosh(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:226
#, no-wrap
msgid "sinh(fin) o/f\tOVERFLOW\t(xE<gt>0.0) ?\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:227
#, no-wrap
msgid "\\ \t\\ \tHUGE : -HUGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:228
#, no-wrap
msgid "sqrt(xE<lt>0)\tDOMAIN\t0.0\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:229
#, no-wrap
msgid "hypot(fin,fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:230
#, no-wrap
msgid "exp(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:231
#, no-wrap
msgid "exp(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:232
#, no-wrap
msgid "exp2(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:233
#, no-wrap
msgid "exp2(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:234
#, no-wrap
msgid "exp10(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:235
#, no-wrap
msgid "exp10(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:236
#, no-wrap
msgid "j0(|x|E<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:237
#, no-wrap
msgid "j1(|x|E<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:238
#, no-wrap
msgid "jn(|x|E<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:239
#, no-wrap
msgid "y0(xE<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:240
#, no-wrap
msgid "y1(xE<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:241
#, no-wrap
msgid "yn(xE<gt>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:242
#, no-wrap
msgid "y0(0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:243
#, no-wrap
msgid "y0(xE<lt>0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:244
#, no-wrap
msgid "y1(0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:245
#, no-wrap
msgid "y1(xE<lt>0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:246
#, no-wrap
msgid "yn(n,0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:247
#, no-wrap
msgid "yn(xE<lt>0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:248
#, no-wrap
msgid "lgamma(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:249
#, no-wrap
msgid "lgamma(-int) or\tSING\tHUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:250
#, no-wrap
msgid "\\ \\ lgamma(0)\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:251
#, no-wrap
msgid "tgamma(fin) o/f\tOVERFLOW\tHUGE_VAL\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:252
#, no-wrap
msgid "tgamma(-int)\tSING\tNAN\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:253
#, no-wrap
msgid "tgamma(0)\tSING\tcopysign(\ty\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:254
#, no-wrap
msgid "\\ \t\\ \tHUGE_VAL,x)\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:255
#, no-wrap
msgid "log(0)\tSING\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:256
#, no-wrap
msgid "log(xE<lt>0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#.  different from log()
#. type: tbl table
#: build/C/man3/matherr.3:257
#, no-wrap
msgid "log2(0)\tSING\t-HUGE\tn\tEDOM\t\n"
msgstr ""

#.  different from log()
#. type: tbl table
#: build/C/man3/matherr.3:258
#, no-wrap
msgid "log2(xE<lt>0)\tDOMAIN\t-HUGE\tn\tEDOM\t\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:259
#, no-wrap
msgid "log10(0)\tSING\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:260
#, no-wrap
msgid "log10(xE<lt>0)\tDOMAIN\t-HUGE\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:261
#, no-wrap
msgid "pow(0.0,0.0)\tDOMAIN\t0.0\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:262
#, no-wrap
msgid "pow(x,y) o/f\tOVERFLOW\tHUGE\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:263
#, no-wrap
msgid "pow(x,y) u/f\tUNDERFLOW\t0.0\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:264
#, no-wrap
msgid "pow(NaN,0.0)\tDOMAIN\tx\tn\tEDOM\n"
msgstr ""

#.  +0 and -0
#. type: tbl table
#: build/C/man3/matherr.3:265
#, no-wrap
msgid "0**neg\tDOMAIN\t0.0\ty\tEDOM\t\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:266
#, no-wrap
msgid "neg**non-int\tDOMAIN\t0.0\ty\tEDOM\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:267
#, no-wrap
msgid "scalb() o/f\tOVERFLOW\t(xE<gt>0.0) ?\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:270
#, no-wrap
msgid "scalb() u/f\tUNDERFLOW\tcopysign(\tn\tERANGE\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:271
#, no-wrap
msgid "\\ \t\\ \t\\ \\ 0.0,x)\n"
msgstr ""

#. type: tbl table
#: build/C/man3/matherr.3:272
#, no-wrap
msgid "fmod(x,0)\tDOMAIN\tx\ty\tEDOM\n"
msgstr ""

#.  retval is 0.0/0.0
#. type: tbl table
#: build/C/man3/matherr.3:273
#, no-wrap
msgid "remainder(x,0)\tDOMAIN\tNAN\ty\tEDOM\t\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:296
msgid ""
"The example program demonstrates the use of B<matherr>()  when calling "
"B<log>(3).  The program takes up to three command-line arguments.  The first "
"argument is the floating-point number to be given to B<log>(3).  If the "
"optional second argument is provided, then B<_LIB_VERSION> is set to "
"B<_SVID_> so that B<matherr>()  is called, and the integer supplied in the "
"command-line argument is used as the return value from B<matherr>().  If the "
"optional third command-line argument is supplied, then it specifies an "
"alternative return value that B<matherr>()  should assign as the return "
"value of the math function."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:301
msgid ""
"The following example run, where B<log>(3)  is given an argument of 0.0, "
"does not use B<matherr>():"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:307
#, no-wrap
msgid ""
"$B< ./a.out 0.0>\n"
"errno: Numerical result out of range\n"
"x=-inf\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:313
msgid "In the following run, B<matherr>()  is called, and returns 0:"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:323
#, no-wrap
msgid ""
"$B< ./a.out 0.0 0>\n"
"matherr SING exception in log() function\n"
"        args:   0.000000, 0.000000\n"
"        retval: -340282346638528859811704183484516925440.000000\n"
"log: SING error\n"
"errno: Numerical argument out of domain\n"
"x=-340282346638528859811704183484516925440.000000\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:327
msgid "The message \"log: SING error\" was printed by the C library."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:331
msgid "In the following run, B<matherr>()  is called, and returns a nonzero value:"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:339
#, no-wrap
msgid ""
"$B< ./a.out 0.0 1>\n"
"matherr SING exception in log() function\n"
"        args:   0.000000, 0.000000\n"
"        retval: -340282346638528859811704183484516925440.000000\n"
"x=-340282346638528859811704183484516925440.000000\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:345
msgid ""
"In this case, the C library did not print a message, and I<errno> was not "
"set."
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:350
msgid ""
"In the following run, B<matherr>()  is called, changes the return value of "
"the math function, and returns a nonzero value:"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:358
#, no-wrap
msgid ""
"$B< ./a.out 0.0 1 12345.0>\n"
"matherr SING exception in log() function\n"
"        args:   0.000000, 0.000000\n"
"        retval: -340282346638528859811704183484516925440.000000\n"
"x=12345.000000\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:368
#, no-wrap
msgid ""
"#define _SVID_SOURCE\n"
"#include E<lt>errno.hE<gt>\n"
"#include E<lt>math.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:374
#, no-wrap
msgid ""
"static int matherr_ret = 0;     /* Value that matherr()\n"
"                                   should return */\n"
"static int change_retval = 0;   /* Should matherr() change\n"
"                                   function\\(aqs return value? */\n"
"static double new_retval;       /* New function return value */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:389
#, no-wrap
msgid ""
"int\n"
"matherr(struct exception *exc)\n"
"{\n"
"    fprintf(stderr, \"matherr %s exception in %s() function\\en\",\n"
"           (exc-E<gt>type == DOMAIN) ?    \"DOMAIN\" :\n"
"           (exc-E<gt>type == OVERFLOW) ?  \"OVERFLOW\" :\n"
"           (exc-E<gt>type == UNDERFLOW) ? \"UNDERFLOW\" :\n"
"           (exc-E<gt>type == SING) ?      \"SING\" :\n"
"           (exc-E<gt>type == TLOSS) ?     \"TLOSS\" :\n"
"           (exc-E<gt>type == PLOSS) ?     \"PLOSS\" : \"???\",\n"
"            exc-E<gt>name);\n"
"    fprintf(stderr, \"        args:   %f, %f\\en\",\n"
"            exc-E<gt>arg1, exc-E<gt>arg2);\n"
"    fprintf(stderr, \"        retval: %f\\en\", exc-E<gt>retval);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:392
#, no-wrap
msgid ""
"    if (change_retval)\n"
"        exc-E<gt>retval = new_retval;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:395
#, no-wrap
msgid ""
"    return matherr_ret;\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:400
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    double x;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:406
#, no-wrap
msgid ""
"    if (argc E<lt> 2) {\n"
"        fprintf(stderr, \"Usage: %s E<lt>argvalE<gt>\"\n"
"                \" [E<lt>matherr-retE<gt> "
"[E<lt>new-func-retvalE<gt>]]\\en\", argv[0]);\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:411
#, no-wrap
msgid ""
"    if (argc E<gt> 2) {\n"
"        _LIB_VERSION = _SVID_;\n"
"        matherr_ret = atoi(argv[2]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:416
#, no-wrap
msgid ""
"    if (argc E<gt> 3) {\n"
"        change_retval = 1;\n"
"        new_retval = atof(argv[3]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:420
#, no-wrap
msgid ""
"    x = log(atof(argv[1]));\n"
"    if (errno != 0)\n"
"        perror(\"errno\");\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:424
#, no-wrap
msgid ""
"    printf(\"x=%f\\en\", x);\n"
"    exit(EXIT_SUCCESS);\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/matherr.3:429
msgid "B<fenv>(3), B<math_error>(7), B<standards>(7)"
msgstr ""

#. type: TH
#: build/C/man3/modf.3:33
#, no-wrap
msgid "MODF"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:37
msgid ""
"modf, modff, modfl - extract signed integral and fractional values from "
"floating-point number"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:42
#, no-wrap
msgid "B<double modf(double >I<x>B<, double *>I<iptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:44
#, no-wrap
msgid "B<float modff(float >I<x>B<, float *>I<iptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:46
#, no-wrap
msgid "B<long double modfl(long double >I<x>B<, long double *>I<iptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:58
msgid "B<modf>(), B<modfl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:76
msgid ""
"The B<modf>()  function breaks the argument I<x> into an integral part and a "
"fractional part, each of which has the same sign as I<x>.  The integral part "
"is stored in the location pointed to by I<iptr>."
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:81
msgid "The B<modf>()  function returns the fractional part of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:87
msgid "If I<x> is a NaN, a NaN is returned, and I<*iptr> is set to a NaN."
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:93
msgid ""
"If I<x> is positive infinity (negative infinity), +0 (-0) is returned, and "
"I<*iptr> is set to positive infinity (negative infinity)."
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:103
msgid "The B<modf>(), B<modff>(), and B<modfl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/modf.3:112
msgid "B<frexp>(3), B<ldexp>(3)"
msgstr ""

#. type: TH
#: build/C/man3/nan.3:11
#, no-wrap
msgid "NAN"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:14
msgid "nan, nanf, nanl - return 'Not a Number'"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:18
msgid "B<double nan(const char *>I<tagp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:20
msgid "B<float nanf(const char *>I<tagp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:22
msgid "B<long double nanl(const char *>I<tagp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:34
msgid "B<nan>(), B<nanf>(), B<nanl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:48
msgid ""
"These functions return a representation (determined by I<tagp>)  of a quiet "
"NaN.  If the implementation does not support quiet NaNs, these functions "
"return zero."
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:52
msgid "The call I<nan(\"char-sequence\")> is equivalent to:"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:55
#, no-wrap
msgid "    strtod(\"NAN(char-sequence)\", NULL);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:65
msgid ""
"Similarly, calls to B<nanf>()  and B<nanl>()  are equivalent to analogous "
"calls to B<strtof>(3)  and B<strtold>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:73
msgid ""
"The argument I<tagp> is used in an unspecified manner.  On IEEE 754 systems, "
"there are many representations of NaN, and I<tagp> selects one.  On other "
"systems it may do nothing."
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:79
msgid ""
"C99, POSIX.1-2001.  See also IEC 559 and the appendix with recommended "
"functions in IEEE 754/IEEE 854."
msgstr ""

#. type: Plain text
#: build/C/man3/nan.3:83
msgid "B<isnan>(3), B<strtod>(3), B<math_error>(7)"
msgstr ""

#. type: TH
#: build/C/man3/nextafter.3:11
#, no-wrap
msgid "NEXTAFTER"
msgstr ""

#. type: TH
#: build/C/man3/nextafter.3:11
#, no-wrap
msgid "2013-09-02"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:15
msgid ""
"nextafter, nextafterf, nextafterl, nexttoward, nexttowardf, nexttowardl - "
"floating-point number manipulation"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:19
msgid "B<double nextafter(double >I<x>B<, double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:21
msgid "B<float nextafterf(float >I<x>B<, float >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:23
msgid "B<long double nextafterl(long double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:25
msgid "B<double nexttoward(double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:27
msgid "B<float nexttowardf(float >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:29
msgid "B<long double nexttowardl(long double >I<x>B<, long double >I<y>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:39
msgid "B<nextafter>():"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:51
msgid "B<nextafterf>(), B<nextafterl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:62
msgid "B<nexttoward>(), B<nexttowardf>(), B<nexttowardl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:86
msgid ""
"The B<nextafter>(), B<nextafterf>(), and B<nextafterl>()  functions return "
"the next representable floating-point value following I<x> in the direction "
"of I<y>.  If I<y> is less than I<x>, these functions will return the largest "
"representable number less than I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:93
msgid "If I<x> equals I<y>, the functions return I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:104
msgid ""
"The B<nexttoward>(), B<nexttowardf>(), and B<nexttowardl>()  functions do "
"the same as the corresponding B<nextafter>()  functions, except that they "
"have a I<long double> second argument."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:110
msgid ""
"On success, these functions return the next representable floating-point "
"value after I<x> in the direction of I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:120
msgid "If I<x> equals I<y>, then I<y> (cast to the same type as I<x>)  is returned."
msgstr ""

#.  e.g., DBL_MAX
#. type: Plain text
#: build/C/man3/nextafter.3:140
msgid ""
"If I<x> is finite, and the result would overflow, a range error occurs, and "
"the functions return B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, "
"respectively, with the correct mathematical sign."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:149
msgid ""
"If I<x> is not equal to I<y>, and the correct function result would be "
"subnormal, zero, or underflow, a range error occurs, and either the correct "
"value (if it can be represented), or 0.0, is returned."
msgstr ""

#. type: TP
#: build/C/man3/nextafter.3:165
#, no-wrap
msgid "Range error: result is subnormal or underflows"
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:190
msgid ""
"The B<nextafter>(), B<nextafterf>(), B<nextafterl>(), B<nexttoward>(), "
"B<nexttowardf>(), and B<nexttowardl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:199
msgid ""
"In glibc version 2.5 and earlier, these functions do not raise an underflow "
"floating-point (B<FE_UNDERFLOW>)  exception when an underflow occurs."
msgstr ""

#. type: Plain text
#: build/C/man3/nextafter.3:201
msgid "B<nearbyint>(3)"
msgstr ""

#. type: TH
#: build/C/man3/pow.3:35
#, no-wrap
msgid "POW"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:38
msgid "pow, powf, powl - power functions"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:43
#, no-wrap
msgid "B<double pow(double >I<x>B<, double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:45
#, no-wrap
msgid "B<float powf(float >I<x>B<, float >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:47
#, no-wrap
msgid "B<long double powl(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:59
msgid "B<powf>(), B<powl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:75
msgid ""
"The B<pow>()  function returns the value of I<x> raised to the power of "
"I<y>."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:80
msgid "On success, these functions return the value of I<x> to the power of I<y>."
msgstr ""

#.  The domain error is generated at least as far back as glibc 2.4
#. type: Plain text
#: build/C/man3/pow.3:88
msgid ""
"If I<x> is a finite value less than 0, and I<y> is a finite noninteger, a "
"domain error occurs, and a NaN is returned."
msgstr ""

#.  The range error is generated at least as far back as glibc 2.4
#. type: Plain text
#: build/C/man3/pow.3:98
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with the "
"mathematically correct sign."
msgstr ""

#.  POSIX.1 does not specify the sign of the zero,
#.  but http://sources.redhat.com/bugzilla/show_bug.cgi?id=2678
#.  points out that the zero has the wrong sign in some cases.
#. type: Plain text
#: build/C/man3/pow.3:105
msgid ""
"If result underflows, and is not representable, a range error occurs, and "
"0.0 is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:111
msgid "Except as specified below, if I<x> or I<y> is a NaN, the result is a NaN."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:117
msgid "If I<x> is +1, the result is 1.0 (even if I<y> is a NaN)."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:123
msgid "If I<y> is 0, the result is 1.0 (even if I<x> is a NaN)."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:131
msgid ""
"If I<x> is +0 (-0), and I<y> is an odd integer greater than 0, the result is "
"+0 (-0)."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:139
msgid ""
"If I<x> is 0, and I<y> greater than 0 and not an odd integer, the result is "
"+0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:147
msgid ""
"If I<x> is -1, and I<y> is positive infinity or negative infinity, the "
"result is 1.0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:155
msgid ""
"If the absolute value of I<x> is less than 1, and I<y> is negative infinity, "
"the result is positive infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:163
msgid ""
"If the absolute value of I<x> is greater than 1, and I<y> is negative "
"infinity, the result is +0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:171
msgid ""
"If the absolute value of I<x> is less than 1, and I<y> is positive infinity, "
"the result is +0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:179
msgid ""
"If the absolute value of I<x> is greater than 1, and I<y> is positive "
"infinity, the result is positive infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:187
msgid ""
"If I<x> is negative infinity, and I<y> is an odd integer less than 0, the "
"result is -0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:195
msgid ""
"If I<x> is negative infinity, and I<y> less than 0 and not an odd integer, "
"the result is +0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:203
msgid ""
"If I<x> is negative infinity, and I<y> is an odd integer greater than 0, the "
"result is negative infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:211
msgid ""
"If I<x> is negative infinity, and I<y> greater than 0 and not an odd "
"integer, the result is positive infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:219
msgid "If I<x> is positive infinity, and I<y> less than 0, the result is +0."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:227
msgid ""
"If I<x> is positive infinity, and I<y> greater than 0, the result is "
"positive infinity."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:242
msgid ""
"If I<x> is +0 or -0, and I<y> is an odd integer less than 0, a pole error "
"occurs and B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, is returned, with the "
"same sign as I<x>."
msgstr ""

#.  The pole error is generated at least as far back as glibc 2.4
#. type: Plain text
#: build/C/man3/pow.3:256
msgid ""
"If I<x> is +0 or -0, and I<y> is less than 0 and not an odd integer, a pole "
"error occurs and +B<HUGE_VAL>, +B<HUGE_VALF>, or +B<HUGE_VALL>, is returned."
msgstr ""

#. type: TP
#: build/C/man3/pow.3:283
#, no-wrap
msgid "Domain error: I<x> is negative, and I<y> is a finite noninteger"
msgstr ""

#. type: TP
#: build/C/man3/pow.3:291
#, no-wrap
msgid "Pole error: I<x> is zero, and I<y> is negative"
msgstr ""

#. type: TP
#: build/C/man3/pow.3:300
#, no-wrap
msgid "Range error: the result overflows"
msgstr ""

#. type: TP
#: build/C/man3/pow.3:308
#, no-wrap
msgid "Range error: the result underflows"
msgstr ""

#
#.  http://sources.redhat.com/bugzilla/show_bug.cgi?id=6776
#.  or possibly 2.9, I haven't found the source code change
#.  and I don't have a 2.9 system to test
#. type: Plain text
#: build/C/man3/pow.3:336
msgid ""
"In glibc 2.9 and earlier, when a pole error occurs, I<errno> is set to "
"B<EDOM> instead of the POSIX-mandated B<ERANGE>.  Since version 2.10, glibc "
"does the right thing."
msgstr ""

#.  see bug http://sources.redhat.com/bugzilla/show_bug.cgi?id=3866
#.  and http://sources.redhat.com/bugzilla/show_bug.cgi?id=369
#. type: Plain text
#: build/C/man3/pow.3:356
msgid ""
"If I<x> is negative, then large negative or positive I<y> values yield a NaN "
"as the function result, with I<errno> set to B<EDOM>, and an invalid "
"(B<FE_INVALID>)  floating-point exception.  For example, with B<pow>(), one "
"sees this behavior when the absolute value of I<y> is greater than about "
"9.223373e18."
msgstr ""

#.  FIXME . Actually, 2.3.2 is the earliest test result I have; so yet
#.  to confirm if this error occurs only in 2.3.2.
#. type: Plain text
#: build/C/man3/pow.3:365
msgid ""
"In version 2.3.2 and earlier, when an overflow or underflow error occurs, "
"glibc's B<pow>()  generates a bogus invalid floating-point exception "
"(B<FE_INVALID>)  in addition to the overflow or underflow exception."
msgstr ""

#. type: Plain text
#: build/C/man3/pow.3:369
msgid "B<cbrt>(3), B<cpow>(3), B<sqrt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/pow10.3:25
#, no-wrap
msgid "POW10"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:28
msgid "pow10, pow10f, pow10l - base-10 power functions"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:32 build/C/man3/sincos.3:16
#, no-wrap
msgid ""
"B<#define _GNU_SOURCE>         /* See feature_test_macros(7) */\n"
"B<#include E<lt>math.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:34
#, no-wrap
msgid "B<double pow10(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:36
#, no-wrap
msgid "B<float pow10f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:38
#, no-wrap
msgid "B<long double pow10l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:47
msgid "The B<pow10>()  function returns the value of 10 raised to the power I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:51
msgid "This is a GNU extension."
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:54
msgid "These functions are identical to the functions listed under B<exp10>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/pow10.3:57
msgid "B<exp10>(3), B<pow>(3)"
msgstr ""

#. type: TH
#: build/C/man3/remainder.3:37
#, no-wrap
msgid "REMAINDER"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:41
msgid ""
"drem, dremf, dreml, remainder, remainderf, remainderl - floating-point "
"remainder function"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:49
#, no-wrap
msgid ""
"/* The C99 versions */\n"
"B<double remainder(double >I<x>B<, double >I<y>B<);>\n"
"B<float remainderf(float >I<x>B<, float >I<y>B<);>\n"
"B<long double remainderl(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:54
#, no-wrap
msgid ""
"/* Obsolete synonyms */\n"
"B<double drem(double >I<x>B<, double >I<y>B<);>\n"
"B<float dremf(float >I<x>B<, float >I<y>B<);>\n"
"B<long double dreml(long double >I<x>B<, long double >I<y>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:65
msgid "B<remainder>():"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:70
msgid ""
"_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 500 || "
"_XOPEN_SOURCE\\ &&\\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE || "
"_POSIX_C_SOURCE\\ E<gt>=\\ 200112L;"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:77
msgid "B<remainderf>(), B<remainderl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:88
msgid "B<drem>(), B<dremf>(), B<dreml>():"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:90 build/C/man3/significand.3:35
msgid "_SVID_SOURCE || _BSD_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:111
msgid ""
"The B<remainder>()  function computes the remainder of dividing I<x> by "
"I<y>.  The return value is I<x>-I<n>*I<y>, where I<n> is the value I<x\\ /\\ "
"y>, rounded to the nearest integer.  If the absolute value of I<x>-I<n>*I<y> "
"is 0.5, I<n> is chosen to be even."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:114
msgid ""
"These functions are unaffected by the current rounding mode (see "
"B<fenv>(3))."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:118
msgid "The B<drem>()  function does precisely the same thing."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:124
msgid ""
"On success, these functions return the floating-point remainder, "
"I<x>-I<n>*I<y>.  If the return value is 0, it has the sign of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:139 build/C/man3/remquo.3:92
msgid ""
"If I<x> is an infinity, and I<y> is not a NaN, a domain error occurs, and a "
"NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:150 build/C/man3/remquo.3:101
msgid ""
"If I<y> is zero, and I<x> is not a NaN, a domain error occurs, and a NaN is "
"returned."
msgstr ""

#. type: TP
#: build/C/man3/remainder.3:157
#, no-wrap
msgid "Domain error: I<x> is an infinity and I<y> is not a NaN"
msgstr ""

#.  IEC 60559.
#. type: Plain text
#: build/C/man3/remainder.3:188
msgid ""
"The functions B<remainder>(), B<remainderf>(), and B<remainderl>()  are "
"specified in C99 and POSIX.1-2001."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:204
msgid ""
"The function B<drem>()  is from 4.3BSD.  The I<float> and I<long double> "
"variants B<dremf>()  and B<dreml>()  exist on some systems, such as Tru64 "
"and glibc2.  Avoid the use of these functions in favor of B<remainder>()  "
"etc."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:206
msgid "The call"
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:208
#, no-wrap
msgid "    remainder(nan(\"\"), 0);\n"
msgstr ""

#.  FIXME . this bug occurs as at glibc 2.8.
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6779
#. type: Plain text
#: build/C/man3/remainder.3:213
msgid ""
"returns a NaN, as expected, but wrongly causes a domain error; it should "
"yield a silent NaN."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:215
msgid "The call \"remainder(29.0, 3.0)\" returns -1."
msgstr ""

#. type: Plain text
#: build/C/man3/remainder.3:219
msgid "B<div>(3), B<fmod>(3), B<remquo>(3)"
msgstr ""

#. type: TH
#: build/C/man3/remquo.3:12
#, no-wrap
msgid "REMQUO"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:15
msgid "remquo, remquof, remquol - remainder and part of quotient"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:20
#, no-wrap
msgid "B<double remquo(double >I<x>B<, double >I<y>B<, int *>I<quo>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:22
#, no-wrap
msgid "B<float remquof(float >I<x>B<, float >I<y>B<, int *>I<quo>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:24
#, no-wrap
msgid ""
"B<long double remquol(long double >I<x>B<, long double >I<y>B<, int "
"*>I<quo>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:37
msgid "B<remquo>(), B<remquof>(), B<remquol>():"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:55
msgid ""
"These functions compute the remainder and part of the quotient upon division "
"of I<x> by I<y>.  A few bits of the quotient are stored via the I<quo> "
"pointer.  The remainder is returned as the function result."
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:59
msgid ""
"The value of the remainder is the same as that computed by the "
"B<remainder>(3)  function."
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:65
msgid ""
"The value stored via the I<quo> pointer has the sign of I<x\\ /\\ y> and "
"agrees with the quotient in at least the low order 3 bits."
msgstr ""

#.  A possible application of this function might be the computation
#.  of sin(x). Compute remquo(x, pi/2, &quo) or so.
#
#.  glibc, UnixWare: return 3 bits
#.  MacOS 10: return 7 bits
#. type: Plain text
#: build/C/man3/remquo.3:73
msgid ""
"For example, I<remquo(29.0,\\ 3.0)> returns -1.0 and might store 2.  Note "
"that the actual quotient might not fit in an integer."
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:77
msgid ""
"On success, these functions return the same value as the analogous functions "
"described in B<remainder>(3)."
msgstr ""

#. type: TP
#: build/C/man3/remquo.3:108
#, no-wrap
msgid ""
"Domain error: I<x> is an infinity or I<y> is 0, and the other argument is "
"not a NaN"
msgstr ""

#. type: Plain text
#: build/C/man3/remquo.3:130
msgid "B<fmod>(3), B<logb>(3), B<remainder>(3)"
msgstr ""

#. type: TH
#: build/C/man3/rint.3:27
#, no-wrap
msgid "RINT"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:31
msgid ""
"nearbyint, nearbyintf, nearbyintl, rint, rintf, rintl - round to nearest "
"integer"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:36
#, no-wrap
msgid "B<double nearbyint(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:38
#, no-wrap
msgid "B<float nearbyintf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:40
#, no-wrap
msgid "B<long double nearbyintl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:42
#, no-wrap
msgid "B<double rint(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:44
#, no-wrap
msgid "B<float rintf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:46
#, no-wrap
msgid "B<long double rintl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:59
msgid "B<nearbyint>(), B<nearbyintf>(), B<nearbyintl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:61
msgid ""
"_XOPEN_SOURCE\\ E<gt>=\\ 600 || _POSIX_C_SOURCE\\ E<gt>=\\ 200112L || "
"_ISOC99_SOURCE;"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:67
msgid "B<rint>():"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:78
msgid "B<rintf>(), B<rintl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:98
msgid ""
"The B<nearbyint>(), B<nearbyintf>(), and B<nearbyintl>()  functions round "
"their argument to an integer value in floating-point format, using the "
"current rounding direction (see B<fesetround>(3))  and without raising the "
"I<inexact> exception."
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:111
msgid ""
"The B<rint>(), B<rintf>(), and B<rintl>()  functions do the same, but will "
"raise the I<inexact> exception (B<FE_INEXACT>, checkable via "
"B<fetestexcept>(3))  when the result differs in value from the argument."
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:133
msgid ""
"The B<nearbyint>(), B<nearbyintf>(), B<nearbyintl>(), B<rint>(), B<rintf>(), "
"and B<rintl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:155
msgid ""
"If you want to store the rounded value in an integer type, you probably want "
"to use one of the functions described in B<lrint>(3)  instead."
msgstr ""

#. type: Plain text
#: build/C/man3/rint.3:161
msgid "B<ceil>(3), B<floor>(3), B<lrint>(3), B<round>(3), B<trunc>(3)"
msgstr ""

#. type: TH
#: build/C/man3/round.3:27
#, no-wrap
msgid "ROUND"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:30
msgid "round, roundf, roundl - round to nearest integer, away from zero"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:35
#, no-wrap
msgid "B<double round(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:37
#, no-wrap
msgid "B<float roundf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:39
#, no-wrap
msgid "B<long double roundl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:52
msgid "B<round>(), B<roundf>(), B<roundl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:69
msgid ""
"These functions round I<x> to the nearest integer, but round halfway cases "
"away from zero (regardless of the current rounding direction, see "
"B<fenv>(3)), instead of to the nearest even integer like B<rint>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:75
msgid "For example, I<round(0.5)> is 1.0, and I<round(-0.5)> is -1.0."
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:96
msgid "The B<round>(), B<roundf>(), and B<roundl>()  functions are thread-safe."
msgstr ""

#.  The POSIX.1-2001 APPLICATION USAGE SECTION discusses this point.
#. type: Plain text
#: build/C/man3/round.3:114
msgid ""
"POSIX.1-2001 contains text about overflow (which might set I<errno> to "
"B<ERANGE>, or raise an B<FE_OVERFLOW> exception).  In practice, the result "
"cannot overflow on any current machine, so this error-handling stuff is just "
"nonsense.  (More precisely, overflow can happen only when the maximum value "
"of the exponent is smaller than the number of mantissa bits.  For the "
"IEEE-754 standard 32-bit and 64-bit floating-point numbers the maximum value "
"of the exponent is 128 (respectively, 1024), and the number of mantissa bits "
"is 24 (respectively, 53).)"
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:119
msgid ""
"If you want to store the rounded value in an integer type, you probably want "
"to use one of the functions described in B<lround>(3)  instead."
msgstr ""

#. type: Plain text
#: build/C/man3/round.3:126
msgid ""
"B<ceil>(3), B<floor>(3), B<lround>(3), B<nearbyint>(3), B<rint>(3), "
"B<trunc>(3)"
msgstr ""

#. type: TH
#: build/C/man3/scalb.3:27
#, no-wrap
msgid "SCALB"
msgstr ""

#. type: TH
#: build/C/man3/scalb.3:27
#, no-wrap
msgid "2013-03-23"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:31
msgid ""
"scalb, scalbf, scalbl - multiply floating-point number by integral power of "
"radix (OBSOLETE)"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:35
msgid "B<double scalb(double >I<x>B<, double >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:37
msgid "B<float scalbf(float >I<x>B<, float >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:39
msgid "B<long double scalbl(long double >I<x>B<, long double >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:49
msgid "B<scalb>():"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:52
msgid ""
"_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 500 || "
"_XOPEN_SOURCE\\ &&\\ _XOPEN_SOURCE_EXTENDED"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:56
msgid "B<scalbf>(), B<scalbl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:69 build/C/man3/scalbln.3:85
msgid ""
"These functions multiply their first argument I<x> by B<FLT_RADIX> (probably "
"2)  to the power of I<exp>, that is:"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:72 build/C/man3/scalbln.3:88
#, no-wrap
msgid "    x * FLT_RADIX ** exp\n"
msgstr ""

#.  not in /usr/include but in a gcc lib
#. type: Plain text
#: build/C/man3/scalb.3:79 build/C/man3/scalbln.3:95
msgid ""
"The definition of B<FLT_RADIX> can be obtained by including "
"I<E<lt>float.hE<gt>>."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:86 build/C/man3/scalbln.3:102
msgid "On success, these functions return I<x> * B<FLT_RADIX> ** I<exp>."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:92
msgid "If I<x> or I<exp> is a NaN, a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:100
msgid ""
"If I<x> is positive infinity (negative infinity), and I<exp> is not negative "
"infinity, positive infinity (negative infinity) is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:106
msgid ""
"If I<x> is +0 (-0), and I<exp> is not positive infinity, +0 (-0) is "
"returned."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:114
msgid ""
"If I<x> is zero, and I<exp> is positive infinity, a domain error occurs, and "
"a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:123
msgid ""
"If I<x> is an infinity, and I<exp> is negative infinity, a domain error "
"occurs, and a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:138 build/C/man3/scalbln.3:130
msgid ""
"If the result underflows, a range error occurs, and the functions return "
"zero, with a sign the same as I<x>."
msgstr ""

#. type: TP
#: build/C/man3/scalb.3:145
#, no-wrap
msgid ""
"Domain error: I<x> is 0, and I<exp> is positive infinity, or I<x> is "
"positive infinity and I<exp> is negative infinity and the other argument is "
"not a NaN"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:191
msgid ""
"B<scalb>()  is specified in POSIX.1-2001, but marked obsolescent.  "
"POSIX.1-2008 removes the specification of B<scalb>(), recommending the use "
"of B<scalbln>(3), B<scalblnf>(3), or B<scalblnl>(3)  instead.  The "
"B<scalb>()  function is from 4.3BSD."
msgstr ""

#.  Looking at header files: scalbf() is present on the
#.  BSDs, Tru64, HP-UX 11, Irix 6.5; scalbl() is on HP-UX 11 and Tru64.
#. type: Plain text
#: build/C/man3/scalb.3:200
msgid ""
"B<scalbf>()  and B<scalbl>()  are unstandardized; B<scalbf>()  is "
"nevertheless present on several other systems"
msgstr ""

#. type: Plain text
#: build/C/man3/scalb.3:203
msgid "B<ldexp>(3), B<scalbln>(3)"
msgstr ""

#. type: TH
#: build/C/man3/scalbln.3:27
#, no-wrap
msgid "SCALBLN"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:31
msgid ""
"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl - multiply "
"floating-point number by integral power of radix"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:35
msgid "B<double scalbln(double >I<x>B<, long int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:37
msgid "B<float scalblnf(float >I<x>B<, long int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:39
msgid "B<long double scalblnl(long double >I<x>B<, long int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:41
msgid "B<double scalbn(double >I<x>B<, int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:43
msgid "B<float scalbnf(float >I<x>B<, int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:45
msgid "B<long double scalbnl(long double >I<x>B<, int >I<exp>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:57
msgid "B<scalbln>(), B<scalblnf>(), B<scalblnl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:68
msgid "B<scalbn>(), B<scalbnf>(), B<scalbnl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:171
msgid ""
"The B<scalbn>(), B<scalbnf>(), B<scalbnl>(), B<scalbln>(), B<scalblnf>(), "
"and B<scalblnl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:182
msgid ""
"These functions differ from the obsolete functions described in B<scalb>(3)  "
"in the type of their second argument.  The functions described on this page "
"have a second argument of an integral type, while those in B<scalb>(3)  have "
"a second argument of type I<double>."
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:189
msgid ""
"If B<FLT_RADIX> equals 2 (which is usual), then B<scalbn>()  is equivalent "
"to B<ldexp>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/scalbln.3:192
msgid "B<ldexp>(3), B<scalb>(3)"
msgstr ""

#. type: TH
#: build/C/man3/signbit.3:11
#, no-wrap
msgid "SIGNBIT"
msgstr ""

#. type: TH
#: build/C/man3/signbit.3:11
#, no-wrap
msgid "2013-07-04"
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:14
msgid "signbit - test sign of a real floating-point number"
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:18
msgid "B<int signbit(>I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:28
msgid "B<signbit>():"
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:42
msgid ""
"B<signbit>()  is a generic macro which can work on all real floating-point "
"types.  It returns a nonzero value if the value of I<x> has its sign bit "
"set."
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:51
msgid ""
"This is not the same as I<x E<lt> 0.0>, because IEEE 754 floating point "
"allows zero to be signed.  The comparison I<-0.0 E<lt> 0.0> is false, but "
"I<signbit(-0.0)> will return a nonzero value."
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:53
msgid "NaNs and infinities have a sign bit."
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:59
msgid ""
"The B<signbit>()  macro returns nonzero if the sign of I<x> is negative; "
"otherwise it returns zero."
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:66
msgid "The B<signbit>()  macro is thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/signbit.3:72
msgid "B<copysign>(3)"
msgstr ""

#. type: TH
#: build/C/man3/significand.3:9
#, no-wrap
msgid "SIGNIFICAND"
msgstr ""

#. type: TH
#: build/C/man3/significand.3:9
#, no-wrap
msgid "2009-02-04"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:13
msgid ""
"significand, significandf, significandl - get mantissa of floating-point "
"number"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:17
msgid "B<double significand(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:19
msgid "B<float significandf(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:21
msgid "B<long double significandl(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:33
msgid "B<significand>(), B<significandf>(), B<significandl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:44
msgid ""
"The B<significand>()  function returns the mantissa of I<x> scaled to the "
"range [1,2).  It is equivalent to"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:47
msgid "scalb(x, (double) -ilogb(x))"
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:51
msgid ""
"This function exists mainly for use in certain standardized tests for IEEE "
"754 conformance."
msgstr ""

#.  .SH HISTORY
#.  This function came from BSD.
#. type: Plain text
#: build/C/man3/significand.3:57
msgid ""
"These functions are nonstandard; the I<double> version is available on a "
"number of other systems."
msgstr ""

#. type: Plain text
#: build/C/man3/significand.3:60
msgid "B<ilogb>(3), B<scalb>(3)"
msgstr ""

#. type: TH
#: build/C/man3/sin.3:35
#, no-wrap
msgid "SIN"
msgstr ""

#. type: TH
#: build/C/man3/sin.3:35
#, no-wrap
msgid "2013-12-16"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:38
msgid "sin, sinf, sinl - sine function"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:43
#, no-wrap
msgid "B<double sin(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:45
#, no-wrap
msgid "B<float sinf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:47
#, no-wrap
msgid "B<long double sinl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:59
msgid "B<sinf>(), B<sinl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:76
msgid ""
"The B<sin>()  function returns the sine of I<x>, where I<x> is given in "
"radians."
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:79
msgid "On success, these functions return the sine of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:116
msgid "The B<sin>(), B<sinf>(), and B<sinl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/sin.3:138
msgid ""
"B<acos>(3), B<asin>(3), B<atan>(3), B<atan2>(3), B<cos>(3), B<csin>(3), "
"B<sincos>(3), B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/sincos.3:9
#, no-wrap
msgid "SINCOS"
msgstr ""

#. type: TH
#: build/C/man3/sincos.3:9
#, no-wrap
msgid "2013-12-23"
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:12
msgid "sincos, sincosf, sincosl - calculate sin and cos simultaneously"
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:18
#, no-wrap
msgid "B<void sincos(double >I<x>B<, double *>I<sin>B<, double *>I<cos>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:20
#, no-wrap
msgid "B<void sincosf(float >I<x>B<, float *>I<sin>B<, float *>I<cos>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:22
#, no-wrap
msgid ""
"B<void sincosl(long double >I<x>B<, long double *>I<sin>B<, long double "
"*>I<cos>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:32
msgid ""
"Several applications need sine and cosine of the same angle I<x>.  This "
"function computes both at the same time, and stores the results in I<*sin> "
"and I<*cos>."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:40
msgid "If I<x> is a NaN, a NaN is returned in I<*sin> and I<*cos>."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:49
msgid ""
"If I<x> is positive infinity or negative infinity, a domain error occurs, "
"and a NaN is returned in I<*sin> and I<*cos>."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:52
msgid "These functions return I<void>."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:83
msgid "The B<sincos>(), B<sincosf>(), and B<sincosl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:85
msgid "This function is a GNU extension."
msgstr ""

#. type: Plain text
#: build/C/man3/sincos.3:89
msgid "B<cos>(3), B<sin>(3), B<tan>(3)"
msgstr ""

#. type: TH
#: build/C/man3/sinh.3:36
#, no-wrap
msgid "SINH"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:39
msgid "sinh, sinhf, sinhl - hyperbolic sine function"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:44
#, no-wrap
msgid "B<double sinh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:46
#, no-wrap
msgid "B<float sinhf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:48
#, no-wrap
msgid "B<long double sinhl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:60
msgid "B<sinhf>(), B<sinhl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:75
msgid ""
"The B<sinh>()  function returns the hyperbolic sine of I<x>, which is "
"defined mathematically as:"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:78
#, no-wrap
msgid "    sinh(x) = (exp(x) - exp(-x)) / 2\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:82
msgid "On success, these functions return the hyperbolic sine of I<x>."
msgstr ""

#
#.  POSIX.1-2001 documents an optional range error (underflow)
#.  for subnormal x;
#.  glibc 2.8 does not do this.
#. type: Plain text
#: build/C/man3/sinh.3:109
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with the same sign "
"as I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/sinh.3:137
msgid "B<acosh>(3), B<asinh>(3), B<atanh>(3), B<cosh>(3), B<csinh>(3), B<tanh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/sqrt.3:34
#, no-wrap
msgid "SQRT"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:37
msgid "sqrt, sqrtf, sqrtl - square root function"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:42
#, no-wrap
msgid "B<double sqrt(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:44
#, no-wrap
msgid "B<float sqrtf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:46
#, no-wrap
msgid "B<long double sqrtl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:58
msgid "B<sqrtf>(), B<sqrtl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:71
msgid "The B<sqrt>()  function returns the nonnegative square root of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:74
msgid "On success, these functions return the square root of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:92
msgid "If I<x> is less than -0, a domain error occurs, and a NaN is returned."
msgstr ""

#. type: TP
#: build/C/man3/sqrt.3:99
#, no-wrap
msgid "Domain error: I<x> less than -0"
msgstr ""

#. type: Plain text
#: build/C/man3/sqrt.3:117
msgid "B<cbrt>(3), B<csqrt>(3), B<hypot>(3)"
msgstr ""

#. type: TH
#: build/C/man3/tan.3:35
#, no-wrap
msgid "TAN"
msgstr ""

#. type: TH
#: build/C/man3/tan.3:35
#, no-wrap
msgid "2014-01-06"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:38
msgid "tan, tanf, tanl - tangent function"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:43
#, no-wrap
msgid "B<double tan(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:45
#, no-wrap
msgid "B<float tanf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:47
#, no-wrap
msgid "B<long double tanl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:59
msgid "B<tanf>(), B<tanl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:76
msgid ""
"The B<tan>()  function returns the tangent of I<x>, where I<x> is given in "
"radians."
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:79
msgid "On success, these functions return the tangent of I<x>."
msgstr ""

#.  I think overflow can't occur, because the closest floating-point
#.  representation of pi/2 is still not close enough to pi/2 to
#.  produce a large enough value to overflow.
#.  Testing certainly seems to bear this out.  -- mtk, Jul 08
#
#.  POSIX.1 allows an optional underflow error;
#.  glibc 2.8 doesn't do this
#.  POSIX.1 an optional range error for subnormal x;
#.  glibc 2.8 doesn't do this
#. type: Plain text
#: build/C/man3/tan.3:107
msgid ""
"If the correct result would overflow, a range error occurs, and the "
"functions return B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, "
"with the mathematically correct sign."
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:141
msgid "The B<tan>(), B<tanf>(), and B<tanl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/tan.3:162
msgid ""
"B<acos>(3), B<asin>(3), B<atan>(3), B<atan2>(3), B<cos>(3), B<ctan>(3), "
"B<sin>(3)"
msgstr ""

#. type: TH
#: build/C/man3/tanh.3:35
#, no-wrap
msgid "TANH"
msgstr ""

#. type: TH
#: build/C/man3/tanh.3:35
#, no-wrap
msgid "2014-01-07"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:38
msgid "tanh, tanhf, tanhl - hyperbolic tangent function"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:43
#, no-wrap
msgid "B<double tanh(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:45
#, no-wrap
msgid "B<float tanhf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:47
#, no-wrap
msgid "B<long double tanhl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:59
msgid "B<tanhf>(), B<tanhl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:74
msgid ""
"The B<tanh>()  function returns the hyperbolic tangent of I<x>, which is "
"defined mathematically as:"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:77
#, no-wrap
msgid "    tanh(x) = sinh(x) / cosh(x)\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:81
msgid "On success, these functions return the hyperbolic tangent of I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:108
msgid "The B<tanh>(), B<tanhf>(), and B<tanhl>()  functions are thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/tanh.3:121
msgid "B<acosh>(3), B<asinh>(3), B<atanh>(3), B<cosh>(3), B<ctanh>(3), B<sinh>(3)"
msgstr ""

#. type: TH
#: build/C/man3/tgamma.3:13
#, no-wrap
msgid "TGAMMA"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:16
msgid "tgamma, tgammaf, tgammal - true gamma function"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:20
msgid "B<double tgamma(double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:22
msgid "B<float tgammaf(float >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:24
msgid "B<long double tgammal(long double >I<x>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:36
msgid "B<tgamma>(), B<tgammaf>(), B<tgammal>():"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:46
msgid "The Gamma function is defined by"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:48
#, no-wrap
msgid "    Gamma(x) = integral from 0 to infinity of t^(x-1) e^-t dt\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:53
msgid ""
"It is defined for every real number except for nonpositive integers.  For "
"nonnegative integral I<m> one has"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:55
#, no-wrap
msgid "    Gamma(m+1) = m!\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:58
msgid "and, more generally, for all I<x>:"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:60
#, no-wrap
msgid "    Gamma(x+1) = x * Gamma(x)\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:64
msgid ""
"Furthermore, the following is valid for all values of I<x> outside the "
"poles:"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:66
#, no-wrap
msgid "    Gamma(x) * Gamma(1 - x) = PI / sin(PI * x)\n"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:69
msgid "On success, these functions return Gamma(x)."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:83
msgid ""
"If I<x> is a negative integer, or is negative infinity, a domain error "
"occurs, and a NaN is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:96
msgid ""
"If the result underflows, a range error occurs, and the functions return 0, "
"with the correct mathematical sign."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:107
msgid ""
"If I<x> is -0 or +0, a pole error occurs, and the functions return "
"B<HUGE_VAL>, B<HUGE_VALF>, or B<HUGE_VALL>, respectively, with the same sign "
"as the 0."
msgstr ""

#. type: TP
#: build/C/man3/tgamma.3:114
#, no-wrap
msgid "Domain error: I<x> is a negative integer, or negative infinity"
msgstr ""

#.  FIXME . errno is not set to EDOM for x == -inf
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
#. type: Plain text
#: build/C/man3/tgamma.3:124
msgid ""
"I<errno> is set to B<EDOM>.  An invalid floating-point exception "
"(B<FE_INVALID>)  is raised (but see BUGS)."
msgstr ""

#. type: TP
#: build/C/man3/tgamma.3:124
#, no-wrap
msgid "Pole error: I<x> is +0 or -0"
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:143
msgid ""
"glibc also gives the following error which is not specified in C99 or "
"POSIX.1-2001."
msgstr ""

#.  FIXME . Is it intentional that errno is not set:
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6810
#
#.  glibc (as at 2.8) also supports and an inexact
#.  exception for various cases.
#. type: Plain text
#: build/C/man3/tgamma.3:160
msgid "I<errno> is not set for this case."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:171
msgid ""
"This function had to be called \"true gamma function\" since there is "
"already a function B<gamma>(3)  that returns something else (see B<gamma>(3)  "
"for details)."
msgstr ""

#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
#. type: Plain text
#: build/C/man3/tgamma.3:179
msgid ""
"If I<x> is negative infinity, I<errno> is not set (it should be set to "
"B<EDOM>)."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:188
msgid ""
"In glibc versions 2.3.3 and earlier, an argument of +0 or -0 incorrectly "
"produced a domain error (I<errno> set to B<EDOM> and an B<FE_INVALID> "
"exception raised), rather than a pole error."
msgstr ""

#. type: Plain text
#: build/C/man3/tgamma.3:191
msgid "B<gamma>(3), B<lgamma>(3)"
msgstr ""

#. type: TH
#: build/C/man3/trunc.3:25
#, no-wrap
msgid "TRUNC"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:28
msgid "trunc, truncf, truncl - round to integer, toward zero"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:33
#, no-wrap
msgid "B<double trunc(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:35
#, no-wrap
msgid "B<float truncf(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:37
#, no-wrap
msgid "B<long double truncl(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:50
msgid "B<trunc>(), B<truncf>(), B<truncl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:63
msgid ""
"These functions round I<x> to the nearest integer not larger in absolute "
"value."
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:71
msgid "If I<x> is integral, infinite, or NaN, I<x> itself is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/trunc.3:83
msgid "The B<trunc>(), B<truncf>(), and B<truncl>()  functions are thread-safe."
msgstr ""

#. type: TH
#: build/C/man3/y0.3:36
#, no-wrap
msgid "Y0"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:40
msgid ""
"y0, y0f, y0l, y1, y1f, y1l, yn, ynf, ynl - Bessel functions of the second "
"kind"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:45
#, no-wrap
msgid "B<double y0(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:47
#, no-wrap
msgid "B<double y1(double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:49
#, no-wrap
msgid "B<double yn(int >I<n>B<, double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:51
#, no-wrap
msgid "B<float y0f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:53
#, no-wrap
msgid "B<float y1f(float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:55
#, no-wrap
msgid "B<float ynf(int >I<n>B<, float >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:57
#, no-wrap
msgid "B<long double y0l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:59
#, no-wrap
msgid "B<long double y1l(long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:61
#, no-wrap
msgid "B<long double ynl(int >I<n>B<, long double >I<x>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:74
msgid "B<y0>(), B<y1>(), B<yn>():"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:84
msgid "B<y0f>(), B<y0l>(), B<y1f>(), B<y1l>(), B<ynf>(), B<ynl>():"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:105
msgid ""
"The B<y0>()  and B<y1>()  functions return Bessel functions of I<x> of the "
"second kind of orders 0 and 1, respectively.  The B<yn>()  function returns "
"the Bessel function of I<x> of the second kind of order I<n>."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:109
msgid "The value of I<x> must be positive."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:126
msgid ""
"The B<y0f>(), B<y1f>(), and B<ynf>()  functions are versions that take and "
"return I<float> values.  The B<y0l>(), B<y1l>(), and B<ynl>()  functions are "
"versions that take and return I<long double> values."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:130
msgid ""
"On success, these functions return the appropriate Bessel value of the "
"second kind for I<x>."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:146
msgid ""
"If I<x> is negative, a domain error occurs, and the functions return "
"-B<HUGE_VAL>, -B<HUGE_VALF>, or -B<HUGE_VALL>, respectively.  (POSIX.1-2001 "
"also allows a NaN return for this case.)"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:157
msgid ""
"If I<x> is 0.0, a pole error occurs, and the functions return -B<HUGE_VAL>, "
"-B<HUGE_VALF>, or -B<HUGE_VALL>, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:161
msgid "If the result underflows, a range error occurs, and the functions return 0.0"
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:171
msgid ""
"If the result overflows, a range error occurs, and the functions return "
"-B<HUGE_VAL>, -B<HUGE_VALF>, or -B<HUGE_VALL>, respectively.  (POSIX.1-2001 "
"also allows a 0.0 return for this case.)"
msgstr ""

#. type: TP
#: build/C/man3/y0.3:186
#, no-wrap
msgid "Pole error: I<x> is 0.0"
msgstr ""

#.  Before POSIX.1-2001 TC2, this was (inconsistently) specified
#.  as a range error.
#.  FIXME . y0(0.0) gives EDOM
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
#. type: Plain text
#: build/C/man3/y0.3:201
msgid ""
"I<errno> is set to B<ERANGE> (but see BUGS).  No B<FE_DIVBYZERO> exception "
"is returned by B<fetestexcept>(3)  for this case."
msgstr ""

#.  e.g., y0(1e33) on glibc 2.8/x86-32
#.  An underflow floating-point exception
#.  .RB ( FE_UNDERFLOW )
#.  is raised.
#.  FIXME . Is it intentional that these functions do not use FE_*?
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6806
#. type: Plain text
#: build/C/man3/y0.3:217
msgid ""
"I<errno> is set to B<ERANGE>.  No B<FE_UNDERFLOW> exception is returned by "
"B<fetestexcept>(3)  for this case."
msgstr ""

#.  e.g., yn(10, 1e-40) on glibc 2.8/x86-32
#.  .I errno
#.  is set to
#.  .BR ERANGE .
#.  FIXME . Is it intentional that errno is not set?
#.  Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
#. type: Plain text
#: build/C/man3/y0.3:230
msgid ""
"I<errno> is not set for this case.  An overflow floating-point exception "
"(B<FE_OVERFLOW>)  is raised."
msgstr ""

#.  FIXME .
#.  Bug raised: http://sourceware.org/bugzilla/show_bug.cgi?id=6807
#. type: Plain text
#: build/C/man3/y0.3:246
msgid ""
"On a pole error, these functions set I<errno> to B<EDOM>, instead of "
"B<ERANGE> as POSIX.1-2004 requires."
msgstr ""

#.  FIXME . Actually, 2.3.2 is the earliest test result I have; so yet
#.  to confirm if this error occurs only in 2.3.2.
#. type: Plain text
#: build/C/man3/y0.3:253
msgid ""
"In glibc version 2.3.2 and earlier, these functions do not raise an invalid "
"floating-point exception (B<FE_INVALID>)  when a domain error occurs."
msgstr ""

#. type: Plain text
#: build/C/man3/y0.3:255
msgid "B<j0>(3)"
msgstr ""
